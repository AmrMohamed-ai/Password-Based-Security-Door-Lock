
Door_Lock_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00002986  00002a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080014a  0080014a  00002b04  2**0
                  ALLOC
  3 .stab         0000285c  00000000  00000000  00002b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014a8  00000000  00000000  00005360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008701  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a39c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a789  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 35       	cpi	r26, 0x50	; 80
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 05 	call	0xb74	; 0xb74 <main>
      8a:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e3       	ldi	r26, 0x35	; 53
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e3       	ldi	r24, 0x35	; 53
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER_counter>:
Uart_ConfigType Uart_Config = {8,9600,Disabled,ONE_STOP_BIT,ASynchronous,DoubleSpeed};



void TIMER_counter(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	 *                 Through a pointer to function in the function Timer0_OVF_setCallBack.
	 * [Args]        : The function takes no arguments .
	 * [Returns]     : The function returns void .
	 *
	 *********************************************************************************************************************************/
	g_sec++;
     b4e:	80 91 4b 01 	lds	r24, 0x014B
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 4b 01 	sts	0x014B, r24
	if(g_sec == 30)
     b58:	80 91 4b 01 	lds	r24, 0x014B
     b5c:	8e 31       	cpi	r24, 0x1E	; 30
     b5e:	39 f4       	brne	.+14     	; 0xb6e <TIMER_counter+0x28>
	{
		g_timer++;
     b60:	80 91 4a 01 	lds	r24, 0x014A
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 4a 01 	sts	0x014A, r24
		g_sec = 0;
     b6a:	10 92 4b 01 	sts	0x014B, r1
	}
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <main>:
/********************************************************************************************************************************
 *                                  ** Main Application **
 *******************************************************************************************************************************/
int main(void)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	6e 97       	sbiw	r28, 0x1e	; 30
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
	char passStr1[7];
	/* This array of characters stores re_enterd new password then the Right password received from EEPROM in  CONTROL_ECU
	 * its main usage is for comparing with the entered password from the user */
	char passStr2[7];
	/* set Global interrupt flag */
	SREG  |= ( 1<<7 ) ;
     b88:	af e5       	ldi	r26, 0x5F	; 95
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ef e5       	ldi	r30, 0x5F	; 95
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	80 68       	ori	r24, 0x80	; 128
     b94:	8c 93       	st	X, r24


	/* This function is responsible for initialization of the UART module for AVR MCP */
	UART_init(&Uart_Config);
     b96:	82 e4       	ldi	r24, 0x42	; 66
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <UART_init>
	/* This function is responsible for initialization of the LCD module for AVR MCP */
	LCD_init();
     b9e:	0e 94 06 08 	call	0x100c	; 0x100c <LCD_init>
	/* This function is responsible for passing the TIMER_counter function to the TIMER module ISR */
	Timer0_OVF_setCallBack(TIMER_counter);
     ba2:	83 ea       	ldi	r24, 0xA3	; 163
     ba4:	95 e0       	ldi	r25, 0x05	; 5
     ba6:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <Timer0_OVF_setCallBack>

	/* This function is responsible for sending the new password set by the user to the CONTROL_ECU (described in used_functions.c) */
	LOCK_sendNewPass(passStr1,passStr2);
     baa:	ce 01       	movw	r24, r28
     bac:	41 96       	adiw	r24, 0x11	; 17
     bae:	9e 01       	movw	r18, r28
     bb0:	28 5e       	subi	r18, 0xE8	; 232
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
     bb4:	b9 01       	movw	r22, r18
     bb6:	0e 94 71 11 	call	0x22e2	; 0x22e2 <LOCK_sendNewPass>
	/* This function is responsible for receiving the right password saved at first time in EEPROM in CONTOL_ECU
	 *  (described in used_functions.c) */
	LOCK_receiveRightPass(passStr2);
     bba:	ce 01       	movw	r24, r28
     bbc:	48 96       	adiw	r24, 0x18	; 24
     bbe:	0e 94 01 10 	call	0x2002	; 0x2002 <LOCK_receiveRightPass>


	while(1)
	{
		/* This function is responsible for clearing the LCD screen */
		LCD_clearScreen();
     bc2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
		/* This function is responsible for displaying the string "+ : Change Pass" from the first Row & Column */
		LCD_displayStringRowColumn(0,0,"+ : Change Pass ");
     bc6:	20 e6       	ldi	r18, 0x60	; 96
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	a9 01       	movw	r20, r18
     bd0:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
		/* This function is responsible for displaying the string "= : Open door" from the second Row & first Column */
		LCD_displayStringRowColumn(1,0,"= : Open door ");
     bd4:	21 e7       	ldi	r18, 0x71	; 113
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	a9 01       	movw	r20, r18
     bde:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
		/* This while loop function is to hold the program until the user enter (+) or (=) */
		while( (KeyPad_getPressedKey()!= '=') && (KeyPad_getPressedKey() != '+') ){}
     be2:	0e 94 08 07 	call	0xe10	; 0xe10 <KeyPad_getPressedKey>
     be6:	8d 33       	cpi	r24, 0x3D	; 61
     be8:	21 f0       	breq	.+8      	; 0xbf2 <main+0x7e>
     bea:	0e 94 08 07 	call	0xe10	; 0xe10 <KeyPad_getPressedKey>
     bee:	8b 32       	cpi	r24, 0x2B	; 43
     bf0:	c1 f7       	brne	.-16     	; 0xbe2 <main+0x6e>
		/* storing the return value of the KEYPAD in the variable key */
		key = KeyPad_getPressedKey() ;
     bf2:	0e 94 08 07 	call	0xe10	; 0xe10 <KeyPad_getPressedKey>
     bf6:	88 8b       	std	Y+16, r24	; 0x10
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	aa ef       	ldi	r26, 0xFA	; 250
     bfe:	b4 e4       	ldi	r27, 0x44	; 68
     c00:	8b 87       	std	Y+11, r24	; 0x0b
     c02:	9c 87       	std	Y+12, r25	; 0x0c
     c04:	ad 87       	std	Y+13, r26	; 0x0d
     c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c08:	6b 85       	ldd	r22, Y+11	; 0x0b
     c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	4a e7       	ldi	r20, 0x7A	; 122
     c16:	53 e4       	ldi	r21, 0x43	; 67
     c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	8f 83       	std	Y+7, r24	; 0x07
     c22:	98 87       	std	Y+8, r25	; 0x08
     c24:	a9 87       	std	Y+9, r26	; 0x09
     c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c28:	6f 81       	ldd	r22, Y+7	; 0x07
     c2a:	78 85       	ldd	r23, Y+8	; 0x08
     c2c:	89 85       	ldd	r24, Y+9	; 0x09
     c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e8       	ldi	r20, 0x80	; 128
     c36:	5f e3       	ldi	r21, 0x3F	; 63
     c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c3c:	88 23       	and	r24, r24
     c3e:	2c f4       	brge	.+10     	; 0xc4a <main+0xd6>
		__ticks = 1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	9e 83       	std	Y+6, r25	; 0x06
     c46:	8d 83       	std	Y+5, r24	; 0x05
     c48:	3f c0       	rjmp	.+126    	; 0xcc8 <main+0x154>
	else if (__tmp > 65535)
     c4a:	6f 81       	ldd	r22, Y+7	; 0x07
     c4c:	78 85       	ldd	r23, Y+8	; 0x08
     c4e:	89 85       	ldd	r24, Y+9	; 0x09
     c50:	9a 85       	ldd	r25, Y+10	; 0x0a
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	3f ef       	ldi	r19, 0xFF	; 255
     c56:	4f e7       	ldi	r20, 0x7F	; 127
     c58:	57 e4       	ldi	r21, 0x47	; 71
     c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c5e:	18 16       	cp	r1, r24
     c60:	4c f5       	brge	.+82     	; 0xcb4 <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c62:	6b 85       	ldd	r22, Y+11	; 0x0b
     c64:	7c 85       	ldd	r23, Y+12	; 0x0c
     c66:	8d 85       	ldd	r24, Y+13	; 0x0d
     c68:	9e 85       	ldd	r25, Y+14	; 0x0e
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e2       	ldi	r20, 0x20	; 32
     c70:	51 e4       	ldi	r21, 0x41	; 65
     c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	bc 01       	movw	r22, r24
     c7c:	cd 01       	movw	r24, r26
     c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	9e 83       	std	Y+6, r25	; 0x06
     c88:	8d 83       	std	Y+5, r24	; 0x05
     c8a:	0f c0       	rjmp	.+30     	; 0xcaa <main+0x136>
     c8c:	89 e1       	ldi	r24, 0x19	; 25
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9c 83       	std	Y+4, r25	; 0x04
     c92:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	9c 81       	ldd	r25, Y+4	; 0x04
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <main+0x124>
     c9c:	9c 83       	std	Y+4, r25	; 0x04
     c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca0:	8d 81       	ldd	r24, Y+5	; 0x05
     ca2:	9e 81       	ldd	r25, Y+6	; 0x06
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	9e 83       	std	Y+6, r25	; 0x06
     ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	9e 81       	ldd	r25, Y+6	; 0x06
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	69 f7       	brne	.-38     	; 0xc8c <main+0x118>
     cb2:	14 c0       	rjmp	.+40     	; 0xcdc <main+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb4:	6f 81       	ldd	r22, Y+7	; 0x07
     cb6:	78 85       	ldd	r23, Y+8	; 0x08
     cb8:	89 85       	ldd	r24, Y+9	; 0x09
     cba:	9a 85       	ldd	r25, Y+10	; 0x0a
     cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc0:	dc 01       	movw	r26, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	9e 83       	std	Y+6, r25	; 0x06
     cc6:	8d 83       	std	Y+5, r24	; 0x05
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	9e 81       	ldd	r25, Y+6	; 0x06
     ccc:	9a 83       	std	Y+2, r25	; 0x02
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <main+0x160>
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	89 83       	std	Y+1, r24	; 0x01
		/* This delay function is for handling the key pressed to be once for single press*/
		_delay_ms(2000);

		/***** This if else statements is for the options selected by the user in case of (=) Open door or (+) Change password *****/
		if(key == '+')
     cdc:	88 89       	ldd	r24, Y+16	; 0x10
     cde:	8b 32       	cpi	r24, 0x2B	; 43
     ce0:	09 f0       	breq	.+2      	; 0xce4 <main+0x170>
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <main+0x1ee>
		{
			/* The LOCK_enterPass functions returns 0 if the user entered a wrong password 3 times in a row and returns 1 if the user
			 * entered the right password */
			flag = LOCK_enterPass(passStr1,passStr2);
     ce4:	ce 01       	movw	r24, r28
     ce6:	41 96       	adiw	r24, 0x11	; 17
     ce8:	9e 01       	movw	r18, r28
     cea:	28 5e       	subi	r18, 0xE8	; 232
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	b9 01       	movw	r22, r18
     cf0:	0e 94 24 10 	call	0x2048	; 0x2048 <LOCK_enterPass>
     cf4:	8f 87       	std	Y+15, r24	; 0x0f
			if(flag == 0)
     cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf8:	88 23       	and	r24, r24
     cfa:	c1 f4       	brne	.+48     	; 0xd2c <main+0x1b8>
			{
				/* if flag = 0 the HMI_ECU sends to the CONTOL_ECU that the BUZZER must be turned on and the HMI_ECU displays BUZZER!!! on
				 * the LCD screen for 60 seconds  ***************/
				UART_sendByte(OPTION,&Uart_Config);
     cfc:	22 e4       	ldi	r18, 0x42	; 66
     cfe:	31 e0       	ldi	r19, 0x01	; 1
     d00:	80 e5       	ldi	r24, 0x50	; 80
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	b9 01       	movw	r22, r18
     d06:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>
				UART_sendByte(BUZZER,&Uart_Config);
     d0a:	22 e4       	ldi	r18, 0x42	; 66
     d0c:	31 e0       	ldi	r19, 0x01	; 1
     d0e:	80 e7       	ldi	r24, 0x70	; 112
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	b9 01       	movw	r22, r18
     d14:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>
				LCD_clearScreen();
     d18:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
				LCD_displayString("BUZZER!!!");
     d1c:	80 e8       	ldi	r24, 0x80	; 128
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 19 0c 	call	0x1832	; 0x1832 <LCD_displayString>
				/* This function is responsible for counting 60 seconds using TIMER Module (described in used_functions.c)*/
				LOCK_timerCount(BUZZER_TIME);
     d24:	8c e3       	ldi	r24, 0x3C	; 60
     d26:	0e 94 01 14 	call	0x2802	; 0x2802 <LOCK_timerCount>
     d2a:	4b cf       	rjmp	.-362    	; 0xbc2 <main+0x4e>
				/* After displaying BUZZER for 60 seconds the HMI_ECU returns to the main options screen */
				continue;
			}
			/* send to the CONTROL_ECU that the option chosen is change pass */
			UART_sendByte(OPTION,&Uart_Config);
     d2c:	22 e4       	ldi	r18, 0x42	; 66
     d2e:	31 e0       	ldi	r19, 0x01	; 1
     d30:	80 e5       	ldi	r24, 0x50	; 80
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	b9 01       	movw	r22, r18
     d36:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>
			UART_sendByte(NEW_PASS,&Uart_Config);
     d3a:	22 e4       	ldi	r18, 0x42	; 66
     d3c:	31 e0       	ldi	r19, 0x01	; 1
     d3e:	80 e6       	ldi	r24, 0x60	; 96
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	b9 01       	movw	r22, r18
     d44:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>
			/* This function is responsible for sending the new password set by the user to the CONTROL_ECU (described in used_functions.c) */
			LOCK_sendNewPass(passStr1,passStr2);
     d48:	ce 01       	movw	r24, r28
     d4a:	41 96       	adiw	r24, 0x11	; 17
     d4c:	9e 01       	movw	r18, r28
     d4e:	28 5e       	subi	r18, 0xE8	; 232
     d50:	3f 4f       	sbci	r19, 0xFF	; 255
     d52:	b9 01       	movw	r22, r18
     d54:	0e 94 71 11 	call	0x22e2	; 0x22e2 <LOCK_sendNewPass>
			/* This function is responsible for receiving the right password saved at first time in EEPROM in CONTOL_ECU (described in used_functions.c) */
			LOCK_receiveRightPass(passStr2);
     d58:	ce 01       	movw	r24, r28
     d5a:	48 96       	adiw	r24, 0x18	; 24
     d5c:	0e 94 01 10 	call	0x2002	; 0x2002 <LOCK_receiveRightPass>
     d60:	30 cf       	rjmp	.-416    	; 0xbc2 <main+0x4e>
		}
		else
		{
			/* The LOCK_enterPass functions returns 0 if the user entered a wrong password 3 times in a row and returns 1 if the user
			 * entered the right password */
			flag =LOCK_enterPass(passStr1,passStr2);
     d62:	ce 01       	movw	r24, r28
     d64:	41 96       	adiw	r24, 0x11	; 17
     d66:	9e 01       	movw	r18, r28
     d68:	28 5e       	subi	r18, 0xE8	; 232
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	b9 01       	movw	r22, r18
     d6e:	0e 94 24 10 	call	0x2048	; 0x2048 <LOCK_enterPass>
     d72:	8f 87       	std	Y+15, r24	; 0x0f
			if(flag == 0)
     d74:	8f 85       	ldd	r24, Y+15	; 0x0f
     d76:	88 23       	and	r24, r24
     d78:	c1 f4       	brne	.+48     	; 0xdaa <main+0x236>
			{
				/* if flag = 0 the HMI_ECU sends to the CONTOL_ECU that the BUZZER must be turned on and the HMI_ECU displays BUZZER!!! on
				 * the LCD screen for 60 seconds  ***************/
				UART_sendByte(OPTION,&Uart_Config);
     d7a:	22 e4       	ldi	r18, 0x42	; 66
     d7c:	31 e0       	ldi	r19, 0x01	; 1
     d7e:	80 e5       	ldi	r24, 0x50	; 80
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	b9 01       	movw	r22, r18
     d84:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>
				UART_sendByte(BUZZER,&Uart_Config);
     d88:	22 e4       	ldi	r18, 0x42	; 66
     d8a:	31 e0       	ldi	r19, 0x01	; 1
     d8c:	80 e7       	ldi	r24, 0x70	; 112
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	b9 01       	movw	r22, r18
     d92:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>
				LCD_clearScreen();
     d96:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
				LCD_displayString("BUZZER!!!");
     d9a:	80 e8       	ldi	r24, 0x80	; 128
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 19 0c 	call	0x1832	; 0x1832 <LCD_displayString>
				/* This function is responsible for counting 60 seconds using TIMER Module (described in used_functions.c)*/
				LOCK_timerCount(BUZZER_TIME);
     da2:	8c e3       	ldi	r24, 0x3C	; 60
     da4:	0e 94 01 14 	call	0x2802	; 0x2802 <LOCK_timerCount>
     da8:	0c cf       	rjmp	.-488    	; 0xbc2 <main+0x4e>
				/* After displaying BUZZER for 60 seconds the HMI_ECU returns to the main options screen */
				continue;
			}
			/* send to the CONTROL_ECU that the option chosen is Opening the door for 15 seconds then hold 3 seconds and close for 15 seconds */
			UART_sendByte(OPTION,&Uart_Config);
     daa:	22 e4       	ldi	r18, 0x42	; 66
     dac:	31 e0       	ldi	r19, 0x01	; 1
     dae:	80 e5       	ldi	r24, 0x50	; 80
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	b9 01       	movw	r22, r18
     db4:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>
			UART_sendByte(MOTOR,&Uart_Config);
     db8:	22 e4       	ldi	r18, 0x42	; 66
     dba:	31 e0       	ldi	r19, 0x01	; 1
     dbc:	80 e8       	ldi	r24, 0x80	; 128
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	b9 01       	movw	r22, r18
     dc2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>
			/* displaying "Opening..." in the LCD screen for 15 seconds */
			LCD_clearScreen();
     dc6:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Opening ... ");
     dca:	2a e8       	ldi	r18, 0x8A	; 138
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	a9 01       	movw	r20, r18
     dd4:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
			/* This function is responsible for counting 15 seconds ( opening time ) using TIMER Module (described in used_functions.c)*/
			LOCK_timerCount(OPEN_CLOSE_TIME);
     dd8:	8f e0       	ldi	r24, 0x0F	; 15
     dda:	0e 94 01 14 	call	0x2802	; 0x2802 <LOCK_timerCount>
			/* displaying "hold.." in the LCD screen for 3 seconds */
			LCD_clearScreen();
     dde:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"hold..");
     de2:	27 e9       	ldi	r18, 0x97	; 151
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	a9 01       	movw	r20, r18
     dec:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
			/* This function is responsible for counting 3 seconds ( hold time )using TIMER Module (described in used_functions.c)*/
			LOCK_timerCount(HOLD_TIME);
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	0e 94 01 14 	call	0x2802	; 0x2802 <LOCK_timerCount>
			/* displaying "closing..." in the LCD screen for 15 seconds */
			LCD_clearScreen();
     df6:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"closing ... ");
     dfa:	2e e9       	ldi	r18, 0x9E	; 158
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	a9 01       	movw	r20, r18
     e04:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
			/* This function is responsible for counting 15 seconds ( closing time ) using TIMER Module (described in used_functions.c)*/
			LOCK_timerCount(OPEN_CLOSE_TIME);
     e08:	8f e0       	ldi	r24, 0x0F	; 15
     e0a:	0e 94 01 14 	call	0x2802	; 0x2802 <LOCK_timerCount>
     e0e:	d9 ce       	rjmp	.-590    	; 0xbc2 <main+0x4e>

00000e10 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <KeyPad_getPressedKey+0x6>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     e1a:	1a 82       	std	Y+2, r1	; 0x02
     e1c:	4c c0       	rjmp	.+152    	; 0xeb6 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     e1e:	ea e3       	ldi	r30, 0x3A	; 58
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	80 e1       	ldi	r24, 0x10	; 16
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <KeyPad_getPressedKey+0x22>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	2a 95       	dec	r18
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <KeyPad_getPressedKey+0x1e>
     e36:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     e38:	eb e3       	ldi	r30, 0x3B	; 59
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	80 e1       	ldi	r24, 0x10	; 16
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <KeyPad_getPressedKey+0x3e>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <KeyPad_getPressedKey+0x3a>
     e52:	80 95       	com	r24
     e54:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     e56:	19 82       	std	Y+1, r1	; 0x01
     e58:	28 c0       	rjmp	.+80     	; 0xeaa <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     e5a:	e9 e3       	ldi	r30, 0x39	; 57
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a9 01       	movw	r20, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <KeyPad_getPressedKey+0x62>
     e6e:	55 95       	asr	r21
     e70:	47 95       	ror	r20
     e72:	8a 95       	dec	r24
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <KeyPad_getPressedKey+0x5e>
     e76:	ca 01       	movw	r24, r20
     e78:	81 70       	andi	r24, 0x01	; 1
     e7a:	90 70       	andi	r25, 0x00	; 0
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	91 f4       	brne	.+36     	; 0xea4 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	88 2f       	mov	r24, r24
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	98 2f       	mov	r25, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	89 0f       	add	r24, r25
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	0e 94 60 07 	call	0xec0	; 0xec0 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	84 30       	cpi	r24, 0x04	; 4
     eae:	a8 f2       	brcs	.-86     	; 0xe5a <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	8a 83       	std	Y+2, r24	; 0x02
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	84 30       	cpi	r24, 0x04	; 4
     eba:	08 f4       	brcc	.+2      	; 0xebe <KeyPad_getPressedKey+0xae>
     ebc:	b0 cf       	rjmp	.-160    	; 0xe1e <KeyPad_getPressedKey+0xe>
     ebe:	ad cf       	rjmp	.-166    	; 0xe1a <KeyPad_getPressedKey+0xa>

00000ec0 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <KeyPad_4x4_adjustKeyNumber+0x6>
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <KeyPad_4x4_adjustKeyNumber+0x8>
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3c 83       	std	Y+4, r19	; 0x04
     ed6:	2b 83       	std	Y+3, r18	; 0x03
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	88 30       	cpi	r24, 0x08	; 8
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <KeyPad_4x4_adjustKeyNumber+0x24>
     ee2:	70 c0       	rjmp	.+224    	; 0xfc4 <KeyPad_4x4_adjustKeyNumber+0x104>
     ee4:	2b 81       	ldd	r18, Y+3	; 0x03
     ee6:	3c 81       	ldd	r19, Y+4	; 0x04
     ee8:	29 30       	cpi	r18, 0x09	; 9
     eea:	31 05       	cpc	r19, r1
     eec:	5c f5       	brge	.+86     	; 0xf44 <KeyPad_4x4_adjustKeyNumber+0x84>
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	84 30       	cpi	r24, 0x04	; 4
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <KeyPad_4x4_adjustKeyNumber+0x3a>
     ef8:	59 c0       	rjmp	.+178    	; 0xfac <KeyPad_4x4_adjustKeyNumber+0xec>
     efa:	2b 81       	ldd	r18, Y+3	; 0x03
     efc:	3c 81       	ldd	r19, Y+4	; 0x04
     efe:	25 30       	cpi	r18, 0x05	; 5
     f00:	31 05       	cpc	r19, r1
     f02:	9c f4       	brge	.+38     	; 0xf2a <KeyPad_4x4_adjustKeyNumber+0x6a>
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f4       	brne	.+2      	; 0xf10 <KeyPad_4x4_adjustKeyNumber+0x50>
     f0e:	48 c0       	rjmp	.+144    	; 0xfa0 <KeyPad_4x4_adjustKeyNumber+0xe0>
     f10:	2b 81       	ldd	r18, Y+3	; 0x03
     f12:	3c 81       	ldd	r19, Y+4	; 0x04
     f14:	23 30       	cpi	r18, 0x03	; 3
     f16:	31 05       	cpc	r19, r1
     f18:	0c f0       	brlt	.+2      	; 0xf1c <KeyPad_4x4_adjustKeyNumber+0x5c>
     f1a:	45 c0       	rjmp	.+138    	; 0xfa6 <KeyPad_4x4_adjustKeyNumber+0xe6>
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <KeyPad_4x4_adjustKeyNumber+0x68>
     f26:	39 c0       	rjmp	.+114    	; 0xf9a <KeyPad_4x4_adjustKeyNumber+0xda>
     f28:	67 c0       	rjmp	.+206    	; 0xff8 <KeyPad_4x4_adjustKeyNumber+0x138>
     f2a:	2b 81       	ldd	r18, Y+3	; 0x03
     f2c:	3c 81       	ldd	r19, Y+4	; 0x04
     f2e:	26 30       	cpi	r18, 0x06	; 6
     f30:	31 05       	cpc	r19, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <KeyPad_4x4_adjustKeyNumber+0x76>
     f34:	41 c0       	rjmp	.+130    	; 0xfb8 <KeyPad_4x4_adjustKeyNumber+0xf8>
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	87 30       	cpi	r24, 0x07	; 7
     f3c:	91 05       	cpc	r25, r1
     f3e:	0c f0       	brlt	.+2      	; 0xf42 <KeyPad_4x4_adjustKeyNumber+0x82>
     f40:	3e c0       	rjmp	.+124    	; 0xfbe <KeyPad_4x4_adjustKeyNumber+0xfe>
     f42:	37 c0       	rjmp	.+110    	; 0xfb2 <KeyPad_4x4_adjustKeyNumber+0xf2>
     f44:	2b 81       	ldd	r18, Y+3	; 0x03
     f46:	3c 81       	ldd	r19, Y+4	; 0x04
     f48:	2c 30       	cpi	r18, 0x0C	; 12
     f4a:	31 05       	cpc	r19, r1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <KeyPad_4x4_adjustKeyNumber+0x90>
     f4e:	46 c0       	rjmp	.+140    	; 0xfdc <KeyPad_4x4_adjustKeyNumber+0x11c>
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	8d 30       	cpi	r24, 0x0D	; 13
     f56:	91 05       	cpc	r25, r1
     f58:	5c f4       	brge	.+22     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0xb0>
     f5a:	2b 81       	ldd	r18, Y+3	; 0x03
     f5c:	3c 81       	ldd	r19, Y+4	; 0x04
     f5e:	2a 30       	cpi	r18, 0x0A	; 10
     f60:	31 05       	cpc	r19, r1
     f62:	b1 f1       	breq	.+108    	; 0xfd0 <KeyPad_4x4_adjustKeyNumber+0x110>
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	8b 30       	cpi	r24, 0x0B	; 11
     f6a:	91 05       	cpc	r25, r1
     f6c:	a4 f5       	brge	.+104    	; 0xfd6 <KeyPad_4x4_adjustKeyNumber+0x116>
     f6e:	2d c0       	rjmp	.+90     	; 0xfca <KeyPad_4x4_adjustKeyNumber+0x10a>
     f70:	2b 81       	ldd	r18, Y+3	; 0x03
     f72:	3c 81       	ldd	r19, Y+4	; 0x04
     f74:	2e 30       	cpi	r18, 0x0E	; 14
     f76:	31 05       	cpc	r19, r1
     f78:	b9 f1       	breq	.+110    	; 0xfe8 <KeyPad_4x4_adjustKeyNumber+0x128>
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	8e 30       	cpi	r24, 0x0E	; 14
     f80:	91 05       	cpc	r25, r1
     f82:	7c f1       	brlt	.+94     	; 0xfe2 <KeyPad_4x4_adjustKeyNumber+0x122>
     f84:	2b 81       	ldd	r18, Y+3	; 0x03
     f86:	3c 81       	ldd	r19, Y+4	; 0x04
     f88:	2f 30       	cpi	r18, 0x0F	; 15
     f8a:	31 05       	cpc	r19, r1
     f8c:	79 f1       	breq	.+94     	; 0xfec <KeyPad_4x4_adjustKeyNumber+0x12c>
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	80 31       	cpi	r24, 0x10	; 16
     f94:	91 05       	cpc	r25, r1
     f96:	69 f1       	breq	.+90     	; 0xff2 <KeyPad_4x4_adjustKeyNumber+0x132>
     f98:	2f c0       	rjmp	.+94     	; 0xff8 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
     f9a:	97 e0       	ldi	r25, 0x07	; 7
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	2e c0       	rjmp	.+92     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
     fa0:	28 e0       	ldi	r18, 0x08	; 8
     fa2:	2a 83       	std	Y+2, r18	; 0x02
     fa4:	2b c0       	rjmp	.+86     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
     fa6:	39 e0       	ldi	r19, 0x09	; 9
     fa8:	3a 83       	std	Y+2, r19	; 0x02
     faa:	28 c0       	rjmp	.+80     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     fac:	85 e2       	ldi	r24, 0x25	; 37
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	25 c0       	rjmp	.+74     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
     fb2:	94 e0       	ldi	r25, 0x04	; 4
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	22 c0       	rjmp	.+68     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     fb8:	25 e0       	ldi	r18, 0x05	; 5
     fba:	2a 83       	std	Y+2, r18	; 0x02
     fbc:	1f c0       	rjmp	.+62     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
     fbe:	36 e0       	ldi	r19, 0x06	; 6
     fc0:	3a 83       	std	Y+2, r19	; 0x02
     fc2:	1c c0       	rjmp	.+56     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     fc4:	8a e2       	ldi	r24, 0x2A	; 42
     fc6:	8a 83       	std	Y+2, r24	; 0x02
     fc8:	19 c0       	rjmp	.+50     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	16 c0       	rjmp	.+44     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
     fd0:	22 e0       	ldi	r18, 0x02	; 2
     fd2:	2a 83       	std	Y+2, r18	; 0x02
     fd4:	13 c0       	rjmp	.+38     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
     fd6:	33 e0       	ldi	r19, 0x03	; 3
     fd8:	3a 83       	std	Y+2, r19	; 0x02
     fda:	10 c0       	rjmp	.+32     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     fdc:	8d e2       	ldi	r24, 0x2D	; 45
     fde:	8a 83       	std	Y+2, r24	; 0x02
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     fe2:	9d e0       	ldi	r25, 0x0D	; 13
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	0a c0       	rjmp	.+20     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
     fe8:	1a 82       	std	Y+2, r1	; 0x02
     fea:	08 c0       	rjmp	.+16     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     fec:	2d e3       	ldi	r18, 0x3D	; 61
     fee:	2a 83       	std	Y+2, r18	; 0x02
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     ff2:	3b e2       	ldi	r19, 0x2B	; 43
     ff4:	3a 83       	std	Y+2, r19	; 0x02
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	8a 83       	std	Y+2, r24	; 0x02
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1014:	e4 e3       	ldi	r30, 0x34	; 52
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    101c:	a1 e3       	ldi	r26, 0x31	; 49
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e1 e3       	ldi	r30, 0x31	; 49
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 67       	ori	r24, 0x70	; 112
    1028:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    102a:	88 e3       	ldi	r24, 0x38	; 56
    102c:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1030:	8c e0       	ldi	r24, 0x0C	; 12
    1032:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendCommand>
}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	e9 97       	sbiw	r28, 0x39	; 57
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1058:	a2 e3       	ldi	r26, 0x32	; 50
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e2 e3       	ldi	r30, 0x32	; 50
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8f 7e       	andi	r24, 0xEF	; 239
    1064:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1066:	a2 e3       	ldi	r26, 0x32	; 50
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e2 e3       	ldi	r30, 0x32	; 50
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7d       	andi	r24, 0xDF	; 223
    1072:	8c 93       	st	X, r24
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	a0 e8       	ldi	r26, 0x80	; 128
    107a:	bf e3       	ldi	r27, 0x3F	; 63
    107c:	8d ab       	std	Y+53, r24	; 0x35
    107e:	9e ab       	std	Y+54, r25	; 0x36
    1080:	af ab       	std	Y+55, r26	; 0x37
    1082:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1084:	6d a9       	ldd	r22, Y+53	; 0x35
    1086:	7e a9       	ldd	r23, Y+54	; 0x36
    1088:	8f a9       	ldd	r24, Y+55	; 0x37
    108a:	98 ad       	ldd	r25, Y+56	; 0x38
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a e7       	ldi	r20, 0x7A	; 122
    1092:	53 e4       	ldi	r21, 0x43	; 67
    1094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	89 ab       	std	Y+49, r24	; 0x31
    109e:	9a ab       	std	Y+50, r25	; 0x32
    10a0:	ab ab       	std	Y+51, r26	; 0x33
    10a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10a4:	69 a9       	ldd	r22, Y+49	; 0x31
    10a6:	7a a9       	ldd	r23, Y+50	; 0x32
    10a8:	8b a9       	ldd	r24, Y+51	; 0x33
    10aa:	9c a9       	ldd	r25, Y+52	; 0x34
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	5f e3       	ldi	r21, 0x3F	; 63
    10b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b8:	88 23       	and	r24, r24
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <LCD_sendCommand+0x84>
		__ticks = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	98 ab       	std	Y+48, r25	; 0x30
    10c2:	8f a7       	std	Y+47, r24	; 0x2f
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    10c6:	69 a9       	ldd	r22, Y+49	; 0x31
    10c8:	7a a9       	ldd	r23, Y+50	; 0x32
    10ca:	8b a9       	ldd	r24, Y+51	; 0x33
    10cc:	9c a9       	ldd	r25, Y+52	; 0x34
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10da:	18 16       	cp	r1, r24
    10dc:	4c f5       	brge	.+82     	; 0x1130 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10de:	6d a9       	ldd	r22, Y+53	; 0x35
    10e0:	7e a9       	ldd	r23, Y+54	; 0x36
    10e2:	8f a9       	ldd	r24, Y+55	; 0x37
    10e4:	98 ad       	ldd	r25, Y+56	; 0x38
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	98 ab       	std	Y+48, r25	; 0x30
    1104:	8f a7       	std	Y+47, r24	; 0x2f
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <LCD_sendCommand+0xe4>
    1108:	89 e1       	ldi	r24, 0x19	; 25
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9e a7       	std	Y+46, r25	; 0x2e
    110e:	8d a7       	std	Y+45, r24	; 0x2d
    1110:	8d a5       	ldd	r24, Y+45	; 0x2d
    1112:	9e a5       	ldd	r25, Y+46	; 0x2e
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <LCD_sendCommand+0xd2>
    1118:	9e a7       	std	Y+46, r25	; 0x2e
    111a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	8f a5       	ldd	r24, Y+47	; 0x2f
    111e:	98 a9       	ldd	r25, Y+48	; 0x30
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	98 ab       	std	Y+48, r25	; 0x30
    1124:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	8f a5       	ldd	r24, Y+47	; 0x2f
    1128:	98 a9       	ldd	r25, Y+48	; 0x30
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f7       	brne	.-38     	; 0x1108 <LCD_sendCommand+0xc6>
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	69 a9       	ldd	r22, Y+49	; 0x31
    1132:	7a a9       	ldd	r23, Y+50	; 0x32
    1134:	8b a9       	ldd	r24, Y+51	; 0x33
    1136:	9c a9       	ldd	r25, Y+52	; 0x34
    1138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	98 ab       	std	Y+48, r25	; 0x30
    1142:	8f a7       	std	Y+47, r24	; 0x2f
    1144:	8f a5       	ldd	r24, Y+47	; 0x2f
    1146:	98 a9       	ldd	r25, Y+48	; 0x30
    1148:	9c a7       	std	Y+44, r25	; 0x2c
    114a:	8b a7       	std	Y+43, r24	; 0x2b
    114c:	8b a5       	ldd	r24, Y+43	; 0x2b
    114e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <LCD_sendCommand+0x10e>
    1154:	9c a7       	std	Y+44, r25	; 0x2c
    1156:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1158:	a2 e3       	ldi	r26, 0x32	; 50
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e2 e3       	ldi	r30, 0x32	; 50
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	8c 93       	st	X, r24
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	a0 e8       	ldi	r26, 0x80	; 128
    116c:	bf e3       	ldi	r27, 0x3F	; 63
    116e:	8f a3       	std	Y+39, r24	; 0x27
    1170:	98 a7       	std	Y+40, r25	; 0x28
    1172:	a9 a7       	std	Y+41, r26	; 0x29
    1174:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1176:	6f a1       	ldd	r22, Y+39	; 0x27
    1178:	78 a5       	ldd	r23, Y+40	; 0x28
    117a:	89 a5       	ldd	r24, Y+41	; 0x29
    117c:	9a a5       	ldd	r25, Y+42	; 0x2a
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	4a e7       	ldi	r20, 0x7A	; 122
    1184:	53 e4       	ldi	r21, 0x43	; 67
    1186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	8b a3       	std	Y+35, r24	; 0x23
    1190:	9c a3       	std	Y+36, r25	; 0x24
    1192:	ad a3       	std	Y+37, r26	; 0x25
    1194:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1196:	6b a1       	ldd	r22, Y+35	; 0x23
    1198:	7c a1       	ldd	r23, Y+36	; 0x24
    119a:	8d a1       	ldd	r24, Y+37	; 0x25
    119c:	9e a1       	ldd	r25, Y+38	; 0x26
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e8       	ldi	r20, 0x80	; 128
    11a4:	5f e3       	ldi	r21, 0x3F	; 63
    11a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11aa:	88 23       	and	r24, r24
    11ac:	2c f4       	brge	.+10     	; 0x11b8 <LCD_sendCommand+0x176>
		__ticks = 1;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9a a3       	std	Y+34, r25	; 0x22
    11b4:	89 a3       	std	Y+33, r24	; 0x21
    11b6:	3f c0       	rjmp	.+126    	; 0x1236 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    11b8:	6b a1       	ldd	r22, Y+35	; 0x23
    11ba:	7c a1       	ldd	r23, Y+36	; 0x24
    11bc:	8d a1       	ldd	r24, Y+37	; 0x25
    11be:	9e a1       	ldd	r25, Y+38	; 0x26
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	3f ef       	ldi	r19, 0xFF	; 255
    11c4:	4f e7       	ldi	r20, 0x7F	; 127
    11c6:	57 e4       	ldi	r21, 0x47	; 71
    11c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11cc:	18 16       	cp	r1, r24
    11ce:	4c f5       	brge	.+82     	; 0x1222 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d0:	6f a1       	ldd	r22, Y+39	; 0x27
    11d2:	78 a5       	ldd	r23, Y+40	; 0x28
    11d4:	89 a5       	ldd	r24, Y+41	; 0x29
    11d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e2       	ldi	r20, 0x20	; 32
    11de:	51 e4       	ldi	r21, 0x41	; 65
    11e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	9a a3       	std	Y+34, r25	; 0x22
    11f6:	89 a3       	std	Y+33, r24	; 0x21
    11f8:	0f c0       	rjmp	.+30     	; 0x1218 <LCD_sendCommand+0x1d6>
    11fa:	89 e1       	ldi	r24, 0x19	; 25
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	98 a3       	std	Y+32, r25	; 0x20
    1200:	8f 8f       	std	Y+31, r24	; 0x1f
    1202:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1204:	98 a1       	ldd	r25, Y+32	; 0x20
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <LCD_sendCommand+0x1c4>
    120a:	98 a3       	std	Y+32, r25	; 0x20
    120c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120e:	89 a1       	ldd	r24, Y+33	; 0x21
    1210:	9a a1       	ldd	r25, Y+34	; 0x22
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	9a a3       	std	Y+34, r25	; 0x22
    1216:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1218:	89 a1       	ldd	r24, Y+33	; 0x21
    121a:	9a a1       	ldd	r25, Y+34	; 0x22
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	69 f7       	brne	.-38     	; 0x11fa <LCD_sendCommand+0x1b8>
    1220:	14 c0       	rjmp	.+40     	; 0x124a <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1222:	6b a1       	ldd	r22, Y+35	; 0x23
    1224:	7c a1       	ldd	r23, Y+36	; 0x24
    1226:	8d a1       	ldd	r24, Y+37	; 0x25
    1228:	9e a1       	ldd	r25, Y+38	; 0x26
    122a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	9a a3       	std	Y+34, r25	; 0x22
    1234:	89 a3       	std	Y+33, r24	; 0x21
    1236:	89 a1       	ldd	r24, Y+33	; 0x21
    1238:	9a a1       	ldd	r25, Y+34	; 0x22
    123a:	9e 8f       	std	Y+30, r25	; 0x1e
    123c:	8d 8f       	std	Y+29, r24	; 0x1d
    123e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1240:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <LCD_sendCommand+0x200>
    1246:	9e 8f       	std	Y+30, r25	; 0x1e
    1248:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    124a:	e5 e3       	ldi	r30, 0x35	; 53
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	89 ad       	ldd	r24, Y+57	; 0x39
    1250:	80 83       	st	Z, r24
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a0 e8       	ldi	r26, 0x80	; 128
    1258:	bf e3       	ldi	r27, 0x3F	; 63
    125a:	89 8f       	std	Y+25, r24	; 0x19
    125c:	9a 8f       	std	Y+26, r25	; 0x1a
    125e:	ab 8f       	std	Y+27, r26	; 0x1b
    1260:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1262:	69 8d       	ldd	r22, Y+25	; 0x19
    1264:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1266:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1268:	9c 8d       	ldd	r25, Y+28	; 0x1c
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	4a e7       	ldi	r20, 0x7A	; 122
    1270:	53 e4       	ldi	r21, 0x43	; 67
    1272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	8d 8b       	std	Y+21, r24	; 0x15
    127c:	9e 8b       	std	Y+22, r25	; 0x16
    127e:	af 8b       	std	Y+23, r26	; 0x17
    1280:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1282:	6d 89       	ldd	r22, Y+21	; 0x15
    1284:	7e 89       	ldd	r23, Y+22	; 0x16
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	98 8d       	ldd	r25, Y+24	; 0x18
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1296:	88 23       	and	r24, r24
    1298:	2c f4       	brge	.+10     	; 0x12a4 <LCD_sendCommand+0x262>
		__ticks = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9c 8b       	std	Y+20, r25	; 0x14
    12a0:	8b 8b       	std	Y+19, r24	; 0x13
    12a2:	3f c0       	rjmp	.+126    	; 0x1322 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    12a4:	6d 89       	ldd	r22, Y+21	; 0x15
    12a6:	7e 89       	ldd	r23, Y+22	; 0x16
    12a8:	8f 89       	ldd	r24, Y+23	; 0x17
    12aa:	98 8d       	ldd	r25, Y+24	; 0x18
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	3f ef       	ldi	r19, 0xFF	; 255
    12b0:	4f e7       	ldi	r20, 0x7F	; 127
    12b2:	57 e4       	ldi	r21, 0x47	; 71
    12b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	4c f5       	brge	.+82     	; 0x130e <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12bc:	69 8d       	ldd	r22, Y+25	; 0x19
    12be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e2       	ldi	r20, 0x20	; 32
    12ca:	51 e4       	ldi	r21, 0x41	; 65
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	9c 8b       	std	Y+20, r25	; 0x14
    12e2:	8b 8b       	std	Y+19, r24	; 0x13
    12e4:	0f c0       	rjmp	.+30     	; 0x1304 <LCD_sendCommand+0x2c2>
    12e6:	89 e1       	ldi	r24, 0x19	; 25
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9a 8b       	std	Y+18, r25	; 0x12
    12ec:	89 8b       	std	Y+17, r24	; 0x11
    12ee:	89 89       	ldd	r24, Y+17	; 0x11
    12f0:	9a 89       	ldd	r25, Y+18	; 0x12
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCD_sendCommand+0x2b0>
    12f6:	9a 8b       	std	Y+18, r25	; 0x12
    12f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fa:	8b 89       	ldd	r24, Y+19	; 0x13
    12fc:	9c 89       	ldd	r25, Y+20	; 0x14
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	9c 8b       	std	Y+20, r25	; 0x14
    1302:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	9c 89       	ldd	r25, Y+20	; 0x14
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	69 f7       	brne	.-38     	; 0x12e6 <LCD_sendCommand+0x2a4>
    130c:	14 c0       	rjmp	.+40     	; 0x1336 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130e:	6d 89       	ldd	r22, Y+21	; 0x15
    1310:	7e 89       	ldd	r23, Y+22	; 0x16
    1312:	8f 89       	ldd	r24, Y+23	; 0x17
    1314:	98 8d       	ldd	r25, Y+24	; 0x18
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9c 8b       	std	Y+20, r25	; 0x14
    1320:	8b 8b       	std	Y+19, r24	; 0x13
    1322:	8b 89       	ldd	r24, Y+19	; 0x13
    1324:	9c 89       	ldd	r25, Y+20	; 0x14
    1326:	98 8b       	std	Y+16, r25	; 0x10
    1328:	8f 87       	std	Y+15, r24	; 0x0f
    132a:	8f 85       	ldd	r24, Y+15	; 0x0f
    132c:	98 89       	ldd	r25, Y+16	; 0x10
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <LCD_sendCommand+0x2ec>
    1332:	98 8b       	std	Y+16, r25	; 0x10
    1334:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1336:	a2 e3       	ldi	r26, 0x32	; 50
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e2 e3       	ldi	r30, 0x32	; 50
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8f 7b       	andi	r24, 0xBF	; 191
    1342:	8c 93       	st	X, r24
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	a0 e8       	ldi	r26, 0x80	; 128
    134a:	bf e3       	ldi	r27, 0x3F	; 63
    134c:	8b 87       	std	Y+11, r24	; 0x0b
    134e:	9c 87       	std	Y+12, r25	; 0x0c
    1350:	ad 87       	std	Y+13, r26	; 0x0d
    1352:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1354:	6b 85       	ldd	r22, Y+11	; 0x0b
    1356:	7c 85       	ldd	r23, Y+12	; 0x0c
    1358:	8d 85       	ldd	r24, Y+13	; 0x0d
    135a:	9e 85       	ldd	r25, Y+14	; 0x0e
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	4a e7       	ldi	r20, 0x7A	; 122
    1362:	53 e4       	ldi	r21, 0x43	; 67
    1364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	8f 83       	std	Y+7, r24	; 0x07
    136e:	98 87       	std	Y+8, r25	; 0x08
    1370:	a9 87       	std	Y+9, r26	; 0x09
    1372:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1374:	6f 81       	ldd	r22, Y+7	; 0x07
    1376:	78 85       	ldd	r23, Y+8	; 0x08
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e8       	ldi	r20, 0x80	; 128
    1382:	5f e3       	ldi	r21, 0x3F	; 63
    1384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1388:	88 23       	and	r24, r24
    138a:	2c f4       	brge	.+10     	; 0x1396 <LCD_sendCommand+0x354>
		__ticks = 1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9e 83       	std	Y+6, r25	; 0x06
    1392:	8d 83       	std	Y+5, r24	; 0x05
    1394:	3f c0       	rjmp	.+126    	; 0x1414 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1396:	6f 81       	ldd	r22, Y+7	; 0x07
    1398:	78 85       	ldd	r23, Y+8	; 0x08
    139a:	89 85       	ldd	r24, Y+9	; 0x09
    139c:	9a 85       	ldd	r25, Y+10	; 0x0a
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	3f ef       	ldi	r19, 0xFF	; 255
    13a2:	4f e7       	ldi	r20, 0x7F	; 127
    13a4:	57 e4       	ldi	r21, 0x47	; 71
    13a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13aa:	18 16       	cp	r1, r24
    13ac:	4c f5       	brge	.+82     	; 0x1400 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e2       	ldi	r20, 0x20	; 32
    13bc:	51 e4       	ldi	r21, 0x41	; 65
    13be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	9e 83       	std	Y+6, r25	; 0x06
    13d4:	8d 83       	std	Y+5, r24	; 0x05
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <LCD_sendCommand+0x3b4>
    13d8:	89 e1       	ldi	r24, 0x19	; 25
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9c 83       	std	Y+4, r25	; 0x04
    13de:	8b 83       	std	Y+3, r24	; 0x03
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <LCD_sendCommand+0x3a2>
    13e8:	9c 83       	std	Y+4, r25	; 0x04
    13ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	69 f7       	brne	.-38     	; 0x13d8 <LCD_sendCommand+0x396>
    13fe:	14 c0       	rjmp	.+40     	; 0x1428 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1400:	6f 81       	ldd	r22, Y+7	; 0x07
    1402:	78 85       	ldd	r23, Y+8	; 0x08
    1404:	89 85       	ldd	r24, Y+9	; 0x09
    1406:	9a 85       	ldd	r25, Y+10	; 0x0a
    1408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	9e 81       	ldd	r25, Y+6	; 0x06
    1418:	9a 83       	std	Y+2, r25	; 0x02
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <LCD_sendCommand+0x3de>
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1428:	e9 96       	adiw	r28, 0x39	; 57
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	e9 97       	sbiw	r28, 0x39	; 57
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1450:	a2 e3       	ldi	r26, 0x32	; 50
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e2 e3       	ldi	r30, 0x32	; 50
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 61       	ori	r24, 0x10	; 16
    145c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    145e:	a2 e3       	ldi	r26, 0x32	; 50
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e2 e3       	ldi	r30, 0x32	; 50
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8f 7d       	andi	r24, 0xDF	; 223
    146a:	8c 93       	st	X, r24
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e8       	ldi	r26, 0x80	; 128
    1472:	bf e3       	ldi	r27, 0x3F	; 63
    1474:	8d ab       	std	Y+53, r24	; 0x35
    1476:	9e ab       	std	Y+54, r25	; 0x36
    1478:	af ab       	std	Y+55, r26	; 0x37
    147a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147c:	6d a9       	ldd	r22, Y+53	; 0x35
    147e:	7e a9       	ldd	r23, Y+54	; 0x36
    1480:	8f a9       	ldd	r24, Y+55	; 0x37
    1482:	98 ad       	ldd	r25, Y+56	; 0x38
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a e7       	ldi	r20, 0x7A	; 122
    148a:	53 e4       	ldi	r21, 0x43	; 67
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	89 ab       	std	Y+49, r24	; 0x31
    1496:	9a ab       	std	Y+50, r25	; 0x32
    1498:	ab ab       	std	Y+51, r26	; 0x33
    149a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    149c:	69 a9       	ldd	r22, Y+49	; 0x31
    149e:	7a a9       	ldd	r23, Y+50	; 0x32
    14a0:	8b a9       	ldd	r24, Y+51	; 0x33
    14a2:	9c a9       	ldd	r25, Y+52	; 0x34
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e8       	ldi	r20, 0x80	; 128
    14aa:	5f e3       	ldi	r21, 0x3F	; 63
    14ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b0:	88 23       	and	r24, r24
    14b2:	2c f4       	brge	.+10     	; 0x14be <LCD_displayCharacter+0x84>
		__ticks = 1;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	98 ab       	std	Y+48, r25	; 0x30
    14ba:	8f a7       	std	Y+47, r24	; 0x2f
    14bc:	3f c0       	rjmp	.+126    	; 0x153c <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    14be:	69 a9       	ldd	r22, Y+49	; 0x31
    14c0:	7a a9       	ldd	r23, Y+50	; 0x32
    14c2:	8b a9       	ldd	r24, Y+51	; 0x33
    14c4:	9c a9       	ldd	r25, Y+52	; 0x34
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f e7       	ldi	r20, 0x7F	; 127
    14cc:	57 e4       	ldi	r21, 0x47	; 71
    14ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	4c f5       	brge	.+82     	; 0x1528 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d6:	6d a9       	ldd	r22, Y+53	; 0x35
    14d8:	7e a9       	ldd	r23, Y+54	; 0x36
    14da:	8f a9       	ldd	r24, Y+55	; 0x37
    14dc:	98 ad       	ldd	r25, Y+56	; 0x38
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e2       	ldi	r20, 0x20	; 32
    14e4:	51 e4       	ldi	r21, 0x41	; 65
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	98 ab       	std	Y+48, r25	; 0x30
    14fc:	8f a7       	std	Y+47, r24	; 0x2f
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <LCD_displayCharacter+0xe4>
    1500:	89 e1       	ldi	r24, 0x19	; 25
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9e a7       	std	Y+46, r25	; 0x2e
    1506:	8d a7       	std	Y+45, r24	; 0x2d
    1508:	8d a5       	ldd	r24, Y+45	; 0x2d
    150a:	9e a5       	ldd	r25, Y+46	; 0x2e
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <LCD_displayCharacter+0xd2>
    1510:	9e a7       	std	Y+46, r25	; 0x2e
    1512:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1514:	8f a5       	ldd	r24, Y+47	; 0x2f
    1516:	98 a9       	ldd	r25, Y+48	; 0x30
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	98 ab       	std	Y+48, r25	; 0x30
    151c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1520:	98 a9       	ldd	r25, Y+48	; 0x30
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	69 f7       	brne	.-38     	; 0x1500 <LCD_displayCharacter+0xc6>
    1526:	14 c0       	rjmp	.+40     	; 0x1550 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1528:	69 a9       	ldd	r22, Y+49	; 0x31
    152a:	7a a9       	ldd	r23, Y+50	; 0x32
    152c:	8b a9       	ldd	r24, Y+51	; 0x33
    152e:	9c a9       	ldd	r25, Y+52	; 0x34
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	98 ab       	std	Y+48, r25	; 0x30
    153a:	8f a7       	std	Y+47, r24	; 0x2f
    153c:	8f a5       	ldd	r24, Y+47	; 0x2f
    153e:	98 a9       	ldd	r25, Y+48	; 0x30
    1540:	9c a7       	std	Y+44, r25	; 0x2c
    1542:	8b a7       	std	Y+43, r24	; 0x2b
    1544:	8b a5       	ldd	r24, Y+43	; 0x2b
    1546:	9c a5       	ldd	r25, Y+44	; 0x2c
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <LCD_displayCharacter+0x10e>
    154c:	9c a7       	std	Y+44, r25	; 0x2c
    154e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1550:	a2 e3       	ldi	r26, 0x32	; 50
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e2 e3       	ldi	r30, 0x32	; 50
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 64       	ori	r24, 0x40	; 64
    155c:	8c 93       	st	X, r24
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a0 e8       	ldi	r26, 0x80	; 128
    1564:	bf e3       	ldi	r27, 0x3F	; 63
    1566:	8f a3       	std	Y+39, r24	; 0x27
    1568:	98 a7       	std	Y+40, r25	; 0x28
    156a:	a9 a7       	std	Y+41, r26	; 0x29
    156c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156e:	6f a1       	ldd	r22, Y+39	; 0x27
    1570:	78 a5       	ldd	r23, Y+40	; 0x28
    1572:	89 a5       	ldd	r24, Y+41	; 0x29
    1574:	9a a5       	ldd	r25, Y+42	; 0x2a
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a e7       	ldi	r20, 0x7A	; 122
    157c:	53 e4       	ldi	r21, 0x43	; 67
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	8b a3       	std	Y+35, r24	; 0x23
    1588:	9c a3       	std	Y+36, r25	; 0x24
    158a:	ad a3       	std	Y+37, r26	; 0x25
    158c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    158e:	6b a1       	ldd	r22, Y+35	; 0x23
    1590:	7c a1       	ldd	r23, Y+36	; 0x24
    1592:	8d a1       	ldd	r24, Y+37	; 0x25
    1594:	9e a1       	ldd	r25, Y+38	; 0x26
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e8       	ldi	r20, 0x80	; 128
    159c:	5f e3       	ldi	r21, 0x3F	; 63
    159e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a2:	88 23       	and	r24, r24
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <LCD_displayCharacter+0x176>
		__ticks = 1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	9a a3       	std	Y+34, r25	; 0x22
    15ac:	89 a3       	std	Y+33, r24	; 0x21
    15ae:	3f c0       	rjmp	.+126    	; 0x162e <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    15b0:	6b a1       	ldd	r22, Y+35	; 0x23
    15b2:	7c a1       	ldd	r23, Y+36	; 0x24
    15b4:	8d a1       	ldd	r24, Y+37	; 0x25
    15b6:	9e a1       	ldd	r25, Y+38	; 0x26
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	3f ef       	ldi	r19, 0xFF	; 255
    15bc:	4f e7       	ldi	r20, 0x7F	; 127
    15be:	57 e4       	ldi	r21, 0x47	; 71
    15c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	4c f5       	brge	.+82     	; 0x161a <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c8:	6f a1       	ldd	r22, Y+39	; 0x27
    15ca:	78 a5       	ldd	r23, Y+40	; 0x28
    15cc:	89 a5       	ldd	r24, Y+41	; 0x29
    15ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e2       	ldi	r20, 0x20	; 32
    15d6:	51 e4       	ldi	r21, 0x41	; 65
    15d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9a a3       	std	Y+34, r25	; 0x22
    15ee:	89 a3       	std	Y+33, r24	; 0x21
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <LCD_displayCharacter+0x1d6>
    15f2:	89 e1       	ldi	r24, 0x19	; 25
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	98 a3       	std	Y+32, r25	; 0x20
    15f8:	8f 8f       	std	Y+31, r24	; 0x1f
    15fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15fc:	98 a1       	ldd	r25, Y+32	; 0x20
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <LCD_displayCharacter+0x1c4>
    1602:	98 a3       	std	Y+32, r25	; 0x20
    1604:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1606:	89 a1       	ldd	r24, Y+33	; 0x21
    1608:	9a a1       	ldd	r25, Y+34	; 0x22
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	9a a3       	std	Y+34, r25	; 0x22
    160e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1610:	89 a1       	ldd	r24, Y+33	; 0x21
    1612:	9a a1       	ldd	r25, Y+34	; 0x22
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	69 f7       	brne	.-38     	; 0x15f2 <LCD_displayCharacter+0x1b8>
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161a:	6b a1       	ldd	r22, Y+35	; 0x23
    161c:	7c a1       	ldd	r23, Y+36	; 0x24
    161e:	8d a1       	ldd	r24, Y+37	; 0x25
    1620:	9e a1       	ldd	r25, Y+38	; 0x26
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9a a3       	std	Y+34, r25	; 0x22
    162c:	89 a3       	std	Y+33, r24	; 0x21
    162e:	89 a1       	ldd	r24, Y+33	; 0x21
    1630:	9a a1       	ldd	r25, Y+34	; 0x22
    1632:	9e 8f       	std	Y+30, r25	; 0x1e
    1634:	8d 8f       	std	Y+29, r24	; 0x1d
    1636:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1638:	9e 8d       	ldd	r25, Y+30	; 0x1e
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <LCD_displayCharacter+0x200>
    163e:	9e 8f       	std	Y+30, r25	; 0x1e
    1640:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1642:	e5 e3       	ldi	r30, 0x35	; 53
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	89 ad       	ldd	r24, Y+57	; 0x39
    1648:	80 83       	st	Z, r24
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e8       	ldi	r26, 0x80	; 128
    1650:	bf e3       	ldi	r27, 0x3F	; 63
    1652:	89 8f       	std	Y+25, r24	; 0x19
    1654:	9a 8f       	std	Y+26, r25	; 0x1a
    1656:	ab 8f       	std	Y+27, r26	; 0x1b
    1658:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165a:	69 8d       	ldd	r22, Y+25	; 0x19
    165c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    165e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1660:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4a e7       	ldi	r20, 0x7A	; 122
    1668:	53 e4       	ldi	r21, 0x43	; 67
    166a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	8d 8b       	std	Y+21, r24	; 0x15
    1674:	9e 8b       	std	Y+22, r25	; 0x16
    1676:	af 8b       	std	Y+23, r26	; 0x17
    1678:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    167a:	6d 89       	ldd	r22, Y+21	; 0x15
    167c:	7e 89       	ldd	r23, Y+22	; 0x16
    167e:	8f 89       	ldd	r24, Y+23	; 0x17
    1680:	98 8d       	ldd	r25, Y+24	; 0x18
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    168e:	88 23       	and	r24, r24
    1690:	2c f4       	brge	.+10     	; 0x169c <LCD_displayCharacter+0x262>
		__ticks = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9c 8b       	std	Y+20, r25	; 0x14
    1698:	8b 8b       	std	Y+19, r24	; 0x13
    169a:	3f c0       	rjmp	.+126    	; 0x171a <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    169c:	6d 89       	ldd	r22, Y+21	; 0x15
    169e:	7e 89       	ldd	r23, Y+22	; 0x16
    16a0:	8f 89       	ldd	r24, Y+23	; 0x17
    16a2:	98 8d       	ldd	r25, Y+24	; 0x18
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	4c f5       	brge	.+82     	; 0x1706 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b4:	69 8d       	ldd	r22, Y+25	; 0x19
    16b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e2       	ldi	r20, 0x20	; 32
    16c2:	51 e4       	ldi	r21, 0x41	; 65
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	9c 8b       	std	Y+20, r25	; 0x14
    16da:	8b 8b       	std	Y+19, r24	; 0x13
    16dc:	0f c0       	rjmp	.+30     	; 0x16fc <LCD_displayCharacter+0x2c2>
    16de:	89 e1       	ldi	r24, 0x19	; 25
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9a 8b       	std	Y+18, r25	; 0x12
    16e4:	89 8b       	std	Y+17, r24	; 0x11
    16e6:	89 89       	ldd	r24, Y+17	; 0x11
    16e8:	9a 89       	ldd	r25, Y+18	; 0x12
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <LCD_displayCharacter+0x2b0>
    16ee:	9a 8b       	std	Y+18, r25	; 0x12
    16f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f2:	8b 89       	ldd	r24, Y+19	; 0x13
    16f4:	9c 89       	ldd	r25, Y+20	; 0x14
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	9c 8b       	std	Y+20, r25	; 0x14
    16fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fc:	8b 89       	ldd	r24, Y+19	; 0x13
    16fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	69 f7       	brne	.-38     	; 0x16de <LCD_displayCharacter+0x2a4>
    1704:	14 c0       	rjmp	.+40     	; 0x172e <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1706:	6d 89       	ldd	r22, Y+21	; 0x15
    1708:	7e 89       	ldd	r23, Y+22	; 0x16
    170a:	8f 89       	ldd	r24, Y+23	; 0x17
    170c:	98 8d       	ldd	r25, Y+24	; 0x18
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9c 8b       	std	Y+20, r25	; 0x14
    1718:	8b 8b       	std	Y+19, r24	; 0x13
    171a:	8b 89       	ldd	r24, Y+19	; 0x13
    171c:	9c 89       	ldd	r25, Y+20	; 0x14
    171e:	98 8b       	std	Y+16, r25	; 0x10
    1720:	8f 87       	std	Y+15, r24	; 0x0f
    1722:	8f 85       	ldd	r24, Y+15	; 0x0f
    1724:	98 89       	ldd	r25, Y+16	; 0x10
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_displayCharacter+0x2ec>
    172a:	98 8b       	std	Y+16, r25	; 0x10
    172c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    172e:	a2 e3       	ldi	r26, 0x32	; 50
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e2 e3       	ldi	r30, 0x32	; 50
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8f 7b       	andi	r24, 0xBF	; 191
    173a:	8c 93       	st	X, r24
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	a0 e8       	ldi	r26, 0x80	; 128
    1742:	bf e3       	ldi	r27, 0x3F	; 63
    1744:	8b 87       	std	Y+11, r24	; 0x0b
    1746:	9c 87       	std	Y+12, r25	; 0x0c
    1748:	ad 87       	std	Y+13, r26	; 0x0d
    174a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174c:	6b 85       	ldd	r22, Y+11	; 0x0b
    174e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1750:	8d 85       	ldd	r24, Y+13	; 0x0d
    1752:	9e 85       	ldd	r25, Y+14	; 0x0e
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4a e7       	ldi	r20, 0x7A	; 122
    175a:	53 e4       	ldi	r21, 0x43	; 67
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	8f 83       	std	Y+7, r24	; 0x07
    1766:	98 87       	std	Y+8, r25	; 0x08
    1768:	a9 87       	std	Y+9, r26	; 0x09
    176a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1780:	88 23       	and	r24, r24
    1782:	2c f4       	brge	.+10     	; 0x178e <LCD_displayCharacter+0x354>
		__ticks = 1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	3f c0       	rjmp	.+126    	; 0x180c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    178e:	6f 81       	ldd	r22, Y+7	; 0x07
    1790:	78 85       	ldd	r23, Y+8	; 0x08
    1792:	89 85       	ldd	r24, Y+9	; 0x09
    1794:	9a 85       	ldd	r25, Y+10	; 0x0a
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	3f ef       	ldi	r19, 0xFF	; 255
    179a:	4f e7       	ldi	r20, 0x7F	; 127
    179c:	57 e4       	ldi	r21, 0x47	; 71
    179e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	4c f5       	brge	.+82     	; 0x17f8 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	8d 83       	std	Y+5, r24	; 0x05
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <LCD_displayCharacter+0x3b4>
    17d0:	89 e1       	ldi	r24, 0x19	; 25
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9c 83       	std	Y+4, r25	; 0x04
    17d6:	8b 83       	std	Y+3, r24	; 0x03
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <LCD_displayCharacter+0x3a2>
    17e0:	9c 83       	std	Y+4, r25	; 0x04
    17e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9e 83       	std	Y+6, r25	; 0x06
    17ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	69 f7       	brne	.-38     	; 0x17d0 <LCD_displayCharacter+0x396>
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9e 83       	std	Y+6, r25	; 0x06
    180a:	8d 83       	std	Y+5, r24	; 0x05
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	9a 83       	std	Y+2, r25	; 0x02
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <LCD_displayCharacter+0x3de>
    181c:	9a 83       	std	Y+2, r25	; 0x02
    181e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1820:	e9 96       	adiw	r28, 0x39	; 57
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	00 d0       	rcall	.+0      	; 0x1838 <LCD_displayString+0x6>
    1838:	0f 92       	push	r0
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	9b 83       	std	Y+3, r25	; 0x03
    1840:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1842:	19 82       	std	Y+1, r1	; 0x01
    1844:	0e c0       	rjmp	.+28     	; 0x1862 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	9b 81       	ldd	r25, Y+3	; 0x03
    1850:	fc 01       	movw	r30, r24
    1852:	e2 0f       	add	r30, r18
    1854:	f3 1f       	adc	r31, r19
    1856:	80 81       	ld	r24, Z
    1858:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_displayCharacter>
		i++;
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	9b 81       	ldd	r25, Y+3	; 0x03
    186c:	fc 01       	movw	r30, r24
    186e:	e2 0f       	add	r30, r18
    1870:	f3 1f       	adc	r31, r19
    1872:	80 81       	ld	r24, Z
    1874:	88 23       	and	r24, r24
    1876:	39 f7       	brne	.-50     	; 0x1846 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <LCD_goToRowColumn+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <LCD_goToRowColumn+0x8>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	8a 83       	std	Y+2, r24	; 0x02
    1894:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	3d 83       	std	Y+5, r19	; 0x05
    189e:	2c 83       	std	Y+4, r18	; 0x04
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	91 05       	cpc	r25, r1
    18a8:	c1 f0       	breq	.+48     	; 0x18da <LCD_goToRowColumn+0x56>
    18aa:	2c 81       	ldd	r18, Y+4	; 0x04
    18ac:	3d 81       	ldd	r19, Y+5	; 0x05
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	2c f4       	brge	.+10     	; 0x18be <LCD_goToRowColumn+0x3a>
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	9d 81       	ldd	r25, Y+5	; 0x05
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	61 f0       	breq	.+24     	; 0x18d4 <LCD_goToRowColumn+0x50>
    18bc:	19 c0       	rjmp	.+50     	; 0x18f0 <LCD_goToRowColumn+0x6c>
    18be:	2c 81       	ldd	r18, Y+4	; 0x04
    18c0:	3d 81       	ldd	r19, Y+5	; 0x05
    18c2:	22 30       	cpi	r18, 0x02	; 2
    18c4:	31 05       	cpc	r19, r1
    18c6:	69 f0       	breq	.+26     	; 0x18e2 <LCD_goToRowColumn+0x5e>
    18c8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ca:	9d 81       	ldd	r25, Y+5	; 0x05
    18cc:	83 30       	cpi	r24, 0x03	; 3
    18ce:	91 05       	cpc	r25, r1
    18d0:	61 f0       	breq	.+24     	; 0x18ea <LCD_goToRowColumn+0x66>
    18d2:	0e c0       	rjmp	.+28     	; 0x18f0 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	0b c0       	rjmp	.+22     	; 0x18f0 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	80 5c       	subi	r24, 0xC0	; 192
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	07 c0       	rjmp	.+14     	; 0x18f0 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	80 5f       	subi	r24, 0xF0	; 240
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	03 c0       	rjmp	.+6      	; 0x18f0 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	80 5b       	subi	r24, 0xB0	; 176
    18ee:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	80 68       	ori	r24, 0x80	; 128
    18f4:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendCommand>
}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	00 d0       	rcall	.+0      	; 0x190e <LCD_displayStringRowColumn+0x6>
    190e:	00 d0       	rcall	.+0      	; 0x1910 <LCD_displayStringRowColumn+0x8>
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	6a 83       	std	Y+2, r22	; 0x02
    1918:	5c 83       	std	Y+4, r21	; 0x04
    191a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	6a 81       	ldd	r22, Y+2	; 0x02
    1920:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	0e 94 19 0c 	call	0x1832	; 0x1832 <LCD_displayString>
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	62 97       	sbiw	r28, 0x12	; 18
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	9a 8b       	std	Y+18, r25	; 0x12
    1950:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1952:	89 89       	ldd	r24, Y+17	; 0x11
    1954:	9a 89       	ldd	r25, Y+18	; 0x12
    1956:	9e 01       	movw	r18, r28
    1958:	2f 5f       	subi	r18, 0xFF	; 255
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	b9 01       	movw	r22, r18
    195e:	4a e0       	ldi	r20, 0x0A	; 10
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <itoa>
   LCD_displayString(buff);
    1966:	ce 01       	movw	r24, r28
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	0e 94 19 0c 	call	0x1832	; 0x1832 <LCD_displayString>
}
    196e:	62 96       	adiw	r28, 0x12	; 18
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	0e 94 21 08 	call	0x1042	; 0x1042 <LCD_sendCommand>
}
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <__vector_9>:
static volatile void (*g_callBackPtr_CMP)(void) = NULL_PTR;



ISR(TIMER0_OVF_vect)
{
    1994:	1f 92       	push	r1
    1996:	0f 92       	push	r0
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	0f 92       	push	r0
    199c:	11 24       	eor	r1, r1
    199e:	2f 93       	push	r18
    19a0:	3f 93       	push	r19
    19a2:	4f 93       	push	r20
    19a4:	5f 93       	push	r21
    19a6:	6f 93       	push	r22
    19a8:	7f 93       	push	r23
    19aa:	8f 93       	push	r24
    19ac:	9f 93       	push	r25
    19ae:	af 93       	push	r26
    19b0:	bf 93       	push	r27
    19b2:	ef 93       	push	r30
    19b4:	ff 93       	push	r31
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_OVF != NULL_PTR)
    19be:	80 91 4c 01 	lds	r24, 0x014C
    19c2:	90 91 4d 01 	lds	r25, 0x014D
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	29 f0       	breq	.+10     	; 0x19d4 <__vector_9+0x40>
	{
		(*g_callBackPtr_OVF)(); /* another method to call the function using pointer to function g_callBackPtr_OVF(); */
    19ca:	e0 91 4c 01 	lds	r30, 0x014C
    19ce:	f0 91 4d 01 	lds	r31, 0x014D
    19d2:	09 95       	icall
	}
}
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	ff 91       	pop	r31
    19da:	ef 91       	pop	r30
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	7f 91       	pop	r23
    19e6:	6f 91       	pop	r22
    19e8:	5f 91       	pop	r21
    19ea:	4f 91       	pop	r20
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	0f 90       	pop	r0
    19f6:	1f 90       	pop	r1
    19f8:	18 95       	reti

000019fa <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    19fa:	1f 92       	push	r1
    19fc:	0f 92       	push	r0
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	0f 92       	push	r0
    1a02:	11 24       	eor	r1, r1
    1a04:	2f 93       	push	r18
    1a06:	3f 93       	push	r19
    1a08:	4f 93       	push	r20
    1a0a:	5f 93       	push	r21
    1a0c:	6f 93       	push	r22
    1a0e:	7f 93       	push	r23
    1a10:	8f 93       	push	r24
    1a12:	9f 93       	push	r25
    1a14:	af 93       	push	r26
    1a16:	bf 93       	push	r27
    1a18:	ef 93       	push	r30
    1a1a:	ff 93       	push	r31
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_CMP != NULL_PTR)
    1a24:	80 91 4e 01 	lds	r24, 0x014E
    1a28:	90 91 4f 01 	lds	r25, 0x014F
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	29 f0       	breq	.+10     	; 0x1a3a <__vector_19+0x40>
	{
		(*g_callBackPtr_CMP)(); /* another method to call the function using pointer to function g_callBackPtr_CMP(); */
    1a30:	e0 91 4e 01 	lds	r30, 0x014E
    1a34:	f0 91 4f 01 	lds	r31, 0x014F
    1a38:	09 95       	icall
	}
}
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	ff 91       	pop	r31
    1a40:	ef 91       	pop	r30
    1a42:	bf 91       	pop	r27
    1a44:	af 91       	pop	r26
    1a46:	9f 91       	pop	r25
    1a48:	8f 91       	pop	r24
    1a4a:	7f 91       	pop	r23
    1a4c:	6f 91       	pop	r22
    1a4e:	5f 91       	pop	r21
    1a50:	4f 91       	pop	r20
    1a52:	3f 91       	pop	r19
    1a54:	2f 91       	pop	r18
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	0f 90       	pop	r0
    1a5c:	1f 90       	pop	r1
    1a5e:	18 95       	reti

00001a60 <Timer0_init>:



void Timer0_init (const Timer0_ConfigType * ConfigPtr)
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <Timer0_init+0x6>
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	9a 83       	std	Y+2, r25	; 0x02
    1a6c:	89 83       	std	Y+1, r24	; 0x01
	if (ConfigPtr->Mode == NORMAL_MODE)
    1a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a70:	fa 81       	ldd	r31, Y+2	; 0x02
    1a72:	80 81       	ld	r24, Z
    1a74:	88 23       	and	r24, r24
    1a76:	09 f5       	brne	.+66     	; 0x1aba <Timer0_init+0x5a>
	{
		TCNT0 = ConfigPtr->InitialValue;
    1a78:	a2 e5       	ldi	r26, 0x52	; 82
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a80:	81 81       	ldd	r24, Z+1	; 0x01
    1a82:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TOIE0);                        // overflow INT Enable
    1a84:	a9 e5       	ldi	r26, 0x59	; 89
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e9 e5       	ldi	r30, 0x59	; 89
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	81 60       	ori	r24, 0x01	; 1
    1a90:	8c 93       	st	X, r24
		/* Configure the timer control register
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 */
		SET_BIT (TCCR0,FOC0);
    1a92:	a3 e5       	ldi	r26, 0x53	; 83
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e3 e5       	ldi	r30, 0x53	; 83
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	80 68       	ori	r24, 0x80	; 128
    1a9e:	8c 93       	st	X, r24
		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock);  // clock
    1aa0:	a3 e5       	ldi	r26, 0x53	; 83
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e3 e5       	ldi	r30, 0x53	; 83
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	98 2f       	mov	r25, r24
    1aac:	98 7f       	andi	r25, 0xF8	; 248
    1aae:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	89 2b       	or	r24, r25
    1ab6:	8c 93       	st	X, r24
    1ab8:	6c c0       	rjmp	.+216    	; 0x1b92 <Timer0_init+0x132>
	}


	else if (ConfigPtr->Mode == CTC_MODE)
    1aba:	e9 81       	ldd	r30, Y+1	; 0x01
    1abc:	fa 81       	ldd	r31, Y+2	; 0x02
    1abe:	80 81       	ld	r24, Z
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	71 f5       	brne	.+92     	; 0x1b20 <Timer0_init+0xc0>
	{
		TCNT0 = ConfigPtr->InitialValue;
    1ac4:	a2 e5       	ldi	r26, 0x52	; 82
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aca:	fa 81       	ldd	r31, Y+2	; 0x02
    1acc:	81 81       	ldd	r24, Z+1	; 0x01
    1ace:	8c 93       	st	X, r24
		OCR0 = ConfigPtr->CompareValue;
    1ad0:	ac e5       	ldi	r26, 0x5C	; 92
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad8:	83 81       	ldd	r24, Z+3	; 0x03
    1ada:	8c 93       	st	X, r24
		SET_BIT (TIMSK,OCIE0);  // Enable Timer0 Compare Interrupt
    1adc:	a9 e5       	ldi	r26, 0x59	; 89
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e9 e5       	ldi	r30, 0x59	; 89
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	82 60       	ori	r24, 0x02	; 2
    1ae8:	8c 93       	st	X, r24
		/* Configure timer0 control register
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 so COM00=0 & COM01=0 , "we'll do so using PWM mode"
			 */
		SET_BIT(TCCR0,FOC0);
    1aea:	a3 e5       	ldi	r26, 0x53	; 83
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e3 e5       	ldi	r30, 0x53	; 83
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	80 68       	ori	r24, 0x80	; 128
    1af6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1af8:	a3 e5       	ldi	r26, 0x53	; 83
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e3 e5       	ldi	r30, 0x53	; 83
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	88 60       	ori	r24, 0x08	; 8
    1b04:	8c 93       	st	X, r24

		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock); // clock
    1b06:	a3 e5       	ldi	r26, 0x53	; 83
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e3 e5       	ldi	r30, 0x53	; 83
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	98 2f       	mov	r25, r24
    1b12:	98 7f       	andi	r25, 0xF8	; 248
    1b14:	e9 81       	ldd	r30, Y+1	; 0x01
    1b16:	fa 81       	ldd	r31, Y+2	; 0x02
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	89 2b       	or	r24, r25
    1b1c:	8c 93       	st	X, r24
    1b1e:	39 c0       	rjmp	.+114    	; 0x1b92 <Timer0_init+0x132>
	}


	else if (ConfigPtr->Mode == PWM_MODE)
    1b20:	e9 81       	ldd	r30, Y+1	; 0x01
    1b22:	fa 81       	ldd	r31, Y+2	; 0x02
    1b24:	80 81       	ld	r24, Z
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	a1 f5       	brne	.+104    	; 0x1b92 <Timer0_init+0x132>
	{
		TCNT0 = ConfigPtr->InitialValue;
    1b2a:	a2 e5       	ldi	r26, 0x52	; 82
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b30:	fa 81       	ldd	r31, Y+2	; 0x02
    1b32:	81 81       	ldd	r24, Z+1	; 0x01
    1b34:	8c 93       	st	X, r24
		OCR0 = ConfigPtr->DutyCycle;
    1b36:	ac e5       	ldi	r26, 0x5C	; 92
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b3e:	84 81       	ldd	r24, Z+4	; 0x04
    1b40:	8c 93       	st	X, r24
		DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    1b42:	a7 e3       	ldi	r26, 0x37	; 55
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e7 e3       	ldi	r30, 0x37	; 55
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 60       	ori	r24, 0x08	; 8
    1b4e:	8c 93       	st	X, r24
		/* Configure timer control register
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 */
		SET_BIT (TCCR0,WGM00);
    1b50:	a3 e5       	ldi	r26, 0x53	; 83
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e3 e5       	ldi	r30, 0x53	; 83
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 64       	ori	r24, 0x40	; 64
    1b5c:	8c 93       	st	X, r24
		SET_BIT (TCCR0,WGM01);
    1b5e:	a3 e5       	ldi	r26, 0x53	; 83
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e3 e5       	ldi	r30, 0x53	; 83
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	88 60       	ori	r24, 0x08	; 8
    1b6a:	8c 93       	st	X, r24
		SET_BIT (TCCR0,COM01);
    1b6c:	a3 e5       	ldi	r26, 0x53	; 83
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e3 e5       	ldi	r30, 0x53	; 83
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	80 62       	ori	r24, 0x20	; 32
    1b78:	8c 93       	st	X, r24


		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock); // clock
    1b7a:	a3 e5       	ldi	r26, 0x53	; 83
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e3 e5       	ldi	r30, 0x53	; 83
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	98 2f       	mov	r25, r24
    1b86:	98 7f       	andi	r25, 0xF8	; 248
    1b88:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	89 2b       	or	r24, r25
    1b90:	8c 93       	st	X, r24
	}


}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <Timer0_OVF_setCallBack>:



void Timer0_OVF_setCallBack(void(*a_ptr)(void))
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <Timer0_OVF_setCallBack+0x6>
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_OVF = a_ptr;
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	90 93 4d 01 	sts	0x014D, r25
    1bb2:	80 93 4c 01 	sts	0x014C, r24
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <Timer0_CMP_setCallBack>:



void Timer0_CMP_setCallBack(void(*a_ptr)(void))
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <Timer0_CMP_setCallBack+0x6>
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_CMP = a_ptr;
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	90 93 4f 01 	sts	0x014F, r25
    1bd6:	80 93 4e 01 	sts	0x014E, r24
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <Timer0_DeInit>:


void Timer0_DeInit(void)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
    1bec:	e2 e5       	ldi	r30, 0x52	; 82
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	10 82       	st	Z, r1
	TCCR0=0;
    1bf2:	e3 e5       	ldi	r30, 0x53	; 83
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE0);    // Disable Overflow INT
    1bf8:	a9 e5       	ldi	r26, 0x59	; 89
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e9 e5       	ldi	r30, 0x59	; 89
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	8e 7f       	andi	r24, 0xFE	; 254
    1c04:	8c 93       	st	X, r24
	CLEAR_BIT (TIMSK,OCIE0);   // Disable Timer0 Compare Interrupt
    1c06:	a9 e5       	ldi	r26, 0x59	; 89
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e9 e5       	ldi	r30, 0x59	; 89
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	8d 7f       	andi	r24, 0xFD	; 253
    1c12:	8c 93       	st	X, r24
}
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <UART_init+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <UART_init+0x8>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	9c 83       	std	Y+4, r25	; 0x04
    1c28:	8b 83       	std	Y+3, r24	; 0x03
	uint16 BAUD_PRESCALE = (((F_CPU / (Config_Ptr->BaudRate * 8UL))) - 1);
    1c2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c2e:	81 81       	ldd	r24, Z+1	; 0x01
    1c30:	92 81       	ldd	r25, Z+2	; 0x02
    1c32:	cc 01       	movw	r24, r24
    1c34:	a0 e0       	ldi	r26, 0x00	; 0
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	aa 1f       	adc	r26, r26
    1c46:	bb 1f       	adc	r27, r27
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	aa 1f       	adc	r26, r26
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	9c 01       	movw	r18, r24
    1c52:	ad 01       	movw	r20, r26
    1c54:	80 e4       	ldi	r24, 0x40	; 64
    1c56:	92 e4       	ldi	r25, 0x42	; 66
    1c58:	af e0       	ldi	r26, 0x0F	; 15
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 1a 14 	call	0x2834	; 0x2834 <__udivmodsi4>
    1c64:	da 01       	movw	r26, r20
    1c66:	c9 01       	movw	r24, r18
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01

	/* U2X = 1 for double transmission speed */
	if(Config_Ptr->Speed_of_operation==DoubleSpeed)
    1c6e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c70:	fc 81       	ldd	r31, Y+4	; 0x04
    1c72:	86 81       	ldd	r24, Z+6	; 0x06
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	29 f4       	brne	.+10     	; 0x1c82 <UART_init+0x68>
		UCSRA = (1<<U2X);
    1c78:	eb e2       	ldi	r30, 0x2B	; 43
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	80 83       	st	Z, r24
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <UART_init+0x6e>
	else
		UCSRA=0;
    1c82:	eb e2       	ldi	r30, 0x2B	; 43
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	10 82       	st	Z, r1
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1c88:	ea e2       	ldi	r30, 0x2A	; 42
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	88 e1       	ldi	r24, 0x18	; 24
    1c8e:	80 83       	st	Z, r24

	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 ***********************************************************************/
	SET_BIT(UCSRC,URSEL);
    1c90:	a0 e4       	ldi	r26, 0x40	; 64
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e0 e4       	ldi	r30, 0x40	; 64
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 68       	ori	r24, 0x80	; 128
    1c9c:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xBF) | ((Config_Ptr->Mode_of_operation)<<6);
    1c9e:	a0 e4       	ldi	r26, 0x40	; 64
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e0 e4       	ldi	r30, 0x40	; 64
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	28 2f       	mov	r18, r24
    1caa:	2f 7b       	andi	r18, 0xBF	; 191
    1cac:	eb 81       	ldd	r30, Y+3	; 0x03
    1cae:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb0:	85 81       	ldd	r24, Z+5	; 0x05
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	00 24       	eor	r0, r0
    1cb8:	96 95       	lsr	r25
    1cba:	87 95       	ror	r24
    1cbc:	07 94       	ror	r0
    1cbe:	96 95       	lsr	r25
    1cc0:	87 95       	ror	r24
    1cc2:	07 94       	ror	r0
    1cc4:	98 2f       	mov	r25, r24
    1cc6:	80 2d       	mov	r24, r0
    1cc8:	82 2b       	or	r24, r18
    1cca:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xCF) | ((Config_Ptr->ParityType)<<4);
    1ccc:	a0 e4       	ldi	r26, 0x40	; 64
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e0 e4       	ldi	r30, 0x40	; 64
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	2f 7c       	andi	r18, 0xCF	; 207
    1cda:	eb 81       	ldd	r30, Y+3	; 0x03
    1cdc:	fc 81       	ldd	r31, Y+4	; 0x04
    1cde:	83 81       	ldd	r24, Z+3	; 0x03
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	82 95       	swap	r24
    1ce6:	92 95       	swap	r25
    1ce8:	90 7f       	andi	r25, 0xF0	; 240
    1cea:	98 27       	eor	r25, r24
    1cec:	80 7f       	andi	r24, 0xF0	; 240
    1cee:	98 27       	eor	r25, r24
    1cf0:	82 2b       	or	r24, r18
    1cf2:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xFC) | ((Config_Ptr->StopBitsNum)<<3);
    1cf4:	a0 e4       	ldi	r26, 0x40	; 64
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e0 e4       	ldi	r30, 0x40	; 64
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	28 2f       	mov	r18, r24
    1d00:	2c 7f       	andi	r18, 0xFC	; 252
    1d02:	eb 81       	ldd	r30, Y+3	; 0x03
    1d04:	fc 81       	ldd	r31, Y+4	; 0x04
    1d06:	84 81       	ldd	r24, Z+4	; 0x04
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	82 2b       	or	r24, r18
    1d1a:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xFE) | (Config_Ptr->Clock_polarity);
    1d1c:	a0 e4       	ldi	r26, 0x40	; 64
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e0 e4       	ldi	r30, 0x40	; 64
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	98 2f       	mov	r25, r24
    1d28:	9e 7f       	andi	r25, 0xFE	; 254
    1d2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2e:	87 81       	ldd	r24, Z+7	; 0x07
    1d30:	89 2b       	or	r24, r25
    1d32:	8c 93       	st	X, r24

	if (Config_Ptr->NumOfDataBits == 6)
    1d34:	eb 81       	ldd	r30, Y+3	; 0x03
    1d36:	fc 81       	ldd	r31, Y+4	; 0x04
    1d38:	80 81       	ld	r24, Z
    1d3a:	86 30       	cpi	r24, 0x06	; 6
    1d3c:	41 f4       	brne	.+16     	; 0x1d4e <UART_init+0x134>
	{
		SET_BIT(UCSRC,UCSZ0);
    1d3e:	a0 e4       	ldi	r26, 0x40	; 64
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e0 e4       	ldi	r30, 0x40	; 64
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	82 60       	ori	r24, 0x02	; 2
    1d4a:	8c 93       	st	X, r24
    1d4c:	3b c0       	rjmp	.+118    	; 0x1dc4 <UART_init+0x1aa>
	}
	else if (Config_Ptr->NumOfDataBits == 7)
    1d4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d50:	fc 81       	ldd	r31, Y+4	; 0x04
    1d52:	80 81       	ld	r24, Z
    1d54:	87 30       	cpi	r24, 0x07	; 7
    1d56:	41 f4       	brne	.+16     	; 0x1d68 <UART_init+0x14e>
	{
		SET_BIT(UCSRC,UCSZ1);
    1d58:	a0 e4       	ldi	r26, 0x40	; 64
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e0 e4       	ldi	r30, 0x40	; 64
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	84 60       	ori	r24, 0x04	; 4
    1d64:	8c 93       	st	X, r24
    1d66:	2e c0       	rjmp	.+92     	; 0x1dc4 <UART_init+0x1aa>
	}
	else if (Config_Ptr->NumOfDataBits == 8)
    1d68:	eb 81       	ldd	r30, Y+3	; 0x03
    1d6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 30       	cpi	r24, 0x08	; 8
    1d70:	79 f4       	brne	.+30     	; 0x1d90 <UART_init+0x176>
	{
		SET_BIT(UCSRC,UCSZ0);
    1d72:	a0 e4       	ldi	r26, 0x40	; 64
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e0 e4       	ldi	r30, 0x40	; 64
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	82 60       	ori	r24, 0x02	; 2
    1d7e:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1d80:	a0 e4       	ldi	r26, 0x40	; 64
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e0 e4       	ldi	r30, 0x40	; 64
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	84 60       	ori	r24, 0x04	; 4
    1d8c:	8c 93       	st	X, r24
    1d8e:	1a c0       	rjmp	.+52     	; 0x1dc4 <UART_init+0x1aa>
	}
	else if (Config_Ptr->NumOfDataBits == 9)
    1d90:	eb 81       	ldd	r30, Y+3	; 0x03
    1d92:	fc 81       	ldd	r31, Y+4	; 0x04
    1d94:	80 81       	ld	r24, Z
    1d96:	89 30       	cpi	r24, 0x09	; 9
    1d98:	a9 f4       	brne	.+42     	; 0x1dc4 <UART_init+0x1aa>
	{
		SET_BIT(UCSRB,UCSZ2);
    1d9a:	aa e2       	ldi	r26, 0x2A	; 42
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	ea e2       	ldi	r30, 0x2A	; 42
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	84 60       	ori	r24, 0x04	; 4
    1da6:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1da8:	a0 e4       	ldi	r26, 0x40	; 64
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e0 e4       	ldi	r30, 0x40	; 64
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	84 60       	ori	r24, 0x04	; 4
    1db4:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    1db6:	a0 e4       	ldi	r26, 0x40	; 64
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e0 e4       	ldi	r30, 0x40	; 64
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	82 60       	ori	r24, 0x02	; 2
    1dc2:	8c 93       	st	X, r24
	}


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    1dc4:	e0 e4       	ldi	r30, 0x40	; 64
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	9a 81       	ldd	r25, Y+2	; 0x02
    1dcc:	89 2f       	mov	r24, r25
    1dce:	99 27       	eor	r25, r25
    1dd0:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE;
    1dd2:	e9 e2       	ldi	r30, 0x29	; 41
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	80 83       	st	Z, r24
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <UART_sendByte>:

void UART_sendByte(const uint16 data,const Uart_ConfigType * Config_Ptr)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <UART_sendByte+0x6>
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <UART_sendByte+0x8>
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	9a 83       	std	Y+2, r25	; 0x02
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	7c 83       	std	Y+4, r23	; 0x04
    1dfa:	6b 83       	std	Y+3, r22	; 0x03
	if ((Config_Ptr->NumOfDataBits) == 9)
    1dfc:	eb 81       	ldd	r30, Y+3	; 0x03
    1dfe:	fc 81       	ldd	r31, Y+4	; 0x04
    1e00:	80 81       	ld	r24, Z
    1e02:	89 30       	cpi	r24, 0x09	; 9
    1e04:	e9 f4       	brne	.+58     	; 0x1e40 <UART_sendByte+0x58>
	{
		/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1e06:	eb e2       	ldi	r30, 0x2B	; 43
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	80 72       	andi	r24, 0x20	; 32
    1e12:	90 70       	andi	r25, 0x00	; 0
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	b9 f3       	breq	.-18     	; 0x1e06 <UART_sendByte+0x1e>
		/*writing the ninth bit in the transmitted data to TXB0 bit in Register UCSRB*/
		UCSRB=(UCSRB&0xFE) | ((data&0x0100)>>8) ;
    1e18:	aa e2       	ldi	r26, 0x2A	; 42
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	ea e2       	ldi	r30, 0x2A	; 42
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	28 2f       	mov	r18, r24
    1e24:	2e 7f       	andi	r18, 0xFE	; 254
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	80 70       	andi	r24, 0x00	; 0
    1e2c:	91 70       	andi	r25, 0x01	; 1
    1e2e:	89 2f       	mov	r24, r25
    1e30:	99 27       	eor	r25, r25
    1e32:	82 2b       	or	r24, r18
    1e34:	8c 93       	st	X, r24
		/*Writing the first eight bits in the transmitted data to UDR Register*/
		UDR = (data&0x00FF) ;
    1e36:	ec e2       	ldi	r30, 0x2C	; 44
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	80 83       	st	Z, r24
    1e3e:	0d c0       	rjmp	.+26     	; 0x1e5a <UART_sendByte+0x72>
	}
	else
	{
		/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1e40:	eb e2       	ldi	r30, 0x2B	; 43
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	88 2f       	mov	r24, r24
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	80 72       	andi	r24, 0x20	; 32
    1e4c:	90 70       	andi	r25, 0x00	; 0
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	b9 f3       	breq	.-18     	; 0x1e40 <UART_sendByte+0x58>
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
		UDR = data;
    1e52:	ec e2       	ldi	r30, 0x2C	; 44
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <UART_receiveByte>:

uint16 UART_receiveByte(const Uart_ConfigType * Config_Ptr)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <UART_receiveByte+0x6>
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <UART_receiveByte+0x8>
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <UART_receiveByte+0xa>
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
	uint16 RecievedData;
	if (Config_Ptr->NumOfDataBits == 9)
    1e7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e7e:	80 81       	ld	r24, Z
    1e80:	89 30       	cpi	r24, 0x09	; 9
    1e82:	29 f5       	brne	.+74     	; 0x1ece <UART_receiveByte+0x66>
	{
		/* RXC flag is set when the UART receive data so wait until this
		 * flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1e84:	eb e2       	ldi	r30, 0x2B	; 43
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 23       	and	r24, r24
    1e8c:	dc f7       	brge	.-10     	; 0x1e84 <UART_receiveByte+0x1c>

		RecievedData=((UCSRB&0x02)>>1)<<8;
    1e8e:	ea e2       	ldi	r30, 0x2A	; 42
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	82 70       	andi	r24, 0x02	; 2
    1e9a:	90 70       	andi	r25, 0x00	; 0
    1e9c:	95 95       	asr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	98 2f       	mov	r25, r24
    1ea2:	88 27       	eor	r24, r24
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	89 83       	std	Y+1, r24	; 0x01
		RecievedData=(RecievedData&0x0100) | (UDR&0x00FF) ;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	9c 01       	movw	r18, r24
    1eae:	20 70       	andi	r18, 0x00	; 0
    1eb0:	31 70       	andi	r19, 0x01	; 1
    1eb2:	ec e2       	ldi	r30, 0x2C	; 44
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	82 2b       	or	r24, r18
    1ebe:	93 2b       	or	r25, r19
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
		return RecievedData ;
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	10 c0       	rjmp	.+32     	; 0x1eee <UART_receiveByte+0x86>
	}
	else
	{
		/* RXC flag is set when the UART receive data so wait until this
		 * flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1ece:	eb e2       	ldi	r30, 0x2B	; 43
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	88 23       	and	r24, r24
    1ed6:	dc f7       	brge	.-10     	; 0x1ece <UART_receiveByte+0x66>
		/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
		RecievedData=UDR;
    1ed8:	ec e2       	ldi	r30, 0x2C	; 44
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
		return RecievedData;
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    1ef2:	26 96       	adiw	r28, 0x06	; 6
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <UART_sendString>:

void UART_sendString(const uint8 *Str , const Uart_ConfigType * Config_Ptr)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <UART_sendString+0x6>
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <UART_sendString+0x8>
    1f0c:	0f 92       	push	r0
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	9b 83       	std	Y+3, r25	; 0x03
    1f14:	8a 83       	std	Y+2, r24	; 0x02
    1f16:	7d 83       	std	Y+5, r23	; 0x05
    1f18:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    1f1a:	19 82       	std	Y+1, r1	; 0x01
    1f1c:	13 c0       	rjmp	.+38     	; 0x1f44 <UART_sendString+0x40>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i] , Config_Ptr);
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	9b 81       	ldd	r25, Y+3	; 0x03
    1f28:	fc 01       	movw	r30, r24
    1f2a:	e2 0f       	add	r30, r18
    1f2c:	f3 1f       	adc	r31, r19
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	2c 81       	ldd	r18, Y+4	; 0x04
    1f36:	3d 81       	ldd	r19, Y+5	; 0x05
    1f38:	b9 01       	movw	r22, r18
    1f3a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>
		i++;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str , const Uart_ConfigType * Config_Ptr)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e2 0f       	add	r30, r18
    1f52:	f3 1f       	adc	r31, r19
    1f54:	80 81       	ld	r24, Z
    1f56:	88 23       	and	r24, r24
    1f58:	11 f7       	brne	.-60     	; 0x1f1e <UART_sendString+0x1a>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <UART_receiveString>:

void UART_receiveString(uint8 *Str , const Uart_ConfigType * Config_Ptr)
{
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <UART_receiveString+0xa>
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <UART_receiveString+0xc>
    1f76:	0f 92       	push	r0
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
    1f80:	7d 83       	std	Y+5, r23	; 0x05
    1f82:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    1f84:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte(Config_Ptr);
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	8c 01       	movw	r16, r24
    1f92:	02 0f       	add	r16, r18
    1f94:	13 1f       	adc	r17, r19
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <UART_receiveByte>
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	80 83       	st	Z, r24
    1fa2:	11 c0       	rjmp	.+34     	; 0x1fc6 <UART_receiveString+0x5c>
	while(Str[i] != '#')
	{
		i++;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte(Config_Ptr);
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb4:	8c 01       	movw	r16, r24
    1fb6:	02 0f       	add	r16, r18
    1fb8:	13 1f       	adc	r17, r19
    1fba:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbe:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <UART_receiveByte>
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str , const Uart_ConfigType * Config_Ptr)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte(Config_Ptr);
	while(Str[i] != '#')
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	e2 0f       	add	r30, r18
    1fd4:	f3 1f       	adc	r31, r19
    1fd6:	80 81       	ld	r24, Z
    1fd8:	83 32       	cpi	r24, 0x23	; 35
    1fda:	21 f7       	brne	.-56     	; 0x1fa4 <UART_receiveString+0x3a>
	{
		i++;
		Str[i] = UART_receiveByte(Config_Ptr);
	}
	Str[i] = '\0';
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e2 0f       	add	r30, r18
    1fea:	f3 1f       	adc	r31, r19
    1fec:	10 82       	st	Z, r1
}
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	08 95       	ret

00002002 <LOCK_receiveRightPass>:

#include "used_functions.h"


void LOCK_receiveRightPass(char *a_str_PTR)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	00 d0       	rcall	.+0      	; 0x2008 <LOCK_receiveRightPass+0x6>
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	9a 83       	std	Y+2, r25	; 0x02
    200e:	89 83       	std	Y+1, r24	; 0x01
	 *                        UART_receiveString(uint8 * str) .
	 * [Returns]     : The function returns void .
	 *
	 *********************************************************************************************************************************/

	while(UART_receiveByte(&Uart_Config) != FINISHED_PASS){}
    2010:	82 e4       	ldi	r24, 0x42	; 66
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <UART_receiveByte>
    2018:	80 34       	cpi	r24, 0x40	; 64
    201a:	91 05       	cpc	r25, r1
    201c:	c9 f7       	brne	.-14     	; 0x2010 <LOCK_receiveRightPass+0xe>

	UART_sendByte(M_READY,&Uart_Config);
    201e:	22 e4       	ldi	r18, 0x42	; 66
    2020:	31 e0       	ldi	r19, 0x01	; 1
    2022:	80 e1       	ldi	r24, 0x10	; 16
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	b9 01       	movw	r22, r18
    2028:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>

	UART_receiveString((uint8 *)a_str_PTR,&Uart_Config);
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
    2030:	22 e4       	ldi	r18, 0x42	; 66
    2032:	31 e0       	ldi	r19, 0x01	; 1
    2034:	b9 01       	movw	r22, r18
    2036:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <UART_receiveString>
	LCD_clearScreen();
    203a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
}
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <LOCK_enterPass>:

uint8 LOCK_enterPass(char *a_str_PTR1 , char*a_str_PTR2 )
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	a2 97       	sbiw	r28, 0x22	; 34
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	9f 8f       	std	Y+31, r25	; 0x1f
    205e:	8e 8f       	std	Y+30, r24	; 0x1e
    2060:	79 a3       	std	Y+33, r23	; 0x21
    2062:	68 a3       	std	Y+32, r22	; 0x20
	 *                     This Arg shall indicate a pointer to character it points to the received string from EEPROM in CONTROL_ECU
	 * [Returns]     : The return shall indicate whether the password entered is right , or the user entered wrong pass for 3 times in a row
	 *
	 *
	 *********************************************************************************************************************************/
	uint8 i = 2 ;
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	8d 8f       	std	Y+29, r24	; 0x1d
	LOCK_pass(a_str_PTR1 , "Enter Your Pass");
    2068:	8e 8d       	ldd	r24, Y+30	; 0x1e
    206a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    206c:	2b ea       	ldi	r18, 0xAB	; 171
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	b9 01       	movw	r22, r18
    2072:	0e 94 c3 12 	call	0x2586	; 0x2586 <LOCK_pass>
	a_str_PTR1[5] = '\0';
    2076:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2078:	9f 8d       	ldd	r25, Y+31	; 0x1f
    207a:	fc 01       	movw	r30, r24
    207c:	35 96       	adiw	r30, 0x05	; 5
    207e:	10 82       	st	Z, r1
    2080:	1a c1       	rjmp	.+564    	; 0x22b6 <LOCK_enterPass+0x26e>
	while(strcmp(a_str_PTR1,a_str_PTR2)!=0)
	{
		if(i==0)
    2082:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2084:	88 23       	and	r24, r24
    2086:	11 f4       	brne	.+4      	; 0x208c <LOCK_enterPass+0x44>
		{
			return 0 ;
    2088:	1a a2       	std	Y+34, r1	; 0x22
    208a:	21 c1       	rjmp	.+578    	; 0x22ce <LOCK_enterPass+0x286>
		}
		LCD_clearScreen();
    208c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"WRONG PASS!");
    2090:	2b eb       	ldi	r18, 0xBB	; 187
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	a9 01       	movw	r20, r18
    209a:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a6 e9       	ldi	r26, 0x96	; 150
    20a4:	b5 e4       	ldi	r27, 0x45	; 69
    20a6:	89 8f       	std	Y+25, r24	; 0x19
    20a8:	9a 8f       	std	Y+26, r25	; 0x1a
    20aa:	ab 8f       	std	Y+27, r26	; 0x1b
    20ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ae:	69 8d       	ldd	r22, Y+25	; 0x19
    20b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	4a e7       	ldi	r20, 0x7A	; 122
    20bc:	53 e4       	ldi	r21, 0x43	; 67
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	8d 8b       	std	Y+21, r24	; 0x15
    20c8:	9e 8b       	std	Y+22, r25	; 0x16
    20ca:	af 8b       	std	Y+23, r26	; 0x17
    20cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5f e3       	ldi	r21, 0x3F	; 63
    20de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	2c f4       	brge	.+10     	; 0x20f0 <LOCK_enterPass+0xa8>
		__ticks = 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9c 8b       	std	Y+20, r25	; 0x14
    20ec:	8b 8b       	std	Y+19, r24	; 0x13
    20ee:	3f c0       	rjmp	.+126    	; 0x216e <LOCK_enterPass+0x126>
	else if (__tmp > 65535)
    20f0:	6d 89       	ldd	r22, Y+21	; 0x15
    20f2:	7e 89       	ldd	r23, Y+22	; 0x16
    20f4:	8f 89       	ldd	r24, Y+23	; 0x17
    20f6:	98 8d       	ldd	r25, Y+24	; 0x18
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	3f ef       	ldi	r19, 0xFF	; 255
    20fc:	4f e7       	ldi	r20, 0x7F	; 127
    20fe:	57 e4       	ldi	r21, 0x47	; 71
    2100:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2104:	18 16       	cp	r1, r24
    2106:	4c f5       	brge	.+82     	; 0x215a <LOCK_enterPass+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2108:	69 8d       	ldd	r22, Y+25	; 0x19
    210a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e2       	ldi	r20, 0x20	; 32
    2116:	51 e4       	ldi	r21, 0x41	; 65
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	bc 01       	movw	r22, r24
    2122:	cd 01       	movw	r24, r26
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9c 8b       	std	Y+20, r25	; 0x14
    212e:	8b 8b       	std	Y+19, r24	; 0x13
    2130:	0f c0       	rjmp	.+30     	; 0x2150 <LOCK_enterPass+0x108>
    2132:	89 e1       	ldi	r24, 0x19	; 25
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9a 8b       	std	Y+18, r25	; 0x12
    2138:	89 8b       	std	Y+17, r24	; 0x11
    213a:	89 89       	ldd	r24, Y+17	; 0x11
    213c:	9a 89       	ldd	r25, Y+18	; 0x12
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <LOCK_enterPass+0xf6>
    2142:	9a 8b       	std	Y+18, r25	; 0x12
    2144:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2146:	8b 89       	ldd	r24, Y+19	; 0x13
    2148:	9c 89       	ldd	r25, Y+20	; 0x14
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	9c 8b       	std	Y+20, r25	; 0x14
    214e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2150:	8b 89       	ldd	r24, Y+19	; 0x13
    2152:	9c 89       	ldd	r25, Y+20	; 0x14
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	69 f7       	brne	.-38     	; 0x2132 <LOCK_enterPass+0xea>
    2158:	14 c0       	rjmp	.+40     	; 0x2182 <LOCK_enterPass+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215a:	6d 89       	ldd	r22, Y+21	; 0x15
    215c:	7e 89       	ldd	r23, Y+22	; 0x16
    215e:	8f 89       	ldd	r24, Y+23	; 0x17
    2160:	98 8d       	ldd	r25, Y+24	; 0x18
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9c 8b       	std	Y+20, r25	; 0x14
    216c:	8b 8b       	std	Y+19, r24	; 0x13
    216e:	8b 89       	ldd	r24, Y+19	; 0x13
    2170:	9c 89       	ldd	r25, Y+20	; 0x14
    2172:	98 8b       	std	Y+16, r25	; 0x10
    2174:	8f 87       	std	Y+15, r24	; 0x0f
    2176:	8f 85       	ldd	r24, Y+15	; 0x0f
    2178:	98 89       	ldd	r25, Y+16	; 0x10
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <LOCK_enterPass+0x132>
    217e:	98 8b       	std	Y+16, r25	; 0x10
    2180:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(4800);
		LCD_clearScreen();
    2182:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"you have ");
    2186:	27 ec       	ldi	r18, 0xC7	; 199
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	a9 01       	movw	r20, r18
    2190:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(0,10);
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	6a e0       	ldi	r22, 0x0A	; 10
    2198:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_goToRowColumn>
		LCD_intgerToString(i);
    219c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    219e:	88 2f       	mov	r24, r24
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0e 94 9d 0c 	call	0x193a	; 0x193a <LCD_intgerToString>
		LCD_displayStringRowColumn(1,0,"more attempts");
    21a6:	21 ed       	ldi	r18, 0xD1	; 209
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	a9 01       	movw	r20, r18
    21b0:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a6 e9       	ldi	r26, 0x96	; 150
    21ba:	b5 e4       	ldi	r27, 0x45	; 69
    21bc:	8b 87       	std	Y+11, r24	; 0x0b
    21be:	9c 87       	std	Y+12, r25	; 0x0c
    21c0:	ad 87       	std	Y+13, r26	; 0x0d
    21c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	4a e7       	ldi	r20, 0x7A	; 122
    21d2:	53 e4       	ldi	r21, 0x43	; 67
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	8f 83       	std	Y+7, r24	; 0x07
    21de:	98 87       	std	Y+8, r25	; 0x08
    21e0:	a9 87       	std	Y+9, r26	; 0x09
    21e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e4:	6f 81       	ldd	r22, Y+7	; 0x07
    21e6:	78 85       	ldd	r23, Y+8	; 0x08
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e8       	ldi	r20, 0x80	; 128
    21f2:	5f e3       	ldi	r21, 0x3F	; 63
    21f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	2c f4       	brge	.+10     	; 0x2206 <LOCK_enterPass+0x1be>
		__ticks = 1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	3f c0       	rjmp	.+126    	; 0x2284 <LOCK_enterPass+0x23c>
	else if (__tmp > 65535)
    2206:	6f 81       	ldd	r22, Y+7	; 0x07
    2208:	78 85       	ldd	r23, Y+8	; 0x08
    220a:	89 85       	ldd	r24, Y+9	; 0x09
    220c:	9a 85       	ldd	r25, Y+10	; 0x0a
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	3f ef       	ldi	r19, 0xFF	; 255
    2212:	4f e7       	ldi	r20, 0x7F	; 127
    2214:	57 e4       	ldi	r21, 0x47	; 71
    2216:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221a:	18 16       	cp	r1, r24
    221c:	4c f5       	brge	.+82     	; 0x2270 <LOCK_enterPass+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2220:	7c 85       	ldd	r23, Y+12	; 0x0c
    2222:	8d 85       	ldd	r24, Y+13	; 0x0d
    2224:	9e 85       	ldd	r25, Y+14	; 0x0e
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e2       	ldi	r20, 0x20	; 32
    222c:	51 e4       	ldi	r21, 0x41	; 65
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <LOCK_enterPass+0x21e>
    2248:	89 e1       	ldi	r24, 0x19	; 25
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	8b 83       	std	Y+3, r24	; 0x03
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	9c 81       	ldd	r25, Y+4	; 0x04
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <LOCK_enterPass+0x20c>
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	69 f7       	brne	.-38     	; 0x2248 <LOCK_enterPass+0x200>
    226e:	14 c0       	rjmp	.+40     	; 0x2298 <LOCK_enterPass+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2270:	6f 81       	ldd	r22, Y+7	; 0x07
    2272:	78 85       	ldd	r23, Y+8	; 0x08
    2274:	89 85       	ldd	r24, Y+9	; 0x09
    2276:	9a 85       	ldd	r25, Y+10	; 0x0a
    2278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LOCK_enterPass+0x248>
    2294:	9a 83       	std	Y+2, r25	; 0x02
    2296:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(4800);

		LOCK_pass(a_str_PTR1, "Enter Your pass");
    2298:	8e 8d       	ldd	r24, Y+30	; 0x1e
    229a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    229c:	2f ed       	ldi	r18, 0xDF	; 223
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	b9 01       	movw	r22, r18
    22a2:	0e 94 c3 12 	call	0x2586	; 0x2586 <LOCK_pass>
		a_str_PTR1[5] = '\0';
    22a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22aa:	fc 01       	movw	r30, r24
    22ac:	35 96       	adiw	r30, 0x05	; 5
    22ae:	10 82       	st	Z, r1
		i--;
    22b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b2:	81 50       	subi	r24, 0x01	; 1
    22b4:	8d 8f       	std	Y+29, r24	; 0x1d
	 *
	 *********************************************************************************************************************************/
	uint8 i = 2 ;
	LOCK_pass(a_str_PTR1 , "Enter Your Pass");
	a_str_PTR1[5] = '\0';
	while(strcmp(a_str_PTR1,a_str_PTR2)!=0)
    22b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22ba:	28 a1       	ldd	r18, Y+32	; 0x20
    22bc:	39 a1       	ldd	r19, Y+33	; 0x21
    22be:	b9 01       	movw	r22, r18
    22c0:	0e 94 73 14 	call	0x28e6	; 0x28e6 <strcmp>
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	09 f0       	breq	.+2      	; 0x22ca <LOCK_enterPass+0x282>
    22c8:	dc ce       	rjmp	.-584    	; 0x2082 <LOCK_enterPass+0x3a>
		LOCK_pass(a_str_PTR1, "Enter Your pass");
		a_str_PTR1[5] = '\0';
		i--;
	}

	return 1 ;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	8a a3       	std	Y+34, r24	; 0x22
    22ce:	8a a1       	ldd	r24, Y+34	; 0x22

}
    22d0:	a2 96       	adiw	r28, 0x22	; 34
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <LOCK_sendNewPass>:

void LOCK_sendNewPass(char *a_str_PTR1 , char *a_str_PTR2)
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	a0 97       	sbiw	r28, 0x20	; 32
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	9e 8f       	std	Y+30, r25	; 0x1e
    22f8:	8d 8f       	std	Y+29, r24	; 0x1d
    22fa:	78 a3       	std	Y+32, r23	; 0x20
    22fc:	6f 8f       	std	Y+31, r22	; 0x1f
	 * [Returns]     : The function returns void.
	 *
	 *
	 *********************************************************************************************************************************/

	LOCK_pass(a_str_PTR1,"EnterNewPassword");
    22fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2300:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2302:	2f ee       	ldi	r18, 0xEF	; 239
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	b9 01       	movw	r22, r18
    2308:	0e 94 c3 12 	call	0x2586	; 0x2586 <LOCK_pass>
	LOCK_pass(a_str_PTR2,"Re_enterPassword");
    230c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    230e:	98 a1       	ldd	r25, Y+32	; 0x20
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	31 e0       	ldi	r19, 0x01	; 1
    2314:	b9 01       	movw	r22, r18
    2316:	0e 94 c3 12 	call	0x2586	; 0x2586 <LOCK_pass>
    231a:	04 c1       	rjmp	.+520    	; 0x2524 <LOCK_sendNewPass+0x242>


	while(strcmp(a_str_PTR1,a_str_PTR2) != 0)
	{

		LCD_clearScreen();
    231c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Unmatched");
    2320:	21 e1       	ldi	r18, 0x11	; 17
    2322:	31 e0       	ldi	r19, 0x01	; 1
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	60 e0       	ldi	r22, 0x00	; 0
    2328:	a9 01       	movw	r20, r18
    232a:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e8       	ldi	r25, 0x80	; 128
    2332:	ab e3       	ldi	r26, 0x3B	; 59
    2334:	b5 e4       	ldi	r27, 0x45	; 69
    2336:	89 8f       	std	Y+25, r24	; 0x19
    2338:	9a 8f       	std	Y+26, r25	; 0x1a
    233a:	ab 8f       	std	Y+27, r26	; 0x1b
    233c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233e:	69 8d       	ldd	r22, Y+25	; 0x19
    2340:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2344:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	4a e7       	ldi	r20, 0x7A	; 122
    234c:	53 e4       	ldi	r21, 0x43	; 67
    234e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	8d 8b       	std	Y+21, r24	; 0x15
    2358:	9e 8b       	std	Y+22, r25	; 0x16
    235a:	af 8b       	std	Y+23, r26	; 0x17
    235c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    235e:	6d 89       	ldd	r22, Y+21	; 0x15
    2360:	7e 89       	ldd	r23, Y+22	; 0x16
    2362:	8f 89       	ldd	r24, Y+23	; 0x17
    2364:	98 8d       	ldd	r25, Y+24	; 0x18
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e8       	ldi	r20, 0x80	; 128
    236c:	5f e3       	ldi	r21, 0x3F	; 63
    236e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2372:	88 23       	and	r24, r24
    2374:	2c f4       	brge	.+10     	; 0x2380 <LOCK_sendNewPass+0x9e>
		__ticks = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9c 8b       	std	Y+20, r25	; 0x14
    237c:	8b 8b       	std	Y+19, r24	; 0x13
    237e:	3f c0       	rjmp	.+126    	; 0x23fe <LOCK_sendNewPass+0x11c>
	else if (__tmp > 65535)
    2380:	6d 89       	ldd	r22, Y+21	; 0x15
    2382:	7e 89       	ldd	r23, Y+22	; 0x16
    2384:	8f 89       	ldd	r24, Y+23	; 0x17
    2386:	98 8d       	ldd	r25, Y+24	; 0x18
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2394:	18 16       	cp	r1, r24
    2396:	4c f5       	brge	.+82     	; 0x23ea <LOCK_sendNewPass+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2398:	69 8d       	ldd	r22, Y+25	; 0x19
    239a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    239c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e2       	ldi	r20, 0x20	; 32
    23a6:	51 e4       	ldi	r21, 0x41	; 65
    23a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9c 8b       	std	Y+20, r25	; 0x14
    23be:	8b 8b       	std	Y+19, r24	; 0x13
    23c0:	0f c0       	rjmp	.+30     	; 0x23e0 <LOCK_sendNewPass+0xfe>
    23c2:	89 e1       	ldi	r24, 0x19	; 25
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9a 8b       	std	Y+18, r25	; 0x12
    23c8:	89 8b       	std	Y+17, r24	; 0x11
    23ca:	89 89       	ldd	r24, Y+17	; 0x11
    23cc:	9a 89       	ldd	r25, Y+18	; 0x12
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <LOCK_sendNewPass+0xec>
    23d2:	9a 8b       	std	Y+18, r25	; 0x12
    23d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d6:	8b 89       	ldd	r24, Y+19	; 0x13
    23d8:	9c 89       	ldd	r25, Y+20	; 0x14
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	9c 8b       	std	Y+20, r25	; 0x14
    23de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	69 f7       	brne	.-38     	; 0x23c2 <LOCK_sendNewPass+0xe0>
    23e8:	14 c0       	rjmp	.+40     	; 0x2412 <LOCK_sendNewPass+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ea:	6d 89       	ldd	r22, Y+21	; 0x15
    23ec:	7e 89       	ldd	r23, Y+22	; 0x16
    23ee:	8f 89       	ldd	r24, Y+23	; 0x17
    23f0:	98 8d       	ldd	r25, Y+24	; 0x18
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9c 8b       	std	Y+20, r25	; 0x14
    23fc:	8b 8b       	std	Y+19, r24	; 0x13
    23fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2400:	9c 89       	ldd	r25, Y+20	; 0x14
    2402:	98 8b       	std	Y+16, r25	; 0x10
    2404:	8f 87       	std	Y+15, r24	; 0x0f
    2406:	8f 85       	ldd	r24, Y+15	; 0x0f
    2408:	98 89       	ldd	r25, Y+16	; 0x10
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <LOCK_sendNewPass+0x128>
    240e:	98 8b       	std	Y+16, r25	; 0x10
    2410:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		LCD_clearScreen();
    2412:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"please re_enter");
    2416:	2b e1       	ldi	r18, 0x1B	; 27
    2418:	31 e0       	ldi	r19, 0x01	; 1
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	a9 01       	movw	r20, r18
    2420:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e8       	ldi	r25, 0x80	; 128
    2428:	ab e3       	ldi	r26, 0x3B	; 59
    242a:	b5 e4       	ldi	r27, 0x45	; 69
    242c:	8b 87       	std	Y+11, r24	; 0x0b
    242e:	9c 87       	std	Y+12, r25	; 0x0c
    2430:	ad 87       	std	Y+13, r26	; 0x0d
    2432:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	6b 85       	ldd	r22, Y+11	; 0x0b
    2436:	7c 85       	ldd	r23, Y+12	; 0x0c
    2438:	8d 85       	ldd	r24, Y+13	; 0x0d
    243a:	9e 85       	ldd	r25, Y+14	; 0x0e
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a e7       	ldi	r20, 0x7A	; 122
    2442:	53 e4       	ldi	r21, 0x43	; 67
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	8f 83       	std	Y+7, r24	; 0x07
    244e:	98 87       	std	Y+8, r25	; 0x08
    2450:	a9 87       	std	Y+9, r26	; 0x09
    2452:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2454:	6f 81       	ldd	r22, Y+7	; 0x07
    2456:	78 85       	ldd	r23, Y+8	; 0x08
    2458:	89 85       	ldd	r24, Y+9	; 0x09
    245a:	9a 85       	ldd	r25, Y+10	; 0x0a
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	2c f4       	brge	.+10     	; 0x2476 <LOCK_sendNewPass+0x194>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9e 83       	std	Y+6, r25	; 0x06
    2472:	8d 83       	std	Y+5, r24	; 0x05
    2474:	3f c0       	rjmp	.+126    	; 0x24f4 <LOCK_sendNewPass+0x212>
	else if (__tmp > 65535)
    2476:	6f 81       	ldd	r22, Y+7	; 0x07
    2478:	78 85       	ldd	r23, Y+8	; 0x08
    247a:	89 85       	ldd	r24, Y+9	; 0x09
    247c:	9a 85       	ldd	r25, Y+10	; 0x0a
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	4c f5       	brge	.+82     	; 0x24e0 <LOCK_sendNewPass+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2490:	7c 85       	ldd	r23, Y+12	; 0x0c
    2492:	8d 85       	ldd	r24, Y+13	; 0x0d
    2494:	9e 85       	ldd	r25, Y+14	; 0x0e
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9e 83       	std	Y+6, r25	; 0x06
    24b4:	8d 83       	std	Y+5, r24	; 0x05
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <LOCK_sendNewPass+0x1f4>
    24b8:	89 e1       	ldi	r24, 0x19	; 25
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9c 83       	std	Y+4, r25	; 0x04
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	9c 81       	ldd	r25, Y+4	; 0x04
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LOCK_sendNewPass+0x1e2>
    24c8:	9c 83       	std	Y+4, r25	; 0x04
    24ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8d 81       	ldd	r24, Y+5	; 0x05
    24ce:	9e 81       	ldd	r25, Y+6	; 0x06
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <LOCK_sendNewPass+0x1d6>
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <LOCK_sendNewPass+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9e 83       	std	Y+6, r25	; 0x06
    24f2:	8d 83       	std	Y+5, r24	; 0x05
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	9a 83       	std	Y+2, r25	; 0x02
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <LOCK_sendNewPass+0x21e>
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		LOCK_pass(a_str_PTR1,"EnterNewPassword");
    2508:	8d 8d       	ldd	r24, Y+29	; 0x1d
    250a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    250c:	2f ee       	ldi	r18, 0xEF	; 239
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	b9 01       	movw	r22, r18
    2512:	0e 94 c3 12 	call	0x2586	; 0x2586 <LOCK_pass>
		LOCK_pass(a_str_PTR2,"Re_enterPassword");
    2516:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2518:	98 a1       	ldd	r25, Y+32	; 0x20
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	31 e0       	ldi	r19, 0x01	; 1
    251e:	b9 01       	movw	r22, r18
    2520:	0e 94 c3 12 	call	0x2586	; 0x2586 <LOCK_pass>

	LOCK_pass(a_str_PTR1,"EnterNewPassword");
	LOCK_pass(a_str_PTR2,"Re_enterPassword");


	while(strcmp(a_str_PTR1,a_str_PTR2) != 0)
    2524:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2526:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2528:	2f 8d       	ldd	r18, Y+31	; 0x1f
    252a:	38 a1       	ldd	r19, Y+32	; 0x20
    252c:	b9 01       	movw	r22, r18
    252e:	0e 94 73 14 	call	0x28e6	; 0x28e6 <strcmp>
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	09 f0       	breq	.+2      	; 0x2538 <LOCK_sendNewPass+0x256>
    2536:	f2 ce       	rjmp	.-540    	; 0x231c <LOCK_sendNewPass+0x3a>
		_delay_ms(3000);
		LOCK_pass(a_str_PTR1,"EnterNewPassword");
		LOCK_pass(a_str_PTR2,"Re_enterPassword");

	}
	LCD_clearScreen();
    2538:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"saving...");
    253c:	2b e2       	ldi	r18, 0x2B	; 43
    253e:	31 e0       	ldi	r19, 0x01	; 1
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	a9 01       	movw	r20, r18
    2546:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
	UART_sendByte(FINISHED_NEW_PASS,&Uart_Config);
    254a:	22 e4       	ldi	r18, 0x42	; 66
    254c:	31 e0       	ldi	r19, 0x01	; 1
    254e:	80 e3       	ldi	r24, 0x30	; 48
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	b9 01       	movw	r22, r18
    2554:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <UART_sendByte>
	while(UART_receiveByte(&Uart_Config) != M_READY ){}
    2558:	82 e4       	ldi	r24, 0x42	; 66
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <UART_receiveByte>
    2560:	80 31       	cpi	r24, 0x10	; 16
    2562:	91 05       	cpc	r25, r1
    2564:	c9 f7       	brne	.-14     	; 0x2558 <LOCK_sendNewPass+0x276>


	UART_sendString((uint8*)a_str_PTR1,&Uart_Config);
    2566:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2568:	9e 8d       	ldd	r25, Y+30	; 0x1e
    256a:	22 e4       	ldi	r18, 0x42	; 66
    256c:	31 e0       	ldi	r19, 0x01	; 1
    256e:	b9 01       	movw	r22, r18
    2570:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <UART_sendString>


}
    2574:	a0 96       	adiw	r28, 0x20	; 32
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <LOCK_pass>:

void LOCK_pass(char *a_str_PTR , char *a_lcdDisplayStr_PTR)
{
    2586:	0f 93       	push	r16
    2588:	1f 93       	push	r17
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	a1 97       	sbiw	r28, 0x21	; 33
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	9f 8f       	std	Y+31, r25	; 0x1f
    25a0:	8e 8f       	std	Y+30, r24	; 0x1e
    25a2:	79 a3       	std	Y+33, r23	; 0x21
    25a4:	68 a3       	std	Y+32, r22	; 0x20
	 *                     This Arg shall indicate a pointer to character it points to the reentered string from the user.
	 * [Returns]     : The function returns void.
	 *
	 *
	 *********************************************************************************************************************************/
	uint8 i = 0 ;   // counter
    25a6:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_clearScreen();
    25a8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,a_lcdDisplayStr_PTR);
    25ac:	28 a1       	ldd	r18, Y+32	; 0x20
    25ae:	39 a1       	ldd	r19, Y+33	; 0x21
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	a9 01       	movw	r20, r18
    25b6:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_displayStringRowColumn>
    25ba:	88 c0       	rjmp	.+272    	; 0x26cc <LOCK_pass+0x146>

	while(i<5)
	{
		a_str_PTR[i] = (char) KeyPad_getPressedKey();         // store value from keypad
    25bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25c6:	8c 01       	movw	r16, r24
    25c8:	02 0f       	add	r16, r18
    25ca:	13 1f       	adc	r17, r19
    25cc:	0e 94 08 07 	call	0xe10	; 0xe10 <KeyPad_getPressedKey>
    25d0:	f8 01       	movw	r30, r16
    25d2:	80 83       	st	Z, r24
		LCD_goToRowColumn(1,i);
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    25d8:	0e 94 42 0c 	call	0x1884	; 0x1884 <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    25dc:	8a e2       	ldi	r24, 0x2A	; 42
    25de:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_displayCharacter>
		i++;
    25e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e4:	8f 5f       	subi	r24, 0xFF	; 255
    25e6:	8d 8f       	std	Y+29, r24	; 0x1d
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e4       	ldi	r25, 0x40	; 64
    25ec:	ac e1       	ldi	r26, 0x1C	; 28
    25ee:	b5 e4       	ldi	r27, 0x45	; 69
    25f0:	89 8f       	std	Y+25, r24	; 0x19
    25f2:	9a 8f       	std	Y+26, r25	; 0x1a
    25f4:	ab 8f       	std	Y+27, r26	; 0x1b
    25f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f8:	69 8d       	ldd	r22, Y+25	; 0x19
    25fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4a e7       	ldi	r20, 0x7A	; 122
    2606:	53 e4       	ldi	r21, 0x43	; 67
    2608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	8d 8b       	std	Y+21, r24	; 0x15
    2612:	9e 8b       	std	Y+22, r25	; 0x16
    2614:	af 8b       	std	Y+23, r26	; 0x17
    2616:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2618:	6d 89       	ldd	r22, Y+21	; 0x15
    261a:	7e 89       	ldd	r23, Y+22	; 0x16
    261c:	8f 89       	ldd	r24, Y+23	; 0x17
    261e:	98 8d       	ldd	r25, Y+24	; 0x18
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e8       	ldi	r20, 0x80	; 128
    2626:	5f e3       	ldi	r21, 0x3F	; 63
    2628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    262c:	88 23       	and	r24, r24
    262e:	2c f4       	brge	.+10     	; 0x263a <LOCK_pass+0xb4>
		__ticks = 1;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	9c 8b       	std	Y+20, r25	; 0x14
    2636:	8b 8b       	std	Y+19, r24	; 0x13
    2638:	3f c0       	rjmp	.+126    	; 0x26b8 <LOCK_pass+0x132>
	else if (__tmp > 65535)
    263a:	6d 89       	ldd	r22, Y+21	; 0x15
    263c:	7e 89       	ldd	r23, Y+22	; 0x16
    263e:	8f 89       	ldd	r24, Y+23	; 0x17
    2640:	98 8d       	ldd	r25, Y+24	; 0x18
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	3f ef       	ldi	r19, 0xFF	; 255
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	57 e4       	ldi	r21, 0x47	; 71
    264a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	4c f5       	brge	.+82     	; 0x26a4 <LOCK_pass+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2652:	69 8d       	ldd	r22, Y+25	; 0x19
    2654:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2656:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2658:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e2       	ldi	r20, 0x20	; 32
    2660:	51 e4       	ldi	r21, 0x41	; 65
    2662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	9c 8b       	std	Y+20, r25	; 0x14
    2678:	8b 8b       	std	Y+19, r24	; 0x13
    267a:	0f c0       	rjmp	.+30     	; 0x269a <LOCK_pass+0x114>
    267c:	89 e1       	ldi	r24, 0x19	; 25
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9a 8b       	std	Y+18, r25	; 0x12
    2682:	89 8b       	std	Y+17, r24	; 0x11
    2684:	89 89       	ldd	r24, Y+17	; 0x11
    2686:	9a 89       	ldd	r25, Y+18	; 0x12
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <LOCK_pass+0x102>
    268c:	9a 8b       	std	Y+18, r25	; 0x12
    268e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2690:	8b 89       	ldd	r24, Y+19	; 0x13
    2692:	9c 89       	ldd	r25, Y+20	; 0x14
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	9c 8b       	std	Y+20, r25	; 0x14
    2698:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269a:	8b 89       	ldd	r24, Y+19	; 0x13
    269c:	9c 89       	ldd	r25, Y+20	; 0x14
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	69 f7       	brne	.-38     	; 0x267c <LOCK_pass+0xf6>
    26a2:	14 c0       	rjmp	.+40     	; 0x26cc <LOCK_pass+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a4:	6d 89       	ldd	r22, Y+21	; 0x15
    26a6:	7e 89       	ldd	r23, Y+22	; 0x16
    26a8:	8f 89       	ldd	r24, Y+23	; 0x17
    26aa:	98 8d       	ldd	r25, Y+24	; 0x18
    26ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	9c 8b       	std	Y+20, r25	; 0x14
    26b6:	8b 8b       	std	Y+19, r24	; 0x13
    26b8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ba:	9c 89       	ldd	r25, Y+20	; 0x14
    26bc:	98 8b       	std	Y+16, r25	; 0x10
    26be:	8f 87       	std	Y+15, r24	; 0x0f
    26c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c2:	98 89       	ldd	r25, Y+16	; 0x10
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LOCK_pass+0x13e>
    26c8:	98 8b       	std	Y+16, r25	; 0x10
    26ca:	8f 87       	std	Y+15, r24	; 0x0f
	 *********************************************************************************************************************************/
	uint8 i = 0 ;   // counter
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,a_lcdDisplayStr_PTR);

	while(i<5)
    26cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ce:	85 30       	cpi	r24, 0x05	; 5
    26d0:	08 f4       	brcc	.+2      	; 0x26d4 <LOCK_pass+0x14e>
    26d2:	74 cf       	rjmp	.-280    	; 0x25bc <LOCK_pass+0x36>
		LCD_goToRowColumn(1,i);
		LCD_displayCharacter('*');
		i++;
		_delay_ms(2500);
	}
	a_str_PTR[i]='#';
    26d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d6:	28 2f       	mov	r18, r24
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26de:	fc 01       	movw	r30, r24
    26e0:	e2 0f       	add	r30, r18
    26e2:	f3 1f       	adc	r31, r19
    26e4:	83 e2       	ldi	r24, 0x23	; 35
    26e6:	80 83       	st	Z, r24
	a_str_PTR[i+1]='\0';
    26e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	9c 01       	movw	r18, r24
    26f0:	2f 5f       	subi	r18, 0xFF	; 255
    26f2:	3f 4f       	sbci	r19, 0xFF	; 255
    26f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26f8:	fc 01       	movw	r30, r24
    26fa:	e2 0f       	add	r30, r18
    26fc:	f3 1f       	adc	r31, r19
    26fe:	10 82       	st	Z, r1
	while(KeyPad_getPressedKey() != 13){}           //wait until user press enter
    2700:	0e 94 08 07 	call	0xe10	; 0xe10 <KeyPad_getPressedKey>
    2704:	8d 30       	cpi	r24, 0x0D	; 13
    2706:	e1 f7       	brne	.-8      	; 0x2700 <LOCK_pass+0x17a>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e4       	ldi	r25, 0x40	; 64
    270c:	ac e1       	ldi	r26, 0x1C	; 28
    270e:	b5 e4       	ldi	r27, 0x45	; 69
    2710:	8b 87       	std	Y+11, r24	; 0x0b
    2712:	9c 87       	std	Y+12, r25	; 0x0c
    2714:	ad 87       	std	Y+13, r26	; 0x0d
    2716:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2718:	6b 85       	ldd	r22, Y+11	; 0x0b
    271a:	7c 85       	ldd	r23, Y+12	; 0x0c
    271c:	8d 85       	ldd	r24, Y+13	; 0x0d
    271e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4a e7       	ldi	r20, 0x7A	; 122
    2726:	53 e4       	ldi	r21, 0x43	; 67
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	8f 83       	std	Y+7, r24	; 0x07
    2732:	98 87       	std	Y+8, r25	; 0x08
    2734:	a9 87       	std	Y+9, r26	; 0x09
    2736:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2738:	6f 81       	ldd	r22, Y+7	; 0x07
    273a:	78 85       	ldd	r23, Y+8	; 0x08
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e8       	ldi	r20, 0x80	; 128
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274c:	88 23       	and	r24, r24
    274e:	2c f4       	brge	.+10     	; 0x275a <LOCK_pass+0x1d4>
		__ticks = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	3f c0       	rjmp	.+126    	; 0x27d8 <LOCK_pass+0x252>
	else if (__tmp > 65535)
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	4c f5       	brge	.+82     	; 0x27c4 <LOCK_pass+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	51 e4       	ldi	r21, 0x41	; 65
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9e 83       	std	Y+6, r25	; 0x06
    2798:	8d 83       	std	Y+5, r24	; 0x05
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <LOCK_pass+0x234>
    279c:	89 e1       	ldi	r24, 0x19	; 25
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9c 83       	std	Y+4, r25	; 0x04
    27a2:	8b 83       	std	Y+3, r24	; 0x03
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	9c 81       	ldd	r25, Y+4	; 0x04
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <LOCK_pass+0x222>
    27ac:	9c 83       	std	Y+4, r25	; 0x04
    27ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05
    27b2:	9e 81       	ldd	r25, Y+6	; 0x06
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	69 f7       	brne	.-38     	; 0x279c <LOCK_pass+0x216>
    27c2:	14 c0       	rjmp	.+40     	; 0x27ec <LOCK_pass+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c4:	6f 81       	ldd	r22, Y+7	; 0x07
    27c6:	78 85       	ldd	r23, Y+8	; 0x08
    27c8:	89 85       	ldd	r24, Y+9	; 0x09
    27ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <LOCK_pass+0x25e>
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2500);
}
    27ec:	a1 96       	adiw	r28, 0x21	; 33
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	1f 91       	pop	r17
    27fe:	0f 91       	pop	r16
    2800:	08 95       	ret

00002802 <LOCK_timerCount>:
void LOCK_timerCount(uint8 a_time)
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	0f 92       	push	r0
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * [Returns]     : The function returns void.
	 *
	 *
	 *********************************************************************************************************************************/
	Timer0_init (&Timer0_Config);
    280e:	8d e3       	ldi	r24, 0x3D	; 61
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <Timer0_init>
	while(g_timer != a_time){}
    2816:	90 91 4a 01 	lds	r25, 0x014A
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	98 17       	cp	r25, r24
    281e:	d9 f7       	brne	.-10     	; 0x2816 <LOCK_timerCount+0x14>
	Timer0_DeInit();
    2820:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Timer0_DeInit>
	g_sec = 0;
    2824:	10 92 4b 01 	sts	0x014B, r1
	g_timer = 0 ;
    2828:	10 92 4a 01 	sts	0x014A, r1
}
    282c:	0f 90       	pop	r0
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <__udivmodsi4>:
    2834:	a1 e2       	ldi	r26, 0x21	; 33
    2836:	1a 2e       	mov	r1, r26
    2838:	aa 1b       	sub	r26, r26
    283a:	bb 1b       	sub	r27, r27
    283c:	fd 01       	movw	r30, r26
    283e:	0d c0       	rjmp	.+26     	; 0x285a <__udivmodsi4_ep>

00002840 <__udivmodsi4_loop>:
    2840:	aa 1f       	adc	r26, r26
    2842:	bb 1f       	adc	r27, r27
    2844:	ee 1f       	adc	r30, r30
    2846:	ff 1f       	adc	r31, r31
    2848:	a2 17       	cp	r26, r18
    284a:	b3 07       	cpc	r27, r19
    284c:	e4 07       	cpc	r30, r20
    284e:	f5 07       	cpc	r31, r21
    2850:	20 f0       	brcs	.+8      	; 0x285a <__udivmodsi4_ep>
    2852:	a2 1b       	sub	r26, r18
    2854:	b3 0b       	sbc	r27, r19
    2856:	e4 0b       	sbc	r30, r20
    2858:	f5 0b       	sbc	r31, r21

0000285a <__udivmodsi4_ep>:
    285a:	66 1f       	adc	r22, r22
    285c:	77 1f       	adc	r23, r23
    285e:	88 1f       	adc	r24, r24
    2860:	99 1f       	adc	r25, r25
    2862:	1a 94       	dec	r1
    2864:	69 f7       	brne	.-38     	; 0x2840 <__udivmodsi4_loop>
    2866:	60 95       	com	r22
    2868:	70 95       	com	r23
    286a:	80 95       	com	r24
    286c:	90 95       	com	r25
    286e:	9b 01       	movw	r18, r22
    2870:	ac 01       	movw	r20, r24
    2872:	bd 01       	movw	r22, r26
    2874:	cf 01       	movw	r24, r30
    2876:	08 95       	ret

00002878 <__prologue_saves__>:
    2878:	2f 92       	push	r2
    287a:	3f 92       	push	r3
    287c:	4f 92       	push	r4
    287e:	5f 92       	push	r5
    2880:	6f 92       	push	r6
    2882:	7f 92       	push	r7
    2884:	8f 92       	push	r8
    2886:	9f 92       	push	r9
    2888:	af 92       	push	r10
    288a:	bf 92       	push	r11
    288c:	cf 92       	push	r12
    288e:	df 92       	push	r13
    2890:	ef 92       	push	r14
    2892:	ff 92       	push	r15
    2894:	0f 93       	push	r16
    2896:	1f 93       	push	r17
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	ca 1b       	sub	r28, r26
    28a2:	db 0b       	sbc	r29, r27
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	cd bf       	out	0x3d, r28	; 61
    28ae:	09 94       	ijmp

000028b0 <__epilogue_restores__>:
    28b0:	2a 88       	ldd	r2, Y+18	; 0x12
    28b2:	39 88       	ldd	r3, Y+17	; 0x11
    28b4:	48 88       	ldd	r4, Y+16	; 0x10
    28b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    28b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    28ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    28bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    28be:	9b 84       	ldd	r9, Y+11	; 0x0b
    28c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    28c2:	b9 84       	ldd	r11, Y+9	; 0x09
    28c4:	c8 84       	ldd	r12, Y+8	; 0x08
    28c6:	df 80       	ldd	r13, Y+7	; 0x07
    28c8:	ee 80       	ldd	r14, Y+6	; 0x06
    28ca:	fd 80       	ldd	r15, Y+5	; 0x05
    28cc:	0c 81       	ldd	r16, Y+4	; 0x04
    28ce:	1b 81       	ldd	r17, Y+3	; 0x03
    28d0:	aa 81       	ldd	r26, Y+2	; 0x02
    28d2:	b9 81       	ldd	r27, Y+1	; 0x01
    28d4:	ce 0f       	add	r28, r30
    28d6:	d1 1d       	adc	r29, r1
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	ed 01       	movw	r28, r26
    28e4:	08 95       	ret

000028e6 <strcmp>:
    28e6:	fb 01       	movw	r30, r22
    28e8:	dc 01       	movw	r26, r24
    28ea:	8d 91       	ld	r24, X+
    28ec:	01 90       	ld	r0, Z+
    28ee:	80 19       	sub	r24, r0
    28f0:	01 10       	cpse	r0, r1
    28f2:	d9 f3       	breq	.-10     	; 0x28ea <strcmp+0x4>
    28f4:	99 0b       	sbc	r25, r25
    28f6:	08 95       	ret

000028f8 <itoa>:
    28f8:	fb 01       	movw	r30, r22
    28fa:	9f 01       	movw	r18, r30
    28fc:	e8 94       	clt
    28fe:	42 30       	cpi	r20, 0x02	; 2
    2900:	c4 f0       	brlt	.+48     	; 0x2932 <itoa+0x3a>
    2902:	45 32       	cpi	r20, 0x25	; 37
    2904:	b4 f4       	brge	.+44     	; 0x2932 <itoa+0x3a>
    2906:	4a 30       	cpi	r20, 0x0A	; 10
    2908:	29 f4       	brne	.+10     	; 0x2914 <itoa+0x1c>
    290a:	97 fb       	bst	r25, 7
    290c:	1e f4       	brtc	.+6      	; 0x2914 <itoa+0x1c>
    290e:	90 95       	com	r25
    2910:	81 95       	neg	r24
    2912:	9f 4f       	sbci	r25, 0xFF	; 255
    2914:	64 2f       	mov	r22, r20
    2916:	77 27       	eor	r23, r23
    2918:	0e 94 ad 14 	call	0x295a	; 0x295a <__udivmodhi4>
    291c:	80 5d       	subi	r24, 0xD0	; 208
    291e:	8a 33       	cpi	r24, 0x3A	; 58
    2920:	0c f0       	brlt	.+2      	; 0x2924 <itoa+0x2c>
    2922:	89 5d       	subi	r24, 0xD9	; 217
    2924:	81 93       	st	Z+, r24
    2926:	cb 01       	movw	r24, r22
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	a1 f7       	brne	.-24     	; 0x2914 <itoa+0x1c>
    292c:	16 f4       	brtc	.+4      	; 0x2932 <itoa+0x3a>
    292e:	5d e2       	ldi	r21, 0x2D	; 45
    2930:	51 93       	st	Z+, r21
    2932:	10 82       	st	Z, r1
    2934:	c9 01       	movw	r24, r18
    2936:	0c 94 9d 14 	jmp	0x293a	; 0x293a <strrev>

0000293a <strrev>:
    293a:	dc 01       	movw	r26, r24
    293c:	fc 01       	movw	r30, r24
    293e:	67 2f       	mov	r22, r23
    2940:	71 91       	ld	r23, Z+
    2942:	77 23       	and	r23, r23
    2944:	e1 f7       	brne	.-8      	; 0x293e <strrev+0x4>
    2946:	32 97       	sbiw	r30, 0x02	; 2
    2948:	04 c0       	rjmp	.+8      	; 0x2952 <strrev+0x18>
    294a:	7c 91       	ld	r23, X
    294c:	6d 93       	st	X+, r22
    294e:	70 83       	st	Z, r23
    2950:	62 91       	ld	r22, -Z
    2952:	ae 17       	cp	r26, r30
    2954:	bf 07       	cpc	r27, r31
    2956:	c8 f3       	brcs	.-14     	; 0x294a <strrev+0x10>
    2958:	08 95       	ret

0000295a <__udivmodhi4>:
    295a:	aa 1b       	sub	r26, r26
    295c:	bb 1b       	sub	r27, r27
    295e:	51 e1       	ldi	r21, 0x11	; 17
    2960:	07 c0       	rjmp	.+14     	; 0x2970 <__udivmodhi4_ep>

00002962 <__udivmodhi4_loop>:
    2962:	aa 1f       	adc	r26, r26
    2964:	bb 1f       	adc	r27, r27
    2966:	a6 17       	cp	r26, r22
    2968:	b7 07       	cpc	r27, r23
    296a:	10 f0       	brcs	.+4      	; 0x2970 <__udivmodhi4_ep>
    296c:	a6 1b       	sub	r26, r22
    296e:	b7 0b       	sbc	r27, r23

00002970 <__udivmodhi4_ep>:
    2970:	88 1f       	adc	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	5a 95       	dec	r21
    2976:	a9 f7       	brne	.-22     	; 0x2962 <__udivmodhi4_loop>
    2978:	80 95       	com	r24
    297a:	90 95       	com	r25
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	08 95       	ret

00002982 <_exit>:
    2982:	f8 94       	cli

00002984 <__stop_program>:
    2984:	ff cf       	rjmp	.-2      	; 0x2984 <__stop_program>
