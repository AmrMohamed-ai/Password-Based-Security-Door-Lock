
Door_Lock_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000024c4  00002558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  00002570  2**0
                  ALLOC
  3 .stab         00002904  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013cb  00000000  00000000  00004e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000623f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000637f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000064ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009023  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a98b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 05 	call	0xb74	; 0xb74 <main>
      8a:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER_counter>:
Timer0_ConfigType Timer0_Config = {NORMAL_MODE,0,F_CPU_1024};
/* this structure declaration is for the UART module configuration */
Uart_ConfigType Uart_Config = {8,9600,Disabled,ONE_STOP_BIT,ASynchronous,DoubleSpeed};

void TIMER_counter(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	 *                 Through a pointer to function in the function Timer0_OVF_setCallBack.
	 * [Args]        : The function takes no arguments .
	 * [Returns]     : The function returns void .
	 *
	 *********************************************************************************************************************************/
	g_sec++;
     b4e:	80 91 79 00 	lds	r24, 0x0079
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 79 00 	sts	0x0079, r24
	if(g_sec == 30)
     b58:	80 91 79 00 	lds	r24, 0x0079
     b5c:	8e 31       	cpi	r24, 0x1E	; 30
     b5e:	39 f4       	brne	.+14     	; 0xb6e <TIMER_counter+0x28>
	{
		g_timer++;
     b60:	80 91 78 00 	lds	r24, 0x0078
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 78 00 	sts	0x0078, r24
		g_sec = 0;
     b6a:	10 92 79 00 	sts	0x0079, r1
	}
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <main>:


int main (void)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	6d 97       	sbiw	r28, 0x1d	; 29
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
	/* This array of characters stores the recieved new password from HMI_ECU */
	char passStr3[7] ;
	/* This array of characters stores the password saved in EEPROM and is sent to HMI_ECU */
	char passStr4[7];
	/* configure pin 4 in PORTD as output pin */
	SET_BIT(DDRD,PD4);
     b88:	a1 e3       	ldi	r26, 0x31	; 49
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e1 e3       	ldi	r30, 0x31	; 49
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	80 61       	ori	r24, 0x10	; 16
     b94:	8c 93       	st	X, r24
	/* set Global interrupt flag */
	SREG  |= ( 1<<7 ) ;
     b96:	af e5       	ldi	r26, 0x5F	; 95
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ef e5       	ldi	r30, 0x5F	; 95
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	80 68       	ori	r24, 0x80	; 128
     ba2:	8c 93       	st	X, r24
	/* This function is responsible for initialization of the UART module for AVR MCP */
	UART_init(&Uart_Config);
     ba4:	8d e6       	ldi	r24, 0x6D	; 109
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <UART_init>
	/* This function is responsible for passing the TIMER_counter function to the TIMER module ISR */
	Timer0_OVF_setCallBack(TIMER_counter);
     bac:	83 ea       	ldi	r24, 0xA3	; 163
     bae:	95 e0       	ldi	r25, 0x05	; 5
     bb0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <Timer0_OVF_setCallBack>
	/* This function is responsible for initialization of the MOTOR for AVR MCP */
	MOTOR_init();
     bb4:	0e 94 97 06 	call	0xd2e	; 0xd2e <MOTOR_init>
	/* This function is responsible for initialization of the External EEPROM */
	EEPROM_init();
     bb8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <EEPROM_init>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e2       	ldi	r26, 0x20	; 32
     bc2:	b1 e4       	ldi	r27, 0x41	; 65
     bc4:	8b 87       	std	Y+11, r24	; 0x0b
     bc6:	9c 87       	std	Y+12, r25	; 0x0c
     bc8:	ad 87       	std	Y+13, r26	; 0x0d
     bca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bce:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	4a e7       	ldi	r20, 0x7A	; 122
     bda:	53 e4       	ldi	r21, 0x43	; 67
     bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	8f 83       	std	Y+7, r24	; 0x07
     be6:	98 87       	std	Y+8, r25	; 0x08
     be8:	a9 87       	std	Y+9, r26	; 0x09
     bea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bec:	6f 81       	ldd	r22, Y+7	; 0x07
     bee:	78 85       	ldd	r23, Y+8	; 0x08
     bf0:	89 85       	ldd	r24, Y+9	; 0x09
     bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e8       	ldi	r20, 0x80	; 128
     bfa:	5f e3       	ldi	r21, 0x3F	; 63
     bfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c00:	88 23       	and	r24, r24
     c02:	2c f4       	brge	.+10     	; 0xc0e <main+0x9a>
		__ticks = 1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	3f c0       	rjmp	.+126    	; 0xc8c <main+0x118>
	else if (__tmp > 65535)
     c0e:	6f 81       	ldd	r22, Y+7	; 0x07
     c10:	78 85       	ldd	r23, Y+8	; 0x08
     c12:	89 85       	ldd	r24, Y+9	; 0x09
     c14:	9a 85       	ldd	r25, Y+10	; 0x0a
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	3f ef       	ldi	r19, 0xFF	; 255
     c1a:	4f e7       	ldi	r20, 0x7F	; 127
     c1c:	57 e4       	ldi	r21, 0x47	; 71
     c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c22:	18 16       	cp	r1, r24
     c24:	4c f5       	brge	.+82     	; 0xc78 <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c26:	6b 85       	ldd	r22, Y+11	; 0x0b
     c28:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e2       	ldi	r20, 0x20	; 32
     c34:	51 e4       	ldi	r21, 0x41	; 65
     c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	9e 83       	std	Y+6, r25	; 0x06
     c4c:	8d 83       	std	Y+5, r24	; 0x05
     c4e:	0f c0       	rjmp	.+30     	; 0xc6e <main+0xfa>
     c50:	89 e1       	ldi	r24, 0x19	; 25
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <main+0xe8>
     c60:	9c 83       	std	Y+4, r25	; 0x04
     c62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	9e 81       	ldd	r25, Y+6	; 0x06
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	9e 83       	std	Y+6, r25	; 0x06
     c6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	9e 81       	ldd	r25, Y+6	; 0x06
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	69 f7       	brne	.-38     	; 0xc50 <main+0xdc>
     c76:	14 c0       	rjmp	.+40     	; 0xca0 <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c78:	6f 81       	ldd	r22, Y+7	; 0x07
     c7a:	78 85       	ldd	r23, Y+8	; 0x08
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	9e 83       	std	Y+6, r25	; 0x06
     c8a:	8d 83       	std	Y+5, r24	; 0x05
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	9e 81       	ldd	r25, Y+6	; 0x06
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <main+0x124>
     c9c:	9a 83       	std	Y+2, r25	; 0x02
     c9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	/* This function is responsible for receiving Newpassword entered by the user in HMI_ECU. (described in used_functions2.c) */
	LOCK_receiveAndSaveNewPass(passStr3);
     ca0:	ce 01       	movw	r24, r28
     ca2:	40 96       	adiw	r24, 0x10	; 16
     ca4:	0e 94 20 10 	call	0x2040	; 0x2040 <LOCK_receiveAndSaveNewPass>
	/* This function is responsible for sending the password saved in the EEPROM to HMI_ECU. (described in used_functions2.c) */
	LOCK_sendRightPass(passStr4);
     ca8:	ce 01       	movw	r24, r28
     caa:	47 96       	adiw	r24, 0x17	; 23
     cac:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <LOCK_sendRightPass>

	while(1)
	{

		/* This while loop waits for HMI_ECU to send the option that CONTROL_ECU will make */
		while(UART_receiveByte(&Uart_Config)!=OPTION){}
     cb0:	8d e6       	ldi	r24, 0x6D	; 109
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <UART_receiveByte>
     cb8:	80 35       	cpi	r24, 0x50	; 80
     cba:	91 05       	cpc	r25, r1
     cbc:	c9 f7       	brne	.-14     	; 0xcb0 <main+0x13c>
		option = UART_receiveByte(&Uart_Config);
     cbe:	8d e6       	ldi	r24, 0x6D	; 109
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <UART_receiveByte>
     cc6:	8f 87       	std	Y+15, r24	; 0x0f
		/* If option is equal to NEW_PASS the program will save a new password in the EEPROM , if option is
		 * equal to BUZZER the CONTROL_ECU will activate the buzzer , else the CONTROL_ECU will open the door then close it */
		if( option == NEW_PASS )
     cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cca:	80 36       	cpi	r24, 0x60	; 96
     ccc:	49 f4       	brne	.+18     	; 0xce0 <main+0x16c>
		{
			LOCK_receiveAndSaveNewPass(passStr3);
     cce:	ce 01       	movw	r24, r28
     cd0:	40 96       	adiw	r24, 0x10	; 16
     cd2:	0e 94 20 10 	call	0x2040	; 0x2040 <LOCK_receiveAndSaveNewPass>

			LOCK_sendRightPass(passStr4);
     cd6:	ce 01       	movw	r24, r28
     cd8:	47 96       	adiw	r24, 0x17	; 23
     cda:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <LOCK_sendRightPass>
     cde:	e8 cf       	rjmp	.-48     	; 0xcb0 <main+0x13c>

		}
		else if( option == BUZZER)
     ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce2:	80 37       	cpi	r24, 0x70	; 112
     ce4:	91 f4       	brne	.+36     	; 0xd0a <main+0x196>
		{
			SET_BIT(PORTD,PD4);       // BUZZER ON
     ce6:	a2 e3       	ldi	r26, 0x32	; 50
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e2 e3       	ldi	r30, 0x32	; 50
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 61       	ori	r24, 0x10	; 16
     cf2:	8c 93       	st	X, r24
			/* This function is responsible for counting 60 seconds (BUZZER_TIME) using TIMER Module (described in used_functions2.c)*/
			LOCK_timerCount(BUZZER_TIME);
     cf4:	8c e3       	ldi	r24, 0x3C	; 60
     cf6:	0e 94 a9 11 	call	0x2352	; 0x2352 <LOCK_timerCount>
			CLEAR_BIT(PORTD,PD4);    // BUZZER OFF
     cfa:	a2 e3       	ldi	r26, 0x32	; 50
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e2 e3       	ldi	r30, 0x32	; 50
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7e       	andi	r24, 0xEF	; 239
     d06:	8c 93       	st	X, r24
     d08:	d3 cf       	rjmp	.-90     	; 0xcb0 <main+0x13c>
		}
		else
		{

			MOTOR_forward();   // MOTOR CLOCKWISE
     d0a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <MOTOR_forward>
			/* This function is responsible for counting 15 seconds ( opening time ) using TIMER Module (described in used_functions2.c)*/
			LOCK_timerCount(OPEN_CLOSE_TIME);
     d0e:	8f e0       	ldi	r24, 0x0F	; 15
     d10:	0e 94 a9 11 	call	0x2352	; 0x2352 <LOCK_timerCount>



			MOTOR_stop();     // MOTOR STOP
     d14:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <MOTOR_stop>
			/* This function is responsible for counting 3 seconds ( hold time ) using TIMER Module (described in used_functions.c)*/
			LOCK_timerCount(HOLD_TIME);
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	0e 94 a9 11 	call	0x2352	; 0x2352 <LOCK_timerCount>


			MOTOR_reverse();  // MOTOR ANTICLOCKWISE
     d1e:	0e 94 ba 06 	call	0xd74	; 0xd74 <MOTOR_reverse>
			/* This function is responsible for counting 15 seconds ( closing time ) using TIMER Module (described in used_functions.c)*/
			LOCK_timerCount(OPEN_CLOSE_TIME);
     d22:	8f e0       	ldi	r24, 0x0F	; 15
     d24:	0e 94 a9 11 	call	0x2352	; 0x2352 <LOCK_timerCount>
			MOTOR_stop();
     d28:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <MOTOR_stop>
     d2c:	c1 cf       	rjmp	.-126    	; 0xcb0 <main+0x13c>

00000d2e <MOTOR_init>:
 */

#include "DC_Motor.h"

void MOTOR_init( void )
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
	MOTOR_CTRL_DIR |= (1<<IN1) | (1<<IN2) |(1<<EN1);
     d36:	a7 e3       	ldi	r26, 0x37	; 55
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e3       	ldi	r30, 0x37	; 55
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8c 61       	ori	r24, 0x1C	; 28
     d42:	8c 93       	st	X, r24

}
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <MOTOR_forward>:

void MOTOR_forward( void )
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	MOTOR_PORT |= (1<<IN1)  |(1<<EN1);
     d52:	a8 e3       	ldi	r26, 0x38	; 56
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e8 e3       	ldi	r30, 0x38	; 56
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	84 61       	ori	r24, 0x14	; 20
     d5e:	8c 93       	st	X, r24
	MOTOR_PORT &= ~(1<<IN2);
     d60:	a8 e3       	ldi	r26, 0x38	; 56
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e8 e3       	ldi	r30, 0x38	; 56
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	87 7f       	andi	r24, 0xF7	; 247
     d6c:	8c 93       	st	X, r24

}
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <MOTOR_reverse>:

/* Toggle Motor Input pins to reverse its motion */
void MOTOR_reverse( void )
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
	MOTOR_PORT ^= (1<<IN1);
     d7c:	a8 e3       	ldi	r26, 0x38	; 56
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e8 e3       	ldi	r30, 0x38	; 56
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	90 81       	ld	r25, Z
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	89 27       	eor	r24, r25
     d8a:	8c 93       	st	X, r24
	MOTOR_PORT ^= (1<<IN2);
     d8c:	a8 e3       	ldi	r26, 0x38	; 56
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e8 e3       	ldi	r30, 0x38	; 56
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	90 81       	ld	r25, Z
     d96:	88 e0       	ldi	r24, 0x08	; 8
     d98:	89 27       	eor	r24, r25
     d9a:	8c 93       	st	X, r24
	MOTOR_PORT |= (1<<EN1);
     d9c:	a8 e3       	ldi	r26, 0x38	; 56
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e3       	ldi	r30, 0x38	; 56
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 61       	ori	r24, 0x10	; 16
     da8:	8c 93       	st	X, r24
}
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <MOTOR_stop>:

void MOTOR_stop(void)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	MOTOR_PORT &= ~(1<<EN1);
     db8:	a8 e3       	ldi	r26, 0x38	; 56
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e3       	ldi	r30, 0x38	; 56
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 7e       	andi	r24, 0xEF	; 239
     dc4:	8c 93       	st	X, r24
}
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"
Twi_ConfigType TWI_Config ={FAST};
void EEPROM_init(void)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(&TWI_Config);
     dd4:	85 e7       	ldi	r24, 0x75	; 117
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 92 07 	call	0xf24	; 0xf24 <TWI_init>
}
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <EEPROM_writeByte+0x6>
     de8:	00 d0       	rcall	.+0      	; 0xdea <EEPROM_writeByte+0x8>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     df4:	0e 94 be 07 	call	0xf7c	; 0xf7c <TWI_start>
    if (TWI_getStatus() != TW_START)
     df8:	0e 94 16 08 	call	0x102c	; 0x102c <TWI_getStatus>
     dfc:	88 30       	cpi	r24, 0x08	; 8
     dfe:	11 f0       	breq	.+4      	; 0xe04 <EEPROM_writeByte+0x22>
        return ERROR;
     e00:	1c 82       	std	Y+4, r1	; 0x04
     e02:	28 c0       	rjmp	.+80     	; 0xe54 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	80 70       	andi	r24, 0x00	; 0
     e0a:	97 70       	andi	r25, 0x07	; 7
     e0c:	88 0f       	add	r24, r24
     e0e:	89 2f       	mov	r24, r25
     e10:	88 1f       	adc	r24, r24
     e12:	99 0b       	sbc	r25, r25
     e14:	91 95       	neg	r25
     e16:	80 6a       	ori	r24, 0xA0	; 160
     e18:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     e1c:	0e 94 16 08 	call	0x102c	; 0x102c <TWI_getStatus>
     e20:	88 31       	cpi	r24, 0x18	; 24
     e22:	11 f0       	breq	.+4      	; 0xe28 <EEPROM_writeByte+0x46>
        return ERROR; 
     e24:	1c 82       	std	Y+4, r1	; 0x04
     e26:	16 c0       	rjmp	.+44     	; 0xe54 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     e2e:	0e 94 16 08 	call	0x102c	; 0x102c <TWI_getStatus>
     e32:	88 32       	cpi	r24, 0x28	; 40
     e34:	11 f0       	breq	.+4      	; 0xe3a <EEPROM_writeByte+0x58>
        return ERROR;
     e36:	1c 82       	std	Y+4, r1	; 0x04
     e38:	0d c0       	rjmp	.+26     	; 0xe54 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     e40:	0e 94 16 08 	call	0x102c	; 0x102c <TWI_getStatus>
     e44:	88 32       	cpi	r24, 0x28	; 40
     e46:	11 f0       	breq	.+4      	; 0xe4c <EEPROM_writeByte+0x6a>
        return ERROR;
     e48:	1c 82       	std	Y+4, r1	; 0x04
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     e4c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <TWI_stop>
	
    return SUCCESS;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	8c 83       	std	Y+4, r24	; 0x04
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <EEPROM_readByte+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <EEPROM_readByte+0x8>
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	7c 83       	std	Y+4, r23	; 0x04
     e78:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     e7a:	0e 94 be 07 	call	0xf7c	; 0xf7c <TWI_start>
    if (TWI_getStatus() != TW_START)
     e7e:	0e 94 16 08 	call	0x102c	; 0x102c <TWI_getStatus>
     e82:	88 30       	cpi	r24, 0x08	; 8
     e84:	11 f0       	breq	.+4      	; 0xe8a <EEPROM_readByte+0x26>
        return ERROR;
     e86:	1d 82       	std	Y+5, r1	; 0x05
     e88:	44 c0       	rjmp	.+136    	; 0xf12 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	80 70       	andi	r24, 0x00	; 0
     e90:	97 70       	andi	r25, 0x07	; 7
     e92:	88 0f       	add	r24, r24
     e94:	89 2f       	mov	r24, r25
     e96:	88 1f       	adc	r24, r24
     e98:	99 0b       	sbc	r25, r25
     e9a:	91 95       	neg	r25
     e9c:	80 6a       	ori	r24, 0xA0	; 160
     e9e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     ea2:	0e 94 16 08 	call	0x102c	; 0x102c <TWI_getStatus>
     ea6:	88 31       	cpi	r24, 0x18	; 24
     ea8:	11 f0       	breq	.+4      	; 0xeae <EEPROM_readByte+0x4a>
        return ERROR;
     eaa:	1d 82       	std	Y+5, r1	; 0x05
     eac:	32 c0       	rjmp	.+100    	; 0xf12 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     eb4:	0e 94 16 08 	call	0x102c	; 0x102c <TWI_getStatus>
     eb8:	88 32       	cpi	r24, 0x28	; 40
     eba:	11 f0       	breq	.+4      	; 0xec0 <EEPROM_readByte+0x5c>
        return ERROR;
     ebc:	1d 82       	std	Y+5, r1	; 0x05
     ebe:	29 c0       	rjmp	.+82     	; 0xf12 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     ec0:	0e 94 be 07 	call	0xf7c	; 0xf7c <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     ec4:	0e 94 16 08 	call	0x102c	; 0x102c <TWI_getStatus>
     ec8:	80 31       	cpi	r24, 0x10	; 16
     eca:	11 f0       	breq	.+4      	; 0xed0 <EEPROM_readByte+0x6c>
        return ERROR;
     ecc:	1d 82       	std	Y+5, r1	; 0x05
     ece:	21 c0       	rjmp	.+66     	; 0xf12 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	9a 81       	ldd	r25, Y+2	; 0x02
     ed4:	80 70       	andi	r24, 0x00	; 0
     ed6:	97 70       	andi	r25, 0x07	; 7
     ed8:	88 0f       	add	r24, r24
     eda:	89 2f       	mov	r24, r25
     edc:	88 1f       	adc	r24, r24
     ede:	99 0b       	sbc	r25, r25
     ee0:	91 95       	neg	r25
     ee2:	81 6a       	ori	r24, 0xA1	; 161
     ee4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     ee8:	0e 94 16 08 	call	0x102c	; 0x102c <TWI_getStatus>
     eec:	80 34       	cpi	r24, 0x40	; 64
     eee:	11 f0       	breq	.+4      	; 0xef4 <EEPROM_readByte+0x90>
        return ERROR;
     ef0:	1d 82       	std	Y+5, r1	; 0x05
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     ef4:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_readWithNACK>
     ef8:	eb 81       	ldd	r30, Y+3	; 0x03
     efa:	fc 81       	ldd	r31, Y+4	; 0x04
     efc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     efe:	0e 94 16 08 	call	0x102c	; 0x102c <TWI_getStatus>
     f02:	88 35       	cpi	r24, 0x58	; 88
     f04:	11 f0       	breq	.+4      	; 0xf0a <EEPROM_readByte+0xa6>
        return ERROR;
     f06:	1d 82       	std	Y+5, r1	; 0x05
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     f0a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <TWI_stop>
    return SUCCESS;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	8d 83       	std	Y+5, r24	; 0x05
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(const Twi_ConfigType * Config_Ptr)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <TWI_init+0x6>
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01
    /*zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWSR = 0x00;
     f32:	e1 e2       	ldi	r30, 0x21	; 33
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	10 82       	st	Z, r1

	// Speed
	if (Config_Ptr->speed == NORMAL)
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	29 f4       	brne	.+10     	; 0xf4c <TWI_init+0x28>
	{
		TWBR = 0x20;  // 32 decimal with TWPS = 0
     f42:	e0 e2       	ldi	r30, 0x20	; 32
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 e2       	ldi	r24, 0x20	; 32
     f48:	80 83       	st	Z, r24
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <TWI_init+0x3a>
	}
	else if (Config_Ptr->speed == FAST)
     f4c:	e9 81       	ldd	r30, Y+1	; 0x01
     f4e:	fa 81       	ldd	r31, Y+2	; 0x02
     f50:	80 81       	ld	r24, Z
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	21 f4       	brne	.+8      	; 0xf5e <TWI_init+0x3a>
	{
		TWBR = 0x02;  // 2 decimal with TWPS = 0
     f56:	e0 e2       	ldi	r30, 0x20	; 32
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	80 83       	st	Z, r24
	}


    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->MyAddress;   // my address if i'm slave
     f5e:	a2 e2       	ldi	r26, 0x22	; 34
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e9 81       	ldd	r30, Y+1	; 0x01
     f64:	fa 81       	ldd	r31, Y+2	; 0x02
     f66:	81 81       	ldd	r24, Z+1	; 0x01
     f68:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI Module */
     f6a:	e6 e5       	ldi	r30, 0x56	; 86
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	80 83       	st	Z, r24
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <TWI_start>:

void TWI_start(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     f84:	e6 e5       	ldi	r30, 0x56	; 86
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	84 ea       	ldi	r24, 0xA4	; 164
     f8a:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     f8c:	e6 e5       	ldi	r30, 0x56	; 86
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	88 23       	and	r24, r24
     f94:	dc f7       	brge	.-10     	; 0xf8c <TWI_start+0x10>
}
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <TWI_stop>:

void TWI_stop(void)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     fa4:	e6 e5       	ldi	r30, 0x56	; 86
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	84 e9       	ldi	r24, 0x94	; 148
     faa:	80 83       	st	Z, r24
}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <TWI_write>:

void TWI_write(uint8 data)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	0f 92       	push	r0
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     fbe:	e3 e2       	ldi	r30, 0x23	; 35
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     fc6:	e6 e5       	ldi	r30, 0x56	; 86
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	84 e8       	ldi	r24, 0x84	; 132
     fcc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     fce:	e6 e5       	ldi	r30, 0x56	; 86
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	88 23       	and	r24, r24
     fd6:	dc f7       	brge	.-10     	; 0xfce <TWI_write+0x1c>
}
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     fe8:	e6 e5       	ldi	r30, 0x56	; 86
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	84 ec       	ldi	r24, 0xC4	; 196
     fee:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     ff0:	e6 e5       	ldi	r30, 0x56	; 86
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	88 23       	and	r24, r24
     ff8:	dc f7       	brge	.-10     	; 0xff0 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
     ffa:	e3 e2       	ldi	r30, 0x23	; 35
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
}
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    100e:	e6 e5       	ldi	r30, 0x56	; 86
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	84 e8       	ldi	r24, 0x84	; 132
    1014:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1016:	e6 e5       	ldi	r30, 0x56	; 86
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	88 23       	and	r24, r24
    101e:	dc f7       	brge	.-10     	; 0x1016 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1020:	e3 e2       	ldi	r30, 0x23	; 35
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	0f 92       	push	r0
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1036:	e1 e2       	ldi	r30, 0x21	; 33
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	88 7f       	andi	r24, 0xF8	; 248
    103e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1040:	89 81       	ldd	r24, Y+1	; 0x01
}
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1052:	ea e3       	ldi	r30, 0x3A	; 58
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    105a:	a1 e3       	ldi	r26, 0x31	; 49
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e1 e3       	ldi	r30, 0x31	; 49
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 67       	ori	r24, 0x70	; 112
    1066:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1068:	88 e3       	ldi	r24, 0x38	; 56
    106a:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    106e:	8c e0       	ldi	r24, 0x0C	; 12
    1070:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_sendCommand>
}
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	e9 97       	sbiw	r28, 0x39	; 57
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1096:	a2 e3       	ldi	r26, 0x32	; 50
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e2 e3       	ldi	r30, 0x32	; 50
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8f 7e       	andi	r24, 0xEF	; 239
    10a2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    10a4:	a2 e3       	ldi	r26, 0x32	; 50
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e2 e3       	ldi	r30, 0x32	; 50
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	8f 7d       	andi	r24, 0xDF	; 223
    10b0:	8c 93       	st	X, r24
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a0 e8       	ldi	r26, 0x80	; 128
    10b8:	bf e3       	ldi	r27, 0x3F	; 63
    10ba:	8d ab       	std	Y+53, r24	; 0x35
    10bc:	9e ab       	std	Y+54, r25	; 0x36
    10be:	af ab       	std	Y+55, r26	; 0x37
    10c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c2:	6d a9       	ldd	r22, Y+53	; 0x35
    10c4:	7e a9       	ldd	r23, Y+54	; 0x36
    10c6:	8f a9       	ldd	r24, Y+55	; 0x37
    10c8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	4a e7       	ldi	r20, 0x7A	; 122
    10d0:	53 e4       	ldi	r21, 0x43	; 67
    10d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	89 ab       	std	Y+49, r24	; 0x31
    10dc:	9a ab       	std	Y+50, r25	; 0x32
    10de:	ab ab       	std	Y+51, r26	; 0x33
    10e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10e2:	69 a9       	ldd	r22, Y+49	; 0x31
    10e4:	7a a9       	ldd	r23, Y+50	; 0x32
    10e6:	8b a9       	ldd	r24, Y+51	; 0x33
    10e8:	9c a9       	ldd	r25, Y+52	; 0x34
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e8       	ldi	r20, 0x80	; 128
    10f0:	5f e3       	ldi	r21, 0x3F	; 63
    10f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10f6:	88 23       	and	r24, r24
    10f8:	2c f4       	brge	.+10     	; 0x1104 <LCD_sendCommand+0x84>
		__ticks = 1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	98 ab       	std	Y+48, r25	; 0x30
    1100:	8f a7       	std	Y+47, r24	; 0x2f
    1102:	3f c0       	rjmp	.+126    	; 0x1182 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1104:	69 a9       	ldd	r22, Y+49	; 0x31
    1106:	7a a9       	ldd	r23, Y+50	; 0x32
    1108:	8b a9       	ldd	r24, Y+51	; 0x33
    110a:	9c a9       	ldd	r25, Y+52	; 0x34
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	3f ef       	ldi	r19, 0xFF	; 255
    1110:	4f e7       	ldi	r20, 0x7F	; 127
    1112:	57 e4       	ldi	r21, 0x47	; 71
    1114:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1118:	18 16       	cp	r1, r24
    111a:	4c f5       	brge	.+82     	; 0x116e <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111c:	6d a9       	ldd	r22, Y+53	; 0x35
    111e:	7e a9       	ldd	r23, Y+54	; 0x36
    1120:	8f a9       	ldd	r24, Y+55	; 0x37
    1122:	98 ad       	ldd	r25, Y+56	; 0x38
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e2       	ldi	r20, 0x20	; 32
    112a:	51 e4       	ldi	r21, 0x41	; 65
    112c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	98 ab       	std	Y+48, r25	; 0x30
    1142:	8f a7       	std	Y+47, r24	; 0x2f
    1144:	0f c0       	rjmp	.+30     	; 0x1164 <LCD_sendCommand+0xe4>
    1146:	89 e1       	ldi	r24, 0x19	; 25
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9e a7       	std	Y+46, r25	; 0x2e
    114c:	8d a7       	std	Y+45, r24	; 0x2d
    114e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1150:	9e a5       	ldd	r25, Y+46	; 0x2e
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <LCD_sendCommand+0xd2>
    1156:	9e a7       	std	Y+46, r25	; 0x2e
    1158:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115a:	8f a5       	ldd	r24, Y+47	; 0x2f
    115c:	98 a9       	ldd	r25, Y+48	; 0x30
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	98 ab       	std	Y+48, r25	; 0x30
    1162:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1164:	8f a5       	ldd	r24, Y+47	; 0x2f
    1166:	98 a9       	ldd	r25, Y+48	; 0x30
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	69 f7       	brne	.-38     	; 0x1146 <LCD_sendCommand+0xc6>
    116c:	14 c0       	rjmp	.+40     	; 0x1196 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116e:	69 a9       	ldd	r22, Y+49	; 0x31
    1170:	7a a9       	ldd	r23, Y+50	; 0x32
    1172:	8b a9       	ldd	r24, Y+51	; 0x33
    1174:	9c a9       	ldd	r25, Y+52	; 0x34
    1176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	98 ab       	std	Y+48, r25	; 0x30
    1180:	8f a7       	std	Y+47, r24	; 0x2f
    1182:	8f a5       	ldd	r24, Y+47	; 0x2f
    1184:	98 a9       	ldd	r25, Y+48	; 0x30
    1186:	9c a7       	std	Y+44, r25	; 0x2c
    1188:	8b a7       	std	Y+43, r24	; 0x2b
    118a:	8b a5       	ldd	r24, Y+43	; 0x2b
    118c:	9c a5       	ldd	r25, Y+44	; 0x2c
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <LCD_sendCommand+0x10e>
    1192:	9c a7       	std	Y+44, r25	; 0x2c
    1194:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1196:	a2 e3       	ldi	r26, 0x32	; 50
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e2 e3       	ldi	r30, 0x32	; 50
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	80 64       	ori	r24, 0x40	; 64
    11a2:	8c 93       	st	X, r24
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a0 e8       	ldi	r26, 0x80	; 128
    11aa:	bf e3       	ldi	r27, 0x3F	; 63
    11ac:	8f a3       	std	Y+39, r24	; 0x27
    11ae:	98 a7       	std	Y+40, r25	; 0x28
    11b0:	a9 a7       	std	Y+41, r26	; 0x29
    11b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b4:	6f a1       	ldd	r22, Y+39	; 0x27
    11b6:	78 a5       	ldd	r23, Y+40	; 0x28
    11b8:	89 a5       	ldd	r24, Y+41	; 0x29
    11ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	4a e7       	ldi	r20, 0x7A	; 122
    11c2:	53 e4       	ldi	r21, 0x43	; 67
    11c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	8b a3       	std	Y+35, r24	; 0x23
    11ce:	9c a3       	std	Y+36, r25	; 0x24
    11d0:	ad a3       	std	Y+37, r26	; 0x25
    11d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11d4:	6b a1       	ldd	r22, Y+35	; 0x23
    11d6:	7c a1       	ldd	r23, Y+36	; 0x24
    11d8:	8d a1       	ldd	r24, Y+37	; 0x25
    11da:	9e a1       	ldd	r25, Y+38	; 0x26
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e8       	ldi	r20, 0x80	; 128
    11e2:	5f e3       	ldi	r21, 0x3F	; 63
    11e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e8:	88 23       	and	r24, r24
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <LCD_sendCommand+0x176>
		__ticks = 1;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9a a3       	std	Y+34, r25	; 0x22
    11f2:	89 a3       	std	Y+33, r24	; 0x21
    11f4:	3f c0       	rjmp	.+126    	; 0x1274 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    11f6:	6b a1       	ldd	r22, Y+35	; 0x23
    11f8:	7c a1       	ldd	r23, Y+36	; 0x24
    11fa:	8d a1       	ldd	r24, Y+37	; 0x25
    11fc:	9e a1       	ldd	r25, Y+38	; 0x26
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	3f ef       	ldi	r19, 0xFF	; 255
    1202:	4f e7       	ldi	r20, 0x7F	; 127
    1204:	57 e4       	ldi	r21, 0x47	; 71
    1206:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120a:	18 16       	cp	r1, r24
    120c:	4c f5       	brge	.+82     	; 0x1260 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120e:	6f a1       	ldd	r22, Y+39	; 0x27
    1210:	78 a5       	ldd	r23, Y+40	; 0x28
    1212:	89 a5       	ldd	r24, Y+41	; 0x29
    1214:	9a a5       	ldd	r25, Y+42	; 0x2a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	51 e4       	ldi	r21, 0x41	; 65
    121e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	bc 01       	movw	r22, r24
    1228:	cd 01       	movw	r24, r26
    122a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	9a a3       	std	Y+34, r25	; 0x22
    1234:	89 a3       	std	Y+33, r24	; 0x21
    1236:	0f c0       	rjmp	.+30     	; 0x1256 <LCD_sendCommand+0x1d6>
    1238:	89 e1       	ldi	r24, 0x19	; 25
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	98 a3       	std	Y+32, r25	; 0x20
    123e:	8f 8f       	std	Y+31, r24	; 0x1f
    1240:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1242:	98 a1       	ldd	r25, Y+32	; 0x20
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <LCD_sendCommand+0x1c4>
    1248:	98 a3       	std	Y+32, r25	; 0x20
    124a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124c:	89 a1       	ldd	r24, Y+33	; 0x21
    124e:	9a a1       	ldd	r25, Y+34	; 0x22
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	9a a3       	std	Y+34, r25	; 0x22
    1254:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1256:	89 a1       	ldd	r24, Y+33	; 0x21
    1258:	9a a1       	ldd	r25, Y+34	; 0x22
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	69 f7       	brne	.-38     	; 0x1238 <LCD_sendCommand+0x1b8>
    125e:	14 c0       	rjmp	.+40     	; 0x1288 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1260:	6b a1       	ldd	r22, Y+35	; 0x23
    1262:	7c a1       	ldd	r23, Y+36	; 0x24
    1264:	8d a1       	ldd	r24, Y+37	; 0x25
    1266:	9e a1       	ldd	r25, Y+38	; 0x26
    1268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	9a a3       	std	Y+34, r25	; 0x22
    1272:	89 a3       	std	Y+33, r24	; 0x21
    1274:	89 a1       	ldd	r24, Y+33	; 0x21
    1276:	9a a1       	ldd	r25, Y+34	; 0x22
    1278:	9e 8f       	std	Y+30, r25	; 0x1e
    127a:	8d 8f       	std	Y+29, r24	; 0x1d
    127c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    127e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <LCD_sendCommand+0x200>
    1284:	9e 8f       	std	Y+30, r25	; 0x1e
    1286:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1288:	eb e3       	ldi	r30, 0x3B	; 59
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	89 ad       	ldd	r24, Y+57	; 0x39
    128e:	80 83       	st	Z, r24
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a0 e8       	ldi	r26, 0x80	; 128
    1296:	bf e3       	ldi	r27, 0x3F	; 63
    1298:	89 8f       	std	Y+25, r24	; 0x19
    129a:	9a 8f       	std	Y+26, r25	; 0x1a
    129c:	ab 8f       	std	Y+27, r26	; 0x1b
    129e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a0:	69 8d       	ldd	r22, Y+25	; 0x19
    12a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	4a e7       	ldi	r20, 0x7A	; 122
    12ae:	53 e4       	ldi	r21, 0x43	; 67
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8d 8b       	std	Y+21, r24	; 0x15
    12ba:	9e 8b       	std	Y+22, r25	; 0x16
    12bc:	af 8b       	std	Y+23, r26	; 0x17
    12be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12c0:	6d 89       	ldd	r22, Y+21	; 0x15
    12c2:	7e 89       	ldd	r23, Y+22	; 0x16
    12c4:	8f 89       	ldd	r24, Y+23	; 0x17
    12c6:	98 8d       	ldd	r25, Y+24	; 0x18
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <LCD_sendCommand+0x262>
		__ticks = 1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	8b 8b       	std	Y+19, r24	; 0x13
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    12e2:	6d 89       	ldd	r22, Y+21	; 0x15
    12e4:	7e 89       	ldd	r23, Y+22	; 0x16
    12e6:	8f 89       	ldd	r24, Y+23	; 0x17
    12e8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	57 e4       	ldi	r21, 0x47	; 71
    12f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	4c f5       	brge	.+82     	; 0x134c <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	69 8d       	ldd	r22, Y+25	; 0x19
    12fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9c 8b       	std	Y+20, r25	; 0x14
    1320:	8b 8b       	std	Y+19, r24	; 0x13
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <LCD_sendCommand+0x2c2>
    1324:	89 e1       	ldi	r24, 0x19	; 25
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9a 8b       	std	Y+18, r25	; 0x12
    132a:	89 8b       	std	Y+17, r24	; 0x11
    132c:	89 89       	ldd	r24, Y+17	; 0x11
    132e:	9a 89       	ldd	r25, Y+18	; 0x12
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <LCD_sendCommand+0x2b0>
    1334:	9a 8b       	std	Y+18, r25	; 0x12
    1336:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1338:	8b 89       	ldd	r24, Y+19	; 0x13
    133a:	9c 89       	ldd	r25, Y+20	; 0x14
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9c 8b       	std	Y+20, r25	; 0x14
    1340:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	8b 89       	ldd	r24, Y+19	; 0x13
    1344:	9c 89       	ldd	r25, Y+20	; 0x14
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f7       	brne	.-38     	; 0x1324 <LCD_sendCommand+0x2a4>
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134c:	6d 89       	ldd	r22, Y+21	; 0x15
    134e:	7e 89       	ldd	r23, Y+22	; 0x16
    1350:	8f 89       	ldd	r24, Y+23	; 0x17
    1352:	98 8d       	ldd	r25, Y+24	; 0x18
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9c 8b       	std	Y+20, r25	; 0x14
    135e:	8b 8b       	std	Y+19, r24	; 0x13
    1360:	8b 89       	ldd	r24, Y+19	; 0x13
    1362:	9c 89       	ldd	r25, Y+20	; 0x14
    1364:	98 8b       	std	Y+16, r25	; 0x10
    1366:	8f 87       	std	Y+15, r24	; 0x0f
    1368:	8f 85       	ldd	r24, Y+15	; 0x0f
    136a:	98 89       	ldd	r25, Y+16	; 0x10
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <LCD_sendCommand+0x2ec>
    1370:	98 8b       	std	Y+16, r25	; 0x10
    1372:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1374:	a2 e3       	ldi	r26, 0x32	; 50
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e2 e3       	ldi	r30, 0x32	; 50
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	8f 7b       	andi	r24, 0xBF	; 191
    1380:	8c 93       	st	X, r24
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a0 e8       	ldi	r26, 0x80	; 128
    1388:	bf e3       	ldi	r27, 0x3F	; 63
    138a:	8b 87       	std	Y+11, r24	; 0x0b
    138c:	9c 87       	std	Y+12, r25	; 0x0c
    138e:	ad 87       	std	Y+13, r26	; 0x0d
    1390:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1392:	6b 85       	ldd	r22, Y+11	; 0x0b
    1394:	7c 85       	ldd	r23, Y+12	; 0x0c
    1396:	8d 85       	ldd	r24, Y+13	; 0x0d
    1398:	9e 85       	ldd	r25, Y+14	; 0x0e
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	4a e7       	ldi	r20, 0x7A	; 122
    13a0:	53 e4       	ldi	r21, 0x43	; 67
    13a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	8f 83       	std	Y+7, r24	; 0x07
    13ac:	98 87       	std	Y+8, r25	; 0x08
    13ae:	a9 87       	std	Y+9, r26	; 0x09
    13b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13b2:	6f 81       	ldd	r22, Y+7	; 0x07
    13b4:	78 85       	ldd	r23, Y+8	; 0x08
    13b6:	89 85       	ldd	r24, Y+9	; 0x09
    13b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e8       	ldi	r20, 0x80	; 128
    13c0:	5f e3       	ldi	r21, 0x3F	; 63
    13c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c6:	88 23       	and	r24, r24
    13c8:	2c f4       	brge	.+10     	; 0x13d4 <LCD_sendCommand+0x354>
		__ticks = 1;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	9e 83       	std	Y+6, r25	; 0x06
    13d0:	8d 83       	std	Y+5, r24	; 0x05
    13d2:	3f c0       	rjmp	.+126    	; 0x1452 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    13d4:	6f 81       	ldd	r22, Y+7	; 0x07
    13d6:	78 85       	ldd	r23, Y+8	; 0x08
    13d8:	89 85       	ldd	r24, Y+9	; 0x09
    13da:	9a 85       	ldd	r25, Y+10	; 0x0a
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	3f ef       	ldi	r19, 0xFF	; 255
    13e0:	4f e7       	ldi	r20, 0x7F	; 127
    13e2:	57 e4       	ldi	r21, 0x47	; 71
    13e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e8:	18 16       	cp	r1, r24
    13ea:	4c f5       	brge	.+82     	; 0x143e <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e2       	ldi	r20, 0x20	; 32
    13fa:	51 e4       	ldi	r21, 0x41	; 65
    13fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	bc 01       	movw	r22, r24
    1406:	cd 01       	movw	r24, r26
    1408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	0f c0       	rjmp	.+30     	; 0x1434 <LCD_sendCommand+0x3b4>
    1416:	89 e1       	ldi	r24, 0x19	; 25
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	9c 83       	std	Y+4, r25	; 0x04
    141c:	8b 83       	std	Y+3, r24	; 0x03
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <LCD_sendCommand+0x3a2>
    1426:	9c 83       	std	Y+4, r25	; 0x04
    1428:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	69 f7       	brne	.-38     	; 0x1416 <LCD_sendCommand+0x396>
    143c:	14 c0       	rjmp	.+40     	; 0x1466 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143e:	6f 81       	ldd	r22, Y+7	; 0x07
    1440:	78 85       	ldd	r23, Y+8	; 0x08
    1442:	89 85       	ldd	r24, Y+9	; 0x09
    1444:	9a 85       	ldd	r25, Y+10	; 0x0a
    1446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	f1 f7       	brne	.-4      	; 0x145e <LCD_sendCommand+0x3de>
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1466:	e9 96       	adiw	r28, 0x39	; 57
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	e9 97       	sbiw	r28, 0x39	; 57
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    148e:	a2 e3       	ldi	r26, 0x32	; 50
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e2 e3       	ldi	r30, 0x32	; 50
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 61       	ori	r24, 0x10	; 16
    149a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    149c:	a2 e3       	ldi	r26, 0x32	; 50
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e2 e3       	ldi	r30, 0x32	; 50
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 7d       	andi	r24, 0xDF	; 223
    14a8:	8c 93       	st	X, r24
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e8       	ldi	r26, 0x80	; 128
    14b0:	bf e3       	ldi	r27, 0x3F	; 63
    14b2:	8d ab       	std	Y+53, r24	; 0x35
    14b4:	9e ab       	std	Y+54, r25	; 0x36
    14b6:	af ab       	std	Y+55, r26	; 0x37
    14b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	6d a9       	ldd	r22, Y+53	; 0x35
    14bc:	7e a9       	ldd	r23, Y+54	; 0x36
    14be:	8f a9       	ldd	r24, Y+55	; 0x37
    14c0:	98 ad       	ldd	r25, Y+56	; 0x38
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	4a e7       	ldi	r20, 0x7A	; 122
    14c8:	53 e4       	ldi	r21, 0x43	; 67
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	89 ab       	std	Y+49, r24	; 0x31
    14d4:	9a ab       	std	Y+50, r25	; 0x32
    14d6:	ab ab       	std	Y+51, r26	; 0x33
    14d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14da:	69 a9       	ldd	r22, Y+49	; 0x31
    14dc:	7a a9       	ldd	r23, Y+50	; 0x32
    14de:	8b a9       	ldd	r24, Y+51	; 0x33
    14e0:	9c a9       	ldd	r25, Y+52	; 0x34
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ee:	88 23       	and	r24, r24
    14f0:	2c f4       	brge	.+10     	; 0x14fc <LCD_displayCharacter+0x84>
		__ticks = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	98 ab       	std	Y+48, r25	; 0x30
    14f8:	8f a7       	std	Y+47, r24	; 0x2f
    14fa:	3f c0       	rjmp	.+126    	; 0x157a <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    14fc:	69 a9       	ldd	r22, Y+49	; 0x31
    14fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1500:	8b a9       	ldd	r24, Y+51	; 0x33
    1502:	9c a9       	ldd	r25, Y+52	; 0x34
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	57 e4       	ldi	r21, 0x47	; 71
    150c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1510:	18 16       	cp	r1, r24
    1512:	4c f5       	brge	.+82     	; 0x1566 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	6d a9       	ldd	r22, Y+53	; 0x35
    1516:	7e a9       	ldd	r23, Y+54	; 0x36
    1518:	8f a9       	ldd	r24, Y+55	; 0x37
    151a:	98 ad       	ldd	r25, Y+56	; 0x38
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	98 ab       	std	Y+48, r25	; 0x30
    153a:	8f a7       	std	Y+47, r24	; 0x2f
    153c:	0f c0       	rjmp	.+30     	; 0x155c <LCD_displayCharacter+0xe4>
    153e:	89 e1       	ldi	r24, 0x19	; 25
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9e a7       	std	Y+46, r25	; 0x2e
    1544:	8d a7       	std	Y+45, r24	; 0x2d
    1546:	8d a5       	ldd	r24, Y+45	; 0x2d
    1548:	9e a5       	ldd	r25, Y+46	; 0x2e
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <LCD_displayCharacter+0xd2>
    154e:	9e a7       	std	Y+46, r25	; 0x2e
    1550:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	8f a5       	ldd	r24, Y+47	; 0x2f
    1554:	98 a9       	ldd	r25, Y+48	; 0x30
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	98 ab       	std	Y+48, r25	; 0x30
    155a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	8f a5       	ldd	r24, Y+47	; 0x2f
    155e:	98 a9       	ldd	r25, Y+48	; 0x30
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f7       	brne	.-38     	; 0x153e <LCD_displayCharacter+0xc6>
    1564:	14 c0       	rjmp	.+40     	; 0x158e <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	69 a9       	ldd	r22, Y+49	; 0x31
    1568:	7a a9       	ldd	r23, Y+50	; 0x32
    156a:	8b a9       	ldd	r24, Y+51	; 0x33
    156c:	9c a9       	ldd	r25, Y+52	; 0x34
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	98 ab       	std	Y+48, r25	; 0x30
    1578:	8f a7       	std	Y+47, r24	; 0x2f
    157a:	8f a5       	ldd	r24, Y+47	; 0x2f
    157c:	98 a9       	ldd	r25, Y+48	; 0x30
    157e:	9c a7       	std	Y+44, r25	; 0x2c
    1580:	8b a7       	std	Y+43, r24	; 0x2b
    1582:	8b a5       	ldd	r24, Y+43	; 0x2b
    1584:	9c a5       	ldd	r25, Y+44	; 0x2c
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <LCD_displayCharacter+0x10e>
    158a:	9c a7       	std	Y+44, r25	; 0x2c
    158c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    158e:	a2 e3       	ldi	r26, 0x32	; 50
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e2 e3       	ldi	r30, 0x32	; 50
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 64       	ori	r24, 0x40	; 64
    159a:	8c 93       	st	X, r24
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 e8       	ldi	r26, 0x80	; 128
    15a2:	bf e3       	ldi	r27, 0x3F	; 63
    15a4:	8f a3       	std	Y+39, r24	; 0x27
    15a6:	98 a7       	std	Y+40, r25	; 0x28
    15a8:	a9 a7       	std	Y+41, r26	; 0x29
    15aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ac:	6f a1       	ldd	r22, Y+39	; 0x27
    15ae:	78 a5       	ldd	r23, Y+40	; 0x28
    15b0:	89 a5       	ldd	r24, Y+41	; 0x29
    15b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a e7       	ldi	r20, 0x7A	; 122
    15ba:	53 e4       	ldi	r21, 0x43	; 67
    15bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	8b a3       	std	Y+35, r24	; 0x23
    15c6:	9c a3       	std	Y+36, r25	; 0x24
    15c8:	ad a3       	std	Y+37, r26	; 0x25
    15ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15cc:	6b a1       	ldd	r22, Y+35	; 0x23
    15ce:	7c a1       	ldd	r23, Y+36	; 0x24
    15d0:	8d a1       	ldd	r24, Y+37	; 0x25
    15d2:	9e a1       	ldd	r25, Y+38	; 0x26
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	2c f4       	brge	.+10     	; 0x15ee <LCD_displayCharacter+0x176>
		__ticks = 1;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9a a3       	std	Y+34, r25	; 0x22
    15ea:	89 a3       	std	Y+33, r24	; 0x21
    15ec:	3f c0       	rjmp	.+126    	; 0x166c <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    15ee:	6b a1       	ldd	r22, Y+35	; 0x23
    15f0:	7c a1       	ldd	r23, Y+36	; 0x24
    15f2:	8d a1       	ldd	r24, Y+37	; 0x25
    15f4:	9e a1       	ldd	r25, Y+38	; 0x26
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	3f ef       	ldi	r19, 0xFF	; 255
    15fa:	4f e7       	ldi	r20, 0x7F	; 127
    15fc:	57 e4       	ldi	r21, 0x47	; 71
    15fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1602:	18 16       	cp	r1, r24
    1604:	4c f5       	brge	.+82     	; 0x1658 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1606:	6f a1       	ldd	r22, Y+39	; 0x27
    1608:	78 a5       	ldd	r23, Y+40	; 0x28
    160a:	89 a5       	ldd	r24, Y+41	; 0x29
    160c:	9a a5       	ldd	r25, Y+42	; 0x2a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9a a3       	std	Y+34, r25	; 0x22
    162c:	89 a3       	std	Y+33, r24	; 0x21
    162e:	0f c0       	rjmp	.+30     	; 0x164e <LCD_displayCharacter+0x1d6>
    1630:	89 e1       	ldi	r24, 0x19	; 25
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	98 a3       	std	Y+32, r25	; 0x20
    1636:	8f 8f       	std	Y+31, r24	; 0x1f
    1638:	8f 8d       	ldd	r24, Y+31	; 0x1f
    163a:	98 a1       	ldd	r25, Y+32	; 0x20
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <LCD_displayCharacter+0x1c4>
    1640:	98 a3       	std	Y+32, r25	; 0x20
    1642:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1644:	89 a1       	ldd	r24, Y+33	; 0x21
    1646:	9a a1       	ldd	r25, Y+34	; 0x22
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	9a a3       	std	Y+34, r25	; 0x22
    164c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164e:	89 a1       	ldd	r24, Y+33	; 0x21
    1650:	9a a1       	ldd	r25, Y+34	; 0x22
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	69 f7       	brne	.-38     	; 0x1630 <LCD_displayCharacter+0x1b8>
    1656:	14 c0       	rjmp	.+40     	; 0x1680 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1658:	6b a1       	ldd	r22, Y+35	; 0x23
    165a:	7c a1       	ldd	r23, Y+36	; 0x24
    165c:	8d a1       	ldd	r24, Y+37	; 0x25
    165e:	9e a1       	ldd	r25, Y+38	; 0x26
    1660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9a a3       	std	Y+34, r25	; 0x22
    166a:	89 a3       	std	Y+33, r24	; 0x21
    166c:	89 a1       	ldd	r24, Y+33	; 0x21
    166e:	9a a1       	ldd	r25, Y+34	; 0x22
    1670:	9e 8f       	std	Y+30, r25	; 0x1e
    1672:	8d 8f       	std	Y+29, r24	; 0x1d
    1674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <LCD_displayCharacter+0x200>
    167c:	9e 8f       	std	Y+30, r25	; 0x1e
    167e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1680:	eb e3       	ldi	r30, 0x3B	; 59
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	89 ad       	ldd	r24, Y+57	; 0x39
    1686:	80 83       	st	Z, r24
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a0 e8       	ldi	r26, 0x80	; 128
    168e:	bf e3       	ldi	r27, 0x3F	; 63
    1690:	89 8f       	std	Y+25, r24	; 0x19
    1692:	9a 8f       	std	Y+26, r25	; 0x1a
    1694:	ab 8f       	std	Y+27, r26	; 0x1b
    1696:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1698:	69 8d       	ldd	r22, Y+25	; 0x19
    169a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    169c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4a e7       	ldi	r20, 0x7A	; 122
    16a6:	53 e4       	ldi	r21, 0x43	; 67
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	8d 8b       	std	Y+21, r24	; 0x15
    16b2:	9e 8b       	std	Y+22, r25	; 0x16
    16b4:	af 8b       	std	Y+23, r26	; 0x17
    16b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16b8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ba:	7e 89       	ldd	r23, Y+22	; 0x16
    16bc:	8f 89       	ldd	r24, Y+23	; 0x17
    16be:	98 8d       	ldd	r25, Y+24	; 0x18
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16cc:	88 23       	and	r24, r24
    16ce:	2c f4       	brge	.+10     	; 0x16da <LCD_displayCharacter+0x262>
		__ticks = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9c 8b       	std	Y+20, r25	; 0x14
    16d6:	8b 8b       	std	Y+19, r24	; 0x13
    16d8:	3f c0       	rjmp	.+126    	; 0x1758 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    16da:	6d 89       	ldd	r22, Y+21	; 0x15
    16dc:	7e 89       	ldd	r23, Y+22	; 0x16
    16de:	8f 89       	ldd	r24, Y+23	; 0x17
    16e0:	98 8d       	ldd	r25, Y+24	; 0x18
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	57 e4       	ldi	r21, 0x47	; 71
    16ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	4c f5       	brge	.+82     	; 0x1744 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	69 8d       	ldd	r22, Y+25	; 0x19
    16f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9c 8b       	std	Y+20, r25	; 0x14
    1718:	8b 8b       	std	Y+19, r24	; 0x13
    171a:	0f c0       	rjmp	.+30     	; 0x173a <LCD_displayCharacter+0x2c2>
    171c:	89 e1       	ldi	r24, 0x19	; 25
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9a 8b       	std	Y+18, r25	; 0x12
    1722:	89 8b       	std	Y+17, r24	; 0x11
    1724:	89 89       	ldd	r24, Y+17	; 0x11
    1726:	9a 89       	ldd	r25, Y+18	; 0x12
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <LCD_displayCharacter+0x2b0>
    172c:	9a 8b       	std	Y+18, r25	; 0x12
    172e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	8b 89       	ldd	r24, Y+19	; 0x13
    1732:	9c 89       	ldd	r25, Y+20	; 0x14
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	9c 8b       	std	Y+20, r25	; 0x14
    1738:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	8b 89       	ldd	r24, Y+19	; 0x13
    173c:	9c 89       	ldd	r25, Y+20	; 0x14
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	69 f7       	brne	.-38     	; 0x171c <LCD_displayCharacter+0x2a4>
    1742:	14 c0       	rjmp	.+40     	; 0x176c <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1744:	6d 89       	ldd	r22, Y+21	; 0x15
    1746:	7e 89       	ldd	r23, Y+22	; 0x16
    1748:	8f 89       	ldd	r24, Y+23	; 0x17
    174a:	98 8d       	ldd	r25, Y+24	; 0x18
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	9c 8b       	std	Y+20, r25	; 0x14
    1756:	8b 8b       	std	Y+19, r24	; 0x13
    1758:	8b 89       	ldd	r24, Y+19	; 0x13
    175a:	9c 89       	ldd	r25, Y+20	; 0x14
    175c:	98 8b       	std	Y+16, r25	; 0x10
    175e:	8f 87       	std	Y+15, r24	; 0x0f
    1760:	8f 85       	ldd	r24, Y+15	; 0x0f
    1762:	98 89       	ldd	r25, Y+16	; 0x10
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <LCD_displayCharacter+0x2ec>
    1768:	98 8b       	std	Y+16, r25	; 0x10
    176a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    176c:	a2 e3       	ldi	r26, 0x32	; 50
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e2 e3       	ldi	r30, 0x32	; 50
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8f 7b       	andi	r24, 0xBF	; 191
    1778:	8c 93       	st	X, r24
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a0 e8       	ldi	r26, 0x80	; 128
    1780:	bf e3       	ldi	r27, 0x3F	; 63
    1782:	8b 87       	std	Y+11, r24	; 0x0b
    1784:	9c 87       	std	Y+12, r25	; 0x0c
    1786:	ad 87       	std	Y+13, r26	; 0x0d
    1788:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178a:	6b 85       	ldd	r22, Y+11	; 0x0b
    178c:	7c 85       	ldd	r23, Y+12	; 0x0c
    178e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1790:	9e 85       	ldd	r25, Y+14	; 0x0e
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a e7       	ldi	r20, 0x7A	; 122
    1798:	53 e4       	ldi	r21, 0x43	; 67
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8f 83       	std	Y+7, r24	; 0x07
    17a4:	98 87       	std	Y+8, r25	; 0x08
    17a6:	a9 87       	std	Y+9, r26	; 0x09
    17a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17aa:	6f 81       	ldd	r22, Y+7	; 0x07
    17ac:	78 85       	ldd	r23, Y+8	; 0x08
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e8       	ldi	r20, 0x80	; 128
    17b8:	5f e3       	ldi	r21, 0x3F	; 63
    17ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17be:	88 23       	and	r24, r24
    17c0:	2c f4       	brge	.+10     	; 0x17cc <LCD_displayCharacter+0x354>
		__ticks = 1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	3f c0       	rjmp	.+126    	; 0x184a <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    17cc:	6f 81       	ldd	r22, Y+7	; 0x07
    17ce:	78 85       	ldd	r23, Y+8	; 0x08
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	57 e4       	ldi	r21, 0x47	; 71
    17dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	4c f5       	brge	.+82     	; 0x1836 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e2       	ldi	r20, 0x20	; 32
    17f2:	51 e4       	ldi	r21, 0x41	; 65
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9e 83       	std	Y+6, r25	; 0x06
    180a:	8d 83       	std	Y+5, r24	; 0x05
    180c:	0f c0       	rjmp	.+30     	; 0x182c <LCD_displayCharacter+0x3b4>
    180e:	89 e1       	ldi	r24, 0x19	; 25
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	8b 83       	std	Y+3, r24	; 0x03
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <LCD_displayCharacter+0x3a2>
    181e:	9c 83       	std	Y+4, r25	; 0x04
    1820:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	69 f7       	brne	.-38     	; 0x180e <LCD_displayCharacter+0x396>
    1834:	14 c0       	rjmp	.+40     	; 0x185e <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1836:	6f 81       	ldd	r22, Y+7	; 0x07
    1838:	78 85       	ldd	r23, Y+8	; 0x08
    183a:	89 85       	ldd	r24, Y+9	; 0x09
    183c:	9a 85       	ldd	r25, Y+10	; 0x0a
    183e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <LCD_displayCharacter+0x3de>
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    185e:	e9 96       	adiw	r28, 0x39	; 57
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <LCD_displayString+0x6>
    1876:	0f 92       	push	r0
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	9b 83       	std	Y+3, r25	; 0x03
    187e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1880:	19 82       	std	Y+1, r1	; 0x01
    1882:	0e c0       	rjmp	.+28     	; 0x18a0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	9b 81       	ldd	r25, Y+3	; 0x03
    188e:	fc 01       	movw	r30, r24
    1890:	e2 0f       	add	r30, r18
    1892:	f3 1f       	adc	r31, r19
    1894:	80 81       	ld	r24, Z
    1896:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_displayCharacter>
		i++;
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	8f 5f       	subi	r24, 0xFF	; 255
    189e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	9b 81       	ldd	r25, Y+3	; 0x03
    18aa:	fc 01       	movw	r30, r24
    18ac:	e2 0f       	add	r30, r18
    18ae:	f3 1f       	adc	r31, r19
    18b0:	80 81       	ld	r24, Z
    18b2:	88 23       	and	r24, r24
    18b4:	39 f7       	brne	.-50     	; 0x1884 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <LCD_goToRowColumn+0x6>
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <LCD_goToRowColumn+0x8>
    18ca:	0f 92       	push	r0
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    18d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	3d 83       	std	Y+5, r19	; 0x05
    18dc:	2c 83       	std	Y+4, r18	; 0x04
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	91 05       	cpc	r25, r1
    18e6:	c1 f0       	breq	.+48     	; 0x1918 <LCD_goToRowColumn+0x56>
    18e8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ea:	3d 81       	ldd	r19, Y+5	; 0x05
    18ec:	22 30       	cpi	r18, 0x02	; 2
    18ee:	31 05       	cpc	r19, r1
    18f0:	2c f4       	brge	.+10     	; 0x18fc <LCD_goToRowColumn+0x3a>
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	9d 81       	ldd	r25, Y+5	; 0x05
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	61 f0       	breq	.+24     	; 0x1912 <LCD_goToRowColumn+0x50>
    18fa:	19 c0       	rjmp	.+50     	; 0x192e <LCD_goToRowColumn+0x6c>
    18fc:	2c 81       	ldd	r18, Y+4	; 0x04
    18fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	69 f0       	breq	.+26     	; 0x1920 <LCD_goToRowColumn+0x5e>
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	83 30       	cpi	r24, 0x03	; 3
    190c:	91 05       	cpc	r25, r1
    190e:	61 f0       	breq	.+24     	; 0x1928 <LCD_goToRowColumn+0x66>
    1910:	0e c0       	rjmp	.+28     	; 0x192e <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	0b c0       	rjmp	.+22     	; 0x192e <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	80 5c       	subi	r24, 0xC0	; 192
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	07 c0       	rjmp	.+14     	; 0x192e <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	80 5f       	subi	r24, 0xF0	; 240
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	03 c0       	rjmp	.+6      	; 0x192e <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	80 5b       	subi	r24, 0xB0	; 176
    192c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	80 68       	ori	r24, 0x80	; 128
    1932:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_sendCommand>
}
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <LCD_displayStringRowColumn+0x6>
    194c:	00 d0       	rcall	.+0      	; 0x194e <LCD_displayStringRowColumn+0x8>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	6a 83       	std	Y+2, r22	; 0x02
    1956:	5c 83       	std	Y+4, r21	; 0x04
    1958:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	6a 81       	ldd	r22, Y+2	; 0x02
    195e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_displayString>
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	62 97       	sbiw	r28, 0x12	; 18
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	9a 8b       	std	Y+18, r25	; 0x12
    198e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1990:	89 89       	ldd	r24, Y+17	; 0x11
    1992:	9a 89       	ldd	r25, Y+18	; 0x12
    1994:	9e 01       	movw	r18, r28
    1996:	2f 5f       	subi	r18, 0xFF	; 255
    1998:	3f 4f       	sbci	r19, 0xFF	; 255
    199a:	b9 01       	movw	r22, r18
    199c:	4a e0       	ldi	r20, 0x0A	; 10
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	0e 94 1b 12 	call	0x2436	; 0x2436 <itoa>
   LCD_displayString(buff);
    19a4:	ce 01       	movw	r24, r28
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_displayString>
}
    19ac:	62 96       	adiw	r28, 0x12	; 18
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_sendCommand>
}
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <__vector_9>:
static volatile void (*g_callBackPtr_CMP)(void) = NULL_PTR;



ISR(TIMER0_OVF_vect)
{
    19d2:	1f 92       	push	r1
    19d4:	0f 92       	push	r0
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	0f 92       	push	r0
    19da:	11 24       	eor	r1, r1
    19dc:	2f 93       	push	r18
    19de:	3f 93       	push	r19
    19e0:	4f 93       	push	r20
    19e2:	5f 93       	push	r21
    19e4:	6f 93       	push	r22
    19e6:	7f 93       	push	r23
    19e8:	8f 93       	push	r24
    19ea:	9f 93       	push	r25
    19ec:	af 93       	push	r26
    19ee:	bf 93       	push	r27
    19f0:	ef 93       	push	r30
    19f2:	ff 93       	push	r31
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_OVF != NULL_PTR)
    19fc:	80 91 7a 00 	lds	r24, 0x007A
    1a00:	90 91 7b 00 	lds	r25, 0x007B
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	29 f0       	breq	.+10     	; 0x1a12 <__vector_9+0x40>
	{
		(*g_callBackPtr_OVF)(); /* another method to call the function using pointer to function g_callBackPtr_OVF(); */
    1a08:	e0 91 7a 00 	lds	r30, 0x007A
    1a0c:	f0 91 7b 00 	lds	r31, 0x007B
    1a10:	09 95       	icall
	}
}
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	ff 91       	pop	r31
    1a18:	ef 91       	pop	r30
    1a1a:	bf 91       	pop	r27
    1a1c:	af 91       	pop	r26
    1a1e:	9f 91       	pop	r25
    1a20:	8f 91       	pop	r24
    1a22:	7f 91       	pop	r23
    1a24:	6f 91       	pop	r22
    1a26:	5f 91       	pop	r21
    1a28:	4f 91       	pop	r20
    1a2a:	3f 91       	pop	r19
    1a2c:	2f 91       	pop	r18
    1a2e:	0f 90       	pop	r0
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	0f 90       	pop	r0
    1a34:	1f 90       	pop	r1
    1a36:	18 95       	reti

00001a38 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1a38:	1f 92       	push	r1
    1a3a:	0f 92       	push	r0
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	0f 92       	push	r0
    1a40:	11 24       	eor	r1, r1
    1a42:	2f 93       	push	r18
    1a44:	3f 93       	push	r19
    1a46:	4f 93       	push	r20
    1a48:	5f 93       	push	r21
    1a4a:	6f 93       	push	r22
    1a4c:	7f 93       	push	r23
    1a4e:	8f 93       	push	r24
    1a50:	9f 93       	push	r25
    1a52:	af 93       	push	r26
    1a54:	bf 93       	push	r27
    1a56:	ef 93       	push	r30
    1a58:	ff 93       	push	r31
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_CMP != NULL_PTR)
    1a62:	80 91 7c 00 	lds	r24, 0x007C
    1a66:	90 91 7d 00 	lds	r25, 0x007D
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	29 f0       	breq	.+10     	; 0x1a78 <__vector_19+0x40>
	{
		(*g_callBackPtr_CMP)(); /* another method to call the function using pointer to function g_callBackPtr_CMP(); */
    1a6e:	e0 91 7c 00 	lds	r30, 0x007C
    1a72:	f0 91 7d 00 	lds	r31, 0x007D
    1a76:	09 95       	icall
	}
}
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	ff 91       	pop	r31
    1a7e:	ef 91       	pop	r30
    1a80:	bf 91       	pop	r27
    1a82:	af 91       	pop	r26
    1a84:	9f 91       	pop	r25
    1a86:	8f 91       	pop	r24
    1a88:	7f 91       	pop	r23
    1a8a:	6f 91       	pop	r22
    1a8c:	5f 91       	pop	r21
    1a8e:	4f 91       	pop	r20
    1a90:	3f 91       	pop	r19
    1a92:	2f 91       	pop	r18
    1a94:	0f 90       	pop	r0
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	0f 90       	pop	r0
    1a9a:	1f 90       	pop	r1
    1a9c:	18 95       	reti

00001a9e <Timer0_init>:



void Timer0_init (const Timer0_ConfigType * ConfigPtr)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <Timer0_init+0x6>
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	89 83       	std	Y+1, r24	; 0x01
	if (ConfigPtr->Mode == NORMAL_MODE)
    1aac:	e9 81       	ldd	r30, Y+1	; 0x01
    1aae:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f5       	brne	.+66     	; 0x1af8 <Timer0_init+0x5a>
	{
		TCNT0 = ConfigPtr->InitialValue;
    1ab6:	a2 e5       	ldi	r26, 0x52	; 82
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e9 81       	ldd	r30, Y+1	; 0x01
    1abc:	fa 81       	ldd	r31, Y+2	; 0x02
    1abe:	81 81       	ldd	r24, Z+1	; 0x01
    1ac0:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TOIE0);                        // overflow INT Enable
    1ac2:	a9 e5       	ldi	r26, 0x59	; 89
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e9 e5       	ldi	r30, 0x59	; 89
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	81 60       	ori	r24, 0x01	; 1
    1ace:	8c 93       	st	X, r24
		/* Configure the timer control register
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 */
		SET_BIT (TCCR0,FOC0);
    1ad0:	a3 e5       	ldi	r26, 0x53	; 83
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e3 e5       	ldi	r30, 0x53	; 83
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 68       	ori	r24, 0x80	; 128
    1adc:	8c 93       	st	X, r24
		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock);  // clock
    1ade:	a3 e5       	ldi	r26, 0x53	; 83
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e3 e5       	ldi	r30, 0x53	; 83
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	98 2f       	mov	r25, r24
    1aea:	98 7f       	andi	r25, 0xF8	; 248
    1aec:	e9 81       	ldd	r30, Y+1	; 0x01
    1aee:	fa 81       	ldd	r31, Y+2	; 0x02
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	89 2b       	or	r24, r25
    1af4:	8c 93       	st	X, r24
    1af6:	6c c0       	rjmp	.+216    	; 0x1bd0 <Timer0_init+0x132>
	}


	else if (ConfigPtr->Mode == CTC_MODE)
    1af8:	e9 81       	ldd	r30, Y+1	; 0x01
    1afa:	fa 81       	ldd	r31, Y+2	; 0x02
    1afc:	80 81       	ld	r24, Z
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	71 f5       	brne	.+92     	; 0x1b5e <Timer0_init+0xc0>
	{
		TCNT0 = ConfigPtr->InitialValue;
    1b02:	a2 e5       	ldi	r26, 0x52	; 82
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e9 81       	ldd	r30, Y+1	; 0x01
    1b08:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0a:	81 81       	ldd	r24, Z+1	; 0x01
    1b0c:	8c 93       	st	X, r24
		OCR0 = ConfigPtr->CompareValue;
    1b0e:	ac e5       	ldi	r26, 0x5C	; 92
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e9 81       	ldd	r30, Y+1	; 0x01
    1b14:	fa 81       	ldd	r31, Y+2	; 0x02
    1b16:	83 81       	ldd	r24, Z+3	; 0x03
    1b18:	8c 93       	st	X, r24
		SET_BIT (TIMSK,OCIE0);  // Enable Timer0 Compare Interrupt
    1b1a:	a9 e5       	ldi	r26, 0x59	; 89
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e9 e5       	ldi	r30, 0x59	; 89
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	82 60       	ori	r24, 0x02	; 2
    1b26:	8c 93       	st	X, r24
		/* Configure timer0 control register
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 so COM00=0 & COM01=0 , "we'll do so using PWM mode"
			 */
		SET_BIT(TCCR0,FOC0);
    1b28:	a3 e5       	ldi	r26, 0x53	; 83
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e3 e5       	ldi	r30, 0x53	; 83
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	80 68       	ori	r24, 0x80	; 128
    1b34:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1b36:	a3 e5       	ldi	r26, 0x53	; 83
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e3 e5       	ldi	r30, 0x53	; 83
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 60       	ori	r24, 0x08	; 8
    1b42:	8c 93       	st	X, r24

		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock); // clock
    1b44:	a3 e5       	ldi	r26, 0x53	; 83
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e3 e5       	ldi	r30, 0x53	; 83
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	98 2f       	mov	r25, r24
    1b50:	98 7f       	andi	r25, 0xF8	; 248
    1b52:	e9 81       	ldd	r30, Y+1	; 0x01
    1b54:	fa 81       	ldd	r31, Y+2	; 0x02
    1b56:	82 81       	ldd	r24, Z+2	; 0x02
    1b58:	89 2b       	or	r24, r25
    1b5a:	8c 93       	st	X, r24
    1b5c:	39 c0       	rjmp	.+114    	; 0x1bd0 <Timer0_init+0x132>
	}


	else if (ConfigPtr->Mode == PWM_MODE)
    1b5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b60:	fa 81       	ldd	r31, Y+2	; 0x02
    1b62:	80 81       	ld	r24, Z
    1b64:	82 30       	cpi	r24, 0x02	; 2
    1b66:	a1 f5       	brne	.+104    	; 0x1bd0 <Timer0_init+0x132>
	{
		TCNT0 = ConfigPtr->InitialValue;
    1b68:	a2 e5       	ldi	r26, 0x52	; 82
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b70:	81 81       	ldd	r24, Z+1	; 0x01
    1b72:	8c 93       	st	X, r24
		OCR0 = ConfigPtr->DutyCycle;
    1b74:	ac e5       	ldi	r26, 0x5C	; 92
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7c:	84 81       	ldd	r24, Z+4	; 0x04
    1b7e:	8c 93       	st	X, r24
		DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    1b80:	a7 e3       	ldi	r26, 0x37	; 55
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e7 e3       	ldi	r30, 0x37	; 55
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 60       	ori	r24, 0x08	; 8
    1b8c:	8c 93       	st	X, r24
		/* Configure timer control register
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 */
		SET_BIT (TCCR0,WGM00);
    1b8e:	a3 e5       	ldi	r26, 0x53	; 83
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e3 e5       	ldi	r30, 0x53	; 83
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	80 64       	ori	r24, 0x40	; 64
    1b9a:	8c 93       	st	X, r24
		SET_BIT (TCCR0,WGM01);
    1b9c:	a3 e5       	ldi	r26, 0x53	; 83
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e3 e5       	ldi	r30, 0x53	; 83
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 60       	ori	r24, 0x08	; 8
    1ba8:	8c 93       	st	X, r24
		SET_BIT (TCCR0,COM01);
    1baa:	a3 e5       	ldi	r26, 0x53	; 83
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e3 e5       	ldi	r30, 0x53	; 83
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 62       	ori	r24, 0x20	; 32
    1bb6:	8c 93       	st	X, r24


		TCCR0 =(TCCR0&0xF8) | (ConfigPtr->Clock); // clock
    1bb8:	a3 e5       	ldi	r26, 0x53	; 83
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e3 e5       	ldi	r30, 0x53	; 83
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	98 7f       	andi	r25, 0xF8	; 248
    1bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	89 2b       	or	r24, r25
    1bce:	8c 93       	st	X, r24
	}


}
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <Timer0_OVF_setCallBack>:



void Timer0_OVF_setCallBack(void(*a_ptr)(void))
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <Timer0_OVF_setCallBack+0x6>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_OVF = a_ptr;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	90 93 7b 00 	sts	0x007B, r25
    1bf0:	80 93 7a 00 	sts	0x007A, r24
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <Timer0_CMP_setCallBack>:



void Timer0_CMP_setCallBack(void(*a_ptr)(void))
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <Timer0_CMP_setCallBack+0x6>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_CMP = a_ptr;
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	90 93 7d 00 	sts	0x007D, r25
    1c14:	80 93 7c 00 	sts	0x007C, r24
}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <Timer0_DeInit>:


void Timer0_DeInit(void)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
    1c2a:	e2 e5       	ldi	r30, 0x52	; 82
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	10 82       	st	Z, r1
	TCCR0=0;
    1c30:	e3 e5       	ldi	r30, 0x53	; 83
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE0);    // Disable Overflow INT
    1c36:	a9 e5       	ldi	r26, 0x59	; 89
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e9 e5       	ldi	r30, 0x59	; 89
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8e 7f       	andi	r24, 0xFE	; 254
    1c42:	8c 93       	st	X, r24
	CLEAR_BIT (TIMSK,OCIE0);   // Disable Timer0 Compare Interrupt
    1c44:	a9 e5       	ldi	r26, 0x59	; 89
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e9 e5       	ldi	r30, 0x59	; 89
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8d 7f       	andi	r24, 0xFD	; 253
    1c50:	8c 93       	st	X, r24
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <UART_init+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <UART_init+0x8>
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	9c 83       	std	Y+4, r25	; 0x04
    1c66:	8b 83       	std	Y+3, r24	; 0x03
	uint16 BAUD_PRESCALE = (((F_CPU / (Config_Ptr->BaudRate * 8UL))) - 1);
    1c68:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c6c:	81 81       	ldd	r24, Z+1	; 0x01
    1c6e:	92 81       	ldd	r25, Z+2	; 0x02
    1c70:	cc 01       	movw	r24, r24
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	aa 1f       	adc	r26, r26
    1c7c:	bb 1f       	adc	r27, r27
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	aa 1f       	adc	r26, r26
    1c84:	bb 1f       	adc	r27, r27
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	aa 1f       	adc	r26, r26
    1c8c:	bb 1f       	adc	r27, r27
    1c8e:	9c 01       	movw	r18, r24
    1c90:	ad 01       	movw	r20, r26
    1c92:	80 e4       	ldi	r24, 0x40	; 64
    1c94:	92 e4       	ldi	r25, 0x42	; 66
    1c96:	af e0       	ldi	r26, 0x0F	; 15
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 c2 11 	call	0x2384	; 0x2384 <__udivmodsi4>
    1ca2:	da 01       	movw	r26, r20
    1ca4:	c9 01       	movw	r24, r18
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	89 83       	std	Y+1, r24	; 0x01

	/* U2X = 1 for double transmission speed */
	if(Config_Ptr->Speed_of_operation==DoubleSpeed)
    1cac:	eb 81       	ldd	r30, Y+3	; 0x03
    1cae:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb0:	86 81       	ldd	r24, Z+6	; 0x06
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <UART_init+0x68>
		UCSRA = (1<<U2X);
    1cb6:	eb e2       	ldi	r30, 0x2B	; 43
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	80 83       	st	Z, r24
    1cbe:	03 c0       	rjmp	.+6      	; 0x1cc6 <UART_init+0x6e>
	else
		UCSRA=0;
    1cc0:	eb e2       	ldi	r30, 0x2B	; 43
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	10 82       	st	Z, r1
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1cc6:	ea e2       	ldi	r30, 0x2A	; 42
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	88 e1       	ldi	r24, 0x18	; 24
    1ccc:	80 83       	st	Z, r24

	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 ***********************************************************************/
	SET_BIT(UCSRC,URSEL);
    1cce:	a0 e4       	ldi	r26, 0x40	; 64
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e0 e4       	ldi	r30, 0x40	; 64
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 68       	ori	r24, 0x80	; 128
    1cda:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xBF) | ((Config_Ptr->Mode_of_operation)<<6);
    1cdc:	a0 e4       	ldi	r26, 0x40	; 64
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e0 e4       	ldi	r30, 0x40	; 64
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	2f 7b       	andi	r18, 0xBF	; 191
    1cea:	eb 81       	ldd	r30, Y+3	; 0x03
    1cec:	fc 81       	ldd	r31, Y+4	; 0x04
    1cee:	85 81       	ldd	r24, Z+5	; 0x05
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	00 24       	eor	r0, r0
    1cf6:	96 95       	lsr	r25
    1cf8:	87 95       	ror	r24
    1cfa:	07 94       	ror	r0
    1cfc:	96 95       	lsr	r25
    1cfe:	87 95       	ror	r24
    1d00:	07 94       	ror	r0
    1d02:	98 2f       	mov	r25, r24
    1d04:	80 2d       	mov	r24, r0
    1d06:	82 2b       	or	r24, r18
    1d08:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xCF) | ((Config_Ptr->ParityType)<<4);
    1d0a:	a0 e4       	ldi	r26, 0x40	; 64
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e0 e4       	ldi	r30, 0x40	; 64
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	28 2f       	mov	r18, r24
    1d16:	2f 7c       	andi	r18, 0xCF	; 207
    1d18:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1c:	83 81       	ldd	r24, Z+3	; 0x03
    1d1e:	88 2f       	mov	r24, r24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	82 95       	swap	r24
    1d24:	92 95       	swap	r25
    1d26:	90 7f       	andi	r25, 0xF0	; 240
    1d28:	98 27       	eor	r25, r24
    1d2a:	80 7f       	andi	r24, 0xF0	; 240
    1d2c:	98 27       	eor	r25, r24
    1d2e:	82 2b       	or	r24, r18
    1d30:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xFC) | ((Config_Ptr->StopBitsNum)<<3);
    1d32:	a0 e4       	ldi	r26, 0x40	; 64
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e0 e4       	ldi	r30, 0x40	; 64
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	2c 7f       	andi	r18, 0xFC	; 252
    1d40:	eb 81       	ldd	r30, Y+3	; 0x03
    1d42:	fc 81       	ldd	r31, Y+4	; 0x04
    1d44:	84 81       	ldd	r24, Z+4	; 0x04
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	82 2b       	or	r24, r18
    1d58:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xFE) | (Config_Ptr->Clock_polarity);
    1d5a:	a0 e4       	ldi	r26, 0x40	; 64
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e0 e4       	ldi	r30, 0x40	; 64
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	98 2f       	mov	r25, r24
    1d66:	9e 7f       	andi	r25, 0xFE	; 254
    1d68:	eb 81       	ldd	r30, Y+3	; 0x03
    1d6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d6c:	87 81       	ldd	r24, Z+7	; 0x07
    1d6e:	89 2b       	or	r24, r25
    1d70:	8c 93       	st	X, r24

	if (Config_Ptr->NumOfDataBits == 6)
    1d72:	eb 81       	ldd	r30, Y+3	; 0x03
    1d74:	fc 81       	ldd	r31, Y+4	; 0x04
    1d76:	80 81       	ld	r24, Z
    1d78:	86 30       	cpi	r24, 0x06	; 6
    1d7a:	41 f4       	brne	.+16     	; 0x1d8c <UART_init+0x134>
	{
		SET_BIT(UCSRC,UCSZ0);
    1d7c:	a0 e4       	ldi	r26, 0x40	; 64
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e0 e4       	ldi	r30, 0x40	; 64
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	82 60       	ori	r24, 0x02	; 2
    1d88:	8c 93       	st	X, r24
    1d8a:	3b c0       	rjmp	.+118    	; 0x1e02 <UART_init+0x1aa>
	}
	else if (Config_Ptr->NumOfDataBits == 7)
    1d8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d90:	80 81       	ld	r24, Z
    1d92:	87 30       	cpi	r24, 0x07	; 7
    1d94:	41 f4       	brne	.+16     	; 0x1da6 <UART_init+0x14e>
	{
		SET_BIT(UCSRC,UCSZ1);
    1d96:	a0 e4       	ldi	r26, 0x40	; 64
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e0 e4       	ldi	r30, 0x40	; 64
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	84 60       	ori	r24, 0x04	; 4
    1da2:	8c 93       	st	X, r24
    1da4:	2e c0       	rjmp	.+92     	; 0x1e02 <UART_init+0x1aa>
	}
	else if (Config_Ptr->NumOfDataBits == 8)
    1da6:	eb 81       	ldd	r30, Y+3	; 0x03
    1da8:	fc 81       	ldd	r31, Y+4	; 0x04
    1daa:	80 81       	ld	r24, Z
    1dac:	88 30       	cpi	r24, 0x08	; 8
    1dae:	79 f4       	brne	.+30     	; 0x1dce <UART_init+0x176>
	{
		SET_BIT(UCSRC,UCSZ0);
    1db0:	a0 e4       	ldi	r26, 0x40	; 64
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e0 e4       	ldi	r30, 0x40	; 64
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	82 60       	ori	r24, 0x02	; 2
    1dbc:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1dbe:	a0 e4       	ldi	r26, 0x40	; 64
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e0 e4       	ldi	r30, 0x40	; 64
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	84 60       	ori	r24, 0x04	; 4
    1dca:	8c 93       	st	X, r24
    1dcc:	1a c0       	rjmp	.+52     	; 0x1e02 <UART_init+0x1aa>
	}
	else if (Config_Ptr->NumOfDataBits == 9)
    1dce:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd2:	80 81       	ld	r24, Z
    1dd4:	89 30       	cpi	r24, 0x09	; 9
    1dd6:	a9 f4       	brne	.+42     	; 0x1e02 <UART_init+0x1aa>
	{
		SET_BIT(UCSRB,UCSZ2);
    1dd8:	aa e2       	ldi	r26, 0x2A	; 42
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	ea e2       	ldi	r30, 0x2A	; 42
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	84 60       	ori	r24, 0x04	; 4
    1de4:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1de6:	a0 e4       	ldi	r26, 0x40	; 64
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e0 e4       	ldi	r30, 0x40	; 64
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	84 60       	ori	r24, 0x04	; 4
    1df2:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    1df4:	a0 e4       	ldi	r26, 0x40	; 64
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e0 e4       	ldi	r30, 0x40	; 64
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	82 60       	ori	r24, 0x02	; 2
    1e00:	8c 93       	st	X, r24
	}


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    1e02:	e0 e4       	ldi	r30, 0x40	; 64
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	89 2f       	mov	r24, r25
    1e0c:	99 27       	eor	r25, r25
    1e0e:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE;
    1e10:	e9 e2       	ldi	r30, 0x29	; 41
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	80 83       	st	Z, r24
}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <UART_sendByte>:

void UART_sendByte(const uint16 data,const Uart_ConfigType * Config_Ptr)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <UART_sendByte+0x6>
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <UART_sendByte+0x8>
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	7c 83       	std	Y+4, r23	; 0x04
    1e38:	6b 83       	std	Y+3, r22	; 0x03
	if ((Config_Ptr->NumOfDataBits) == 9)
    1e3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e3e:	80 81       	ld	r24, Z
    1e40:	89 30       	cpi	r24, 0x09	; 9
    1e42:	e9 f4       	brne	.+58     	; 0x1e7e <UART_sendByte+0x58>
	{
		/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1e44:	eb e2       	ldi	r30, 0x2B	; 43
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	80 72       	andi	r24, 0x20	; 32
    1e50:	90 70       	andi	r25, 0x00	; 0
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	b9 f3       	breq	.-18     	; 0x1e44 <UART_sendByte+0x1e>
		/*writing the ninth bit in the transmitted data to TXB0 bit in Register UCSRB*/
		UCSRB=(UCSRB&0xFE) | ((data&0x0100)>>8) ;
    1e56:	aa e2       	ldi	r26, 0x2A	; 42
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	ea e2       	ldi	r30, 0x2A	; 42
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	28 2f       	mov	r18, r24
    1e62:	2e 7f       	andi	r18, 0xFE	; 254
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	80 70       	andi	r24, 0x00	; 0
    1e6a:	91 70       	andi	r25, 0x01	; 1
    1e6c:	89 2f       	mov	r24, r25
    1e6e:	99 27       	eor	r25, r25
    1e70:	82 2b       	or	r24, r18
    1e72:	8c 93       	st	X, r24
		/*Writing the first eight bits in the transmitted data to UDR Register*/
		UDR = (data&0x00FF) ;
    1e74:	ec e2       	ldi	r30, 0x2C	; 44
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	0d c0       	rjmp	.+26     	; 0x1e98 <UART_sendByte+0x72>
	}
	else
	{
		/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1e7e:	eb e2       	ldi	r30, 0x2B	; 43
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	80 72       	andi	r24, 0x20	; 32
    1e8a:	90 70       	andi	r25, 0x00	; 0
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	b9 f3       	breq	.-18     	; 0x1e7e <UART_sendByte+0x58>
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
		UDR = data;
    1e90:	ec e2       	ldi	r30, 0x2C	; 44
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <UART_receiveByte>:

uint16 UART_receiveByte(const Uart_ConfigType * Config_Ptr)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <UART_receiveByte+0x6>
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <UART_receiveByte+0x8>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <UART_receiveByte+0xa>
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 RecievedData;
	if (Config_Ptr->NumOfDataBits == 9)
    1eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eba:	fc 81       	ldd	r31, Y+4	; 0x04
    1ebc:	80 81       	ld	r24, Z
    1ebe:	89 30       	cpi	r24, 0x09	; 9
    1ec0:	29 f5       	brne	.+74     	; 0x1f0c <UART_receiveByte+0x66>
	{
		/* RXC flag is set when the UART receive data so wait until this
		 * flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1ec2:	eb e2       	ldi	r30, 0x2B	; 43
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 23       	and	r24, r24
    1eca:	dc f7       	brge	.-10     	; 0x1ec2 <UART_receiveByte+0x1c>

		RecievedData=((UCSRB&0x02)>>1)<<8;
    1ecc:	ea e2       	ldi	r30, 0x2A	; 42
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	82 70       	andi	r24, 0x02	; 2
    1ed8:	90 70       	andi	r25, 0x00	; 0
    1eda:	95 95       	asr	r25
    1edc:	87 95       	ror	r24
    1ede:	98 2f       	mov	r25, r24
    1ee0:	88 27       	eor	r24, r24
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
		RecievedData=(RecievedData&0x0100) | (UDR&0x00FF) ;
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	9c 01       	movw	r18, r24
    1eec:	20 70       	andi	r18, 0x00	; 0
    1eee:	31 70       	andi	r19, 0x01	; 1
    1ef0:	ec e2       	ldi	r30, 0x2C	; 44
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	88 2f       	mov	r24, r24
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	82 2b       	or	r24, r18
    1efc:	93 2b       	or	r25, r19
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	89 83       	std	Y+1, r24	; 0x01
		return RecievedData ;
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
    1f0a:	10 c0       	rjmp	.+32     	; 0x1f2c <UART_receiveByte+0x86>
	}
	else
	{
		/* RXC flag is set when the UART receive data so wait until this
		 * flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1f0c:	eb e2       	ldi	r30, 0x2B	; 43
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	88 23       	and	r24, r24
    1f14:	dc f7       	brge	.-10     	; 0x1f0c <UART_receiveByte+0x66>
		/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
		RecievedData=UDR;
    1f16:	ec e2       	ldi	r30, 0x2C	; 44
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 2f       	mov	r24, r24
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	89 83       	std	Y+1, r24	; 0x01
		return RecievedData;
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
	}
}
    1f30:	26 96       	adiw	r28, 0x06	; 6
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <UART_sendString>:

void UART_sendString(const uint8 *Str , const Uart_ConfigType * Config_Ptr)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <UART_sendString+0x6>
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <UART_sendString+0x8>
    1f4a:	0f 92       	push	r0
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	9b 83       	std	Y+3, r25	; 0x03
    1f52:	8a 83       	std	Y+2, r24	; 0x02
    1f54:	7d 83       	std	Y+5, r23	; 0x05
    1f56:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    1f58:	19 82       	std	Y+1, r1	; 0x01
    1f5a:	13 c0       	rjmp	.+38     	; 0x1f82 <UART_sendString+0x40>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i] , Config_Ptr);
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	9b 81       	ldd	r25, Y+3	; 0x03
    1f66:	fc 01       	movw	r30, r24
    1f68:	e2 0f       	add	r30, r18
    1f6a:	f3 1f       	adc	r31, r19
    1f6c:	80 81       	ld	r24, Z
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	2c 81       	ldd	r18, Y+4	; 0x04
    1f74:	3d 81       	ldd	r19, Y+5	; 0x05
    1f76:	b9 01       	movw	r22, r18
    1f78:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <UART_sendByte>
		i++;
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str , const Uart_ConfigType * Config_Ptr)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	e2 0f       	add	r30, r18
    1f90:	f3 1f       	adc	r31, r19
    1f92:	80 81       	ld	r24, Z
    1f94:	88 23       	and	r24, r24
    1f96:	11 f7       	brne	.-60     	; 0x1f5c <UART_sendString+0x1a>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <UART_receiveString>:

void UART_receiveString(uint8 *Str , const Uart_ConfigType * Config_Ptr)
{
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <UART_receiveString+0xa>
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <UART_receiveString+0xc>
    1fb4:	0f 92       	push	r0
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	9b 83       	std	Y+3, r25	; 0x03
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
    1fbe:	7d 83       	std	Y+5, r23	; 0x05
    1fc0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    1fc2:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte(Config_Ptr);
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fce:	8c 01       	movw	r16, r24
    1fd0:	02 0f       	add	r16, r18
    1fd2:	13 1f       	adc	r17, r19
    1fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <UART_receiveByte>
    1fdc:	f8 01       	movw	r30, r16
    1fde:	80 83       	st	Z, r24
    1fe0:	11 c0       	rjmp	.+34     	; 0x2004 <UART_receiveString+0x5c>
	while(Str[i] != '#')
	{
		i++;
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte(Config_Ptr);
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff2:	8c 01       	movw	r16, r24
    1ff4:	02 0f       	add	r16, r18
    1ff6:	13 1f       	adc	r17, r19
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <UART_receiveByte>
    2000:	f8 01       	movw	r30, r16
    2002:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str , const Uart_ConfigType * Config_Ptr)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte(Config_Ptr);
	while(Str[i] != '#')
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	fc 01       	movw	r30, r24
    2010:	e2 0f       	add	r30, r18
    2012:	f3 1f       	adc	r31, r19
    2014:	80 81       	ld	r24, Z
    2016:	83 32       	cpi	r24, 0x23	; 35
    2018:	21 f7       	brne	.-56     	; 0x1fe2 <UART_receiveString+0x3a>
	{
		i++;
		Str[i] = UART_receiveByte(Config_Ptr);
	}
	Str[i] = '\0';
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	fc 01       	movw	r30, r24
    2026:	e2 0f       	add	r30, r18
    2028:	f3 1f       	adc	r31, r19
    202a:	10 82       	st	Z, r1
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	08 95       	ret

00002040 <LOCK_receiveAndSaveNewPass>:


#include "used_functions2.h"

void LOCK_receiveAndSaveNewPass(char * a_str_PTR)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	61 97       	sbiw	r28, 0x11	; 17
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	99 8b       	std	Y+17, r25	; 0x11
    2056:	88 8b       	std	Y+16, r24	; 0x10
	 *                        The function takes pointer to character as a string is passed to it to receive the string in it using the function
	 *                        UART_receiveString(uint8 * str) .
	 * [Returns]     : The function returns void .
	 *
	 *********************************************************************************************************************************/
	uint8 i = 0 ; // counter
    2058:	1f 86       	std	Y+15, r1	; 0x0f
	while(UART_receiveByte(&Uart_Config) != FINISHED_NEW_PASS){}
    205a:	8d e6       	ldi	r24, 0x6D	; 109
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <UART_receiveByte>
    2062:	80 33       	cpi	r24, 0x30	; 48
    2064:	91 05       	cpc	r25, r1
    2066:	c9 f7       	brne	.-14     	; 0x205a <LOCK_receiveAndSaveNewPass+0x1a>
	UART_sendByte(M_READY,&Uart_Config);
    2068:	2d e6       	ldi	r18, 0x6D	; 109
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	80 e1       	ldi	r24, 0x10	; 16
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	b9 01       	movw	r22, r18
    2072:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <UART_sendByte>

	UART_receiveString((uint8 *)a_str_PTR , &Uart_Config);
    2076:	88 89       	ldd	r24, Y+16	; 0x10
    2078:	99 89       	ldd	r25, Y+17	; 0x11
    207a:	2d e6       	ldi	r18, 0x6D	; 109
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	b9 01       	movw	r22, r18
    2080:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <UART_receiveString>


	for(i=0 ; i<5; i++)
    2084:	1f 86       	std	Y+15, r1	; 0x0f
    2086:	88 c0       	rjmp	.+272    	; 0x2198 <LOCK_receiveAndSaveNewPass+0x158>
	{
		EEPROM_writeByte(PASS_ADDRESS_EEPROM+i,(uint8)a_str_PTR[i]);
    2088:	8f 85       	ldd	r24, Y+15	; 0x0f
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	8f 5e       	subi	r24, 0xEF	; 239
    2090:	9c 4f       	sbci	r25, 0xFC	; 252
    2092:	ac 01       	movw	r20, r24
    2094:	8f 85       	ldd	r24, Y+15	; 0x0f
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	88 89       	ldd	r24, Y+16	; 0x10
    209c:	99 89       	ldd	r25, Y+17	; 0x11
    209e:	fc 01       	movw	r30, r24
    20a0:	e2 0f       	add	r30, r18
    20a2:	f3 1f       	adc	r31, r19
    20a4:	20 81       	ld	r18, Z
    20a6:	ca 01       	movw	r24, r20
    20a8:	62 2f       	mov	r22, r18
    20aa:	0e 94 f1 06 	call	0xde2	; 0xde2 <EEPROM_writeByte>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a6 e1       	ldi	r26, 0x16	; 22
    20b4:	b4 e4       	ldi	r27, 0x44	; 68
    20b6:	8b 87       	std	Y+11, r24	; 0x0b
    20b8:	9c 87       	std	Y+12, r25	; 0x0c
    20ba:	ad 87       	std	Y+13, r26	; 0x0d
    20bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20be:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	4a e7       	ldi	r20, 0x7A	; 122
    20cc:	53 e4       	ldi	r21, 0x43	; 67
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	8f 83       	std	Y+7, r24	; 0x07
    20d8:	98 87       	std	Y+8, r25	; 0x08
    20da:	a9 87       	std	Y+9, r26	; 0x09
    20dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20de:	6f 81       	ldd	r22, Y+7	; 0x07
    20e0:	78 85       	ldd	r23, Y+8	; 0x08
    20e2:	89 85       	ldd	r24, Y+9	; 0x09
    20e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e8       	ldi	r20, 0x80	; 128
    20ec:	5f e3       	ldi	r21, 0x3F	; 63
    20ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f2:	88 23       	and	r24, r24
    20f4:	2c f4       	brge	.+10     	; 0x2100 <LOCK_receiveAndSaveNewPass+0xc0>
		__ticks = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	3f c0       	rjmp	.+126    	; 0x217e <LOCK_receiveAndSaveNewPass+0x13e>
	else if (__tmp > 65535)
    2100:	6f 81       	ldd	r22, Y+7	; 0x07
    2102:	78 85       	ldd	r23, Y+8	; 0x08
    2104:	89 85       	ldd	r24, Y+9	; 0x09
    2106:	9a 85       	ldd	r25, Y+10	; 0x0a
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	3f ef       	ldi	r19, 0xFF	; 255
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	57 e4       	ldi	r21, 0x47	; 71
    2110:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	4c f5       	brge	.+82     	; 0x216a <LOCK_receiveAndSaveNewPass+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2118:	6b 85       	ldd	r22, Y+11	; 0x0b
    211a:	7c 85       	ldd	r23, Y+12	; 0x0c
    211c:	8d 85       	ldd	r24, Y+13	; 0x0d
    211e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e2       	ldi	r20, 0x20	; 32
    2126:	51 e4       	ldi	r21, 0x41	; 65
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
    2140:	0f c0       	rjmp	.+30     	; 0x2160 <LOCK_receiveAndSaveNewPass+0x120>
    2142:	89 e1       	ldi	r24, 0x19	; 25
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	8b 83       	std	Y+3, r24	; 0x03
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LOCK_receiveAndSaveNewPass+0x10e>
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	69 f7       	brne	.-38     	; 0x2142 <LOCK_receiveAndSaveNewPass+0x102>
    2168:	14 c0       	rjmp	.+40     	; 0x2192 <LOCK_receiveAndSaveNewPass+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216a:	6f 81       	ldd	r22, Y+7	; 0x07
    216c:	78 85       	ldd	r23, Y+8	; 0x08
    216e:	89 85       	ldd	r24, Y+9	; 0x09
    2170:	9a 85       	ldd	r25, Y+10	; 0x0a
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LOCK_receiveAndSaveNewPass+0x14a>
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(M_READY,&Uart_Config);

	UART_receiveString((uint8 *)a_str_PTR , &Uart_Config);


	for(i=0 ; i<5; i++)
    2192:	8f 85       	ldd	r24, Y+15	; 0x0f
    2194:	8f 5f       	subi	r24, 0xFF	; 255
    2196:	8f 87       	std	Y+15, r24	; 0x0f
    2198:	8f 85       	ldd	r24, Y+15	; 0x0f
    219a:	85 30       	cpi	r24, 0x05	; 5
    219c:	08 f4       	brcc	.+2      	; 0x21a0 <LOCK_receiveAndSaveNewPass+0x160>
    219e:	74 cf       	rjmp	.-280    	; 0x2088 <LOCK_receiveAndSaveNewPass+0x48>
	{
		EEPROM_writeByte(PASS_ADDRESS_EEPROM+i,(uint8)a_str_PTR[i]);
		_delay_ms(600);   // writing time

	}
}
    21a0:	61 96       	adiw	r28, 0x11	; 17
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <LOCK_sendRightPass>:

void LOCK_sendRightPass(char * a_str_PTR1 )
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	62 97       	sbiw	r28, 0x12	; 18
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	9a 8b       	std	Y+18, r25	; 0x12
    21c8:	89 8b       	std	Y+17, r24	; 0x11
	 * [Returns]     : The function returns void .
	 *
	 *********************************************************************************************************************************/
	uint8 i ;
	char c ;
	for(i=0 ; i <5; i++)
    21ca:	1f 86       	std	Y+15, r1	; 0x0f
    21cc:	8a c0       	rjmp	.+276    	; 0x22e2 <LOCK_sendRightPass+0x130>
	{
		EEPROM_readByte(PASS_ADDRESS_EEPROM+i,(uint8 *)&c);
    21ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d0:	88 2f       	mov	r24, r24
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	8f 5e       	subi	r24, 0xEF	; 239
    21d6:	9c 4f       	sbci	r25, 0xFC	; 252
    21d8:	9e 01       	movw	r18, r28
    21da:	20 5f       	subi	r18, 0xF0	; 240
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	b9 01       	movw	r22, r18
    21e0:	0e 94 32 07 	call	0xe64	; 0xe64 <EEPROM_readByte>
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	a8 ec       	ldi	r26, 0xC8	; 200
    21ea:	b2 e4       	ldi	r27, 0x42	; 66
    21ec:	8b 87       	std	Y+11, r24	; 0x0b
    21ee:	9c 87       	std	Y+12, r25	; 0x0c
    21f0:	ad 87       	std	Y+13, r26	; 0x0d
    21f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	4a e7       	ldi	r20, 0x7A	; 122
    2202:	53 e4       	ldi	r21, 0x43	; 67
    2204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	8f 83       	std	Y+7, r24	; 0x07
    220e:	98 87       	std	Y+8, r25	; 0x08
    2210:	a9 87       	std	Y+9, r26	; 0x09
    2212:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2214:	6f 81       	ldd	r22, Y+7	; 0x07
    2216:	78 85       	ldd	r23, Y+8	; 0x08
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e8       	ldi	r20, 0x80	; 128
    2222:	5f e3       	ldi	r21, 0x3F	; 63
    2224:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2228:	88 23       	and	r24, r24
    222a:	2c f4       	brge	.+10     	; 0x2236 <LOCK_sendRightPass+0x84>
		__ticks = 1;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
    2234:	3f c0       	rjmp	.+126    	; 0x22b4 <LOCK_sendRightPass+0x102>
	else if (__tmp > 65535)
    2236:	6f 81       	ldd	r22, Y+7	; 0x07
    2238:	78 85       	ldd	r23, Y+8	; 0x08
    223a:	89 85       	ldd	r24, Y+9	; 0x09
    223c:	9a 85       	ldd	r25, Y+10	; 0x0a
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	3f ef       	ldi	r19, 0xFF	; 255
    2242:	4f e7       	ldi	r20, 0x7F	; 127
    2244:	57 e4       	ldi	r21, 0x47	; 71
    2246:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224a:	18 16       	cp	r1, r24
    224c:	4c f5       	brge	.+82     	; 0x22a0 <LOCK_sendRightPass+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2250:	7c 85       	ldd	r23, Y+12	; 0x0c
    2252:	8d 85       	ldd	r24, Y+13	; 0x0d
    2254:	9e 85       	ldd	r25, Y+14	; 0x0e
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e2       	ldi	r20, 0x20	; 32
    225c:	51 e4       	ldi	r21, 0x41	; 65
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
    226a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <LOCK_sendRightPass+0xe4>
    2278:	89 e1       	ldi	r24, 0x19	; 25
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9c 83       	std	Y+4, r25	; 0x04
    227e:	8b 83       	std	Y+3, r24	; 0x03
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	9c 81       	ldd	r25, Y+4	; 0x04
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <LOCK_sendRightPass+0xd2>
    2288:	9c 83       	std	Y+4, r25	; 0x04
    228a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	9e 83       	std	Y+6, r25	; 0x06
    2294:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	69 f7       	brne	.-38     	; 0x2278 <LOCK_sendRightPass+0xc6>
    229e:	14 c0       	rjmp	.+40     	; 0x22c8 <LOCK_sendRightPass+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a0:	6f 81       	ldd	r22, Y+7	; 0x07
    22a2:	78 85       	ldd	r23, Y+8	; 0x08
    22a4:	89 85       	ldd	r24, Y+9	; 0x09
    22a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	9e 81       	ldd	r25, Y+6	; 0x06
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <LOCK_sendRightPass+0x10e>
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		a_str_PTR1[i]=c;
    22c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	89 89       	ldd	r24, Y+17	; 0x11
    22d0:	9a 89       	ldd	r25, Y+18	; 0x12
    22d2:	fc 01       	movw	r30, r24
    22d4:	e2 0f       	add	r30, r18
    22d6:	f3 1f       	adc	r31, r19
    22d8:	88 89       	ldd	r24, Y+16	; 0x10
    22da:	80 83       	st	Z, r24
	 * [Returns]     : The function returns void .
	 *
	 *********************************************************************************************************************************/
	uint8 i ;
	char c ;
	for(i=0 ; i <5; i++)
    22dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22de:	8f 5f       	subi	r24, 0xFF	; 255
    22e0:	8f 87       	std	Y+15, r24	; 0x0f
    22e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e4:	85 30       	cpi	r24, 0x05	; 5
    22e6:	08 f4       	brcc	.+2      	; 0x22ea <LOCK_sendRightPass+0x138>
    22e8:	72 cf       	rjmp	.-284    	; 0x21ce <LOCK_sendRightPass+0x1c>
	{
		EEPROM_readByte(PASS_ADDRESS_EEPROM+i,(uint8 *)&c);
		_delay_ms(100);
		a_str_PTR1[i]=c;
	}
	a_str_PTR1[i] = '#' ;
    22ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	89 89       	ldd	r24, Y+17	; 0x11
    22f2:	9a 89       	ldd	r25, Y+18	; 0x12
    22f4:	fc 01       	movw	r30, r24
    22f6:	e2 0f       	add	r30, r18
    22f8:	f3 1f       	adc	r31, r19
    22fa:	83 e2       	ldi	r24, 0x23	; 35
    22fc:	80 83       	st	Z, r24
	a_str_PTR1[i+1] = '\0';
    22fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9c 01       	movw	r18, r24
    2306:	2f 5f       	subi	r18, 0xFF	; 255
    2308:	3f 4f       	sbci	r19, 0xFF	; 255
    230a:	89 89       	ldd	r24, Y+17	; 0x11
    230c:	9a 89       	ldd	r25, Y+18	; 0x12
    230e:	fc 01       	movw	r30, r24
    2310:	e2 0f       	add	r30, r18
    2312:	f3 1f       	adc	r31, r19
    2314:	10 82       	st	Z, r1
	UART_sendByte(FINISHED_PASS,&Uart_Config);
    2316:	2d e6       	ldi	r18, 0x6D	; 109
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	80 e4       	ldi	r24, 0x40	; 64
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	b9 01       	movw	r22, r18
    2320:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <UART_sendByte>
	while(UART_receiveByte(&Uart_Config)!=M_READY){}
    2324:	8d e6       	ldi	r24, 0x6D	; 109
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <UART_receiveByte>
    232c:	80 31       	cpi	r24, 0x10	; 16
    232e:	91 05       	cpc	r25, r1
    2330:	c9 f7       	brne	.-14     	; 0x2324 <LOCK_sendRightPass+0x172>
	UART_sendString((uint8*)a_str_PTR1,&Uart_Config);
    2332:	89 89       	ldd	r24, Y+17	; 0x11
    2334:	9a 89       	ldd	r25, Y+18	; 0x12
    2336:	2d e6       	ldi	r18, 0x6D	; 109
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	b9 01       	movw	r22, r18
    233c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <UART_sendString>

}
    2340:	62 96       	adiw	r28, 0x12	; 18
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <LOCK_timerCount>:
void LOCK_timerCount(uint8 time)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	0f 92       	push	r0
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * [Returns]     : The function returns void.
	 *
	 *
	 *********************************************************************************************************************************/
	Timer0_init (&Timer0_Config);
    235e:	88 e6       	ldi	r24, 0x68	; 104
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <Timer0_init>
	while(g_timer != time){}
    2366:	90 91 78 00 	lds	r25, 0x0078
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	98 17       	cp	r25, r24
    236e:	d9 f7       	brne	.-10     	; 0x2366 <LOCK_timerCount+0x14>
	Timer0_DeInit();
    2370:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Timer0_DeInit>
	g_sec = 0;
    2374:	10 92 79 00 	sts	0x0079, r1
	g_timer = 0 ;
    2378:	10 92 78 00 	sts	0x0078, r1
}
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <__udivmodsi4>:
    2384:	a1 e2       	ldi	r26, 0x21	; 33
    2386:	1a 2e       	mov	r1, r26
    2388:	aa 1b       	sub	r26, r26
    238a:	bb 1b       	sub	r27, r27
    238c:	fd 01       	movw	r30, r26
    238e:	0d c0       	rjmp	.+26     	; 0x23aa <__udivmodsi4_ep>

00002390 <__udivmodsi4_loop>:
    2390:	aa 1f       	adc	r26, r26
    2392:	bb 1f       	adc	r27, r27
    2394:	ee 1f       	adc	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	a2 17       	cp	r26, r18
    239a:	b3 07       	cpc	r27, r19
    239c:	e4 07       	cpc	r30, r20
    239e:	f5 07       	cpc	r31, r21
    23a0:	20 f0       	brcs	.+8      	; 0x23aa <__udivmodsi4_ep>
    23a2:	a2 1b       	sub	r26, r18
    23a4:	b3 0b       	sbc	r27, r19
    23a6:	e4 0b       	sbc	r30, r20
    23a8:	f5 0b       	sbc	r31, r21

000023aa <__udivmodsi4_ep>:
    23aa:	66 1f       	adc	r22, r22
    23ac:	77 1f       	adc	r23, r23
    23ae:	88 1f       	adc	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	1a 94       	dec	r1
    23b4:	69 f7       	brne	.-38     	; 0x2390 <__udivmodsi4_loop>
    23b6:	60 95       	com	r22
    23b8:	70 95       	com	r23
    23ba:	80 95       	com	r24
    23bc:	90 95       	com	r25
    23be:	9b 01       	movw	r18, r22
    23c0:	ac 01       	movw	r20, r24
    23c2:	bd 01       	movw	r22, r26
    23c4:	cf 01       	movw	r24, r30
    23c6:	08 95       	ret

000023c8 <__prologue_saves__>:
    23c8:	2f 92       	push	r2
    23ca:	3f 92       	push	r3
    23cc:	4f 92       	push	r4
    23ce:	5f 92       	push	r5
    23d0:	6f 92       	push	r6
    23d2:	7f 92       	push	r7
    23d4:	8f 92       	push	r8
    23d6:	9f 92       	push	r9
    23d8:	af 92       	push	r10
    23da:	bf 92       	push	r11
    23dc:	cf 92       	push	r12
    23de:	df 92       	push	r13
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	ca 1b       	sub	r28, r26
    23f2:	db 0b       	sbc	r29, r27
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	09 94       	ijmp

00002400 <__epilogue_restores__>:
    2400:	2a 88       	ldd	r2, Y+18	; 0x12
    2402:	39 88       	ldd	r3, Y+17	; 0x11
    2404:	48 88       	ldd	r4, Y+16	; 0x10
    2406:	5f 84       	ldd	r5, Y+15	; 0x0f
    2408:	6e 84       	ldd	r6, Y+14	; 0x0e
    240a:	7d 84       	ldd	r7, Y+13	; 0x0d
    240c:	8c 84       	ldd	r8, Y+12	; 0x0c
    240e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2410:	aa 84       	ldd	r10, Y+10	; 0x0a
    2412:	b9 84       	ldd	r11, Y+9	; 0x09
    2414:	c8 84       	ldd	r12, Y+8	; 0x08
    2416:	df 80       	ldd	r13, Y+7	; 0x07
    2418:	ee 80       	ldd	r14, Y+6	; 0x06
    241a:	fd 80       	ldd	r15, Y+5	; 0x05
    241c:	0c 81       	ldd	r16, Y+4	; 0x04
    241e:	1b 81       	ldd	r17, Y+3	; 0x03
    2420:	aa 81       	ldd	r26, Y+2	; 0x02
    2422:	b9 81       	ldd	r27, Y+1	; 0x01
    2424:	ce 0f       	add	r28, r30
    2426:	d1 1d       	adc	r29, r1
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	ed 01       	movw	r28, r26
    2434:	08 95       	ret

00002436 <itoa>:
    2436:	fb 01       	movw	r30, r22
    2438:	9f 01       	movw	r18, r30
    243a:	e8 94       	clt
    243c:	42 30       	cpi	r20, 0x02	; 2
    243e:	c4 f0       	brlt	.+48     	; 0x2470 <itoa+0x3a>
    2440:	45 32       	cpi	r20, 0x25	; 37
    2442:	b4 f4       	brge	.+44     	; 0x2470 <itoa+0x3a>
    2444:	4a 30       	cpi	r20, 0x0A	; 10
    2446:	29 f4       	brne	.+10     	; 0x2452 <itoa+0x1c>
    2448:	97 fb       	bst	r25, 7
    244a:	1e f4       	brtc	.+6      	; 0x2452 <itoa+0x1c>
    244c:	90 95       	com	r25
    244e:	81 95       	neg	r24
    2450:	9f 4f       	sbci	r25, 0xFF	; 255
    2452:	64 2f       	mov	r22, r20
    2454:	77 27       	eor	r23, r23
    2456:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodhi4>
    245a:	80 5d       	subi	r24, 0xD0	; 208
    245c:	8a 33       	cpi	r24, 0x3A	; 58
    245e:	0c f0       	brlt	.+2      	; 0x2462 <itoa+0x2c>
    2460:	89 5d       	subi	r24, 0xD9	; 217
    2462:	81 93       	st	Z+, r24
    2464:	cb 01       	movw	r24, r22
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	a1 f7       	brne	.-24     	; 0x2452 <itoa+0x1c>
    246a:	16 f4       	brtc	.+4      	; 0x2470 <itoa+0x3a>
    246c:	5d e2       	ldi	r21, 0x2D	; 45
    246e:	51 93       	st	Z+, r21
    2470:	10 82       	st	Z, r1
    2472:	c9 01       	movw	r24, r18
    2474:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <strrev>

00002478 <strrev>:
    2478:	dc 01       	movw	r26, r24
    247a:	fc 01       	movw	r30, r24
    247c:	67 2f       	mov	r22, r23
    247e:	71 91       	ld	r23, Z+
    2480:	77 23       	and	r23, r23
    2482:	e1 f7       	brne	.-8      	; 0x247c <strrev+0x4>
    2484:	32 97       	sbiw	r30, 0x02	; 2
    2486:	04 c0       	rjmp	.+8      	; 0x2490 <strrev+0x18>
    2488:	7c 91       	ld	r23, X
    248a:	6d 93       	st	X+, r22
    248c:	70 83       	st	Z, r23
    248e:	62 91       	ld	r22, -Z
    2490:	ae 17       	cp	r26, r30
    2492:	bf 07       	cpc	r27, r31
    2494:	c8 f3       	brcs	.-14     	; 0x2488 <strrev+0x10>
    2496:	08 95       	ret

00002498 <__udivmodhi4>:
    2498:	aa 1b       	sub	r26, r26
    249a:	bb 1b       	sub	r27, r27
    249c:	51 e1       	ldi	r21, 0x11	; 17
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <__udivmodhi4_ep>

000024a0 <__udivmodhi4_loop>:
    24a0:	aa 1f       	adc	r26, r26
    24a2:	bb 1f       	adc	r27, r27
    24a4:	a6 17       	cp	r26, r22
    24a6:	b7 07       	cpc	r27, r23
    24a8:	10 f0       	brcs	.+4      	; 0x24ae <__udivmodhi4_ep>
    24aa:	a6 1b       	sub	r26, r22
    24ac:	b7 0b       	sbc	r27, r23

000024ae <__udivmodhi4_ep>:
    24ae:	88 1f       	adc	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	5a 95       	dec	r21
    24b4:	a9 f7       	brne	.-22     	; 0x24a0 <__udivmodhi4_loop>
    24b6:	80 95       	com	r24
    24b8:	90 95       	com	r25
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	08 95       	ret

000024c0 <_exit>:
    24c0:	f8 94       	cli

000024c2 <__stop_program>:
    24c2:	ff cf       	rjmp	.-2      	; 0x24c2 <__stop_program>
